a.a.a -> a.a.a:
    void <init>() -> <init>
a.a.b -> a.a.b:
    void <init>() -> <init>
android.support.v4.graphics.drawable.IconCompatParcelizer -> android.support.v4.graphics.drawable.IconCompatParcelizer:
    void <init>() -> <init>
    androidx.core.graphics.drawable.IconCompat read(androidx.versionedparcelable.VersionedParcel) -> read
    void write(androidx.core.graphics.drawable.IconCompat,androidx.versionedparcelable.VersionedParcel) -> write
androidx.annotation.Keep -> androidx.annotation.Keep:
androidx.core.app.CoreComponentFactory -> androidx.core.app.CoreComponentFactory:
    void <init>() -> <init>
    android.app.Activity instantiateActivity(java.lang.ClassLoader,java.lang.String,android.content.Intent) -> instantiateActivity
    android.app.Application instantiateApplication(java.lang.ClassLoader,java.lang.String) -> instantiateApplication
    android.content.BroadcastReceiver instantiateReceiver(java.lang.ClassLoader,java.lang.String,android.content.Intent) -> instantiateReceiver
    android.content.ContentProvider instantiateProvider(java.lang.ClassLoader,java.lang.String) -> instantiateProvider
    android.app.Service instantiateService(java.lang.ClassLoader,java.lang.String,android.content.Intent) -> instantiateService
    java.lang.Object checkCompatWrapper(java.lang.Object) -> a
androidx.core.app.CoreComponentFactory$CompatWrapped -> androidx.core.app.CoreComponentFactory$a:
    java.lang.Object getWrapper() -> a
androidx.core.graphics.drawable.IconCompat -> androidx.core.graphics.drawable.IconCompat:
    int mType -> a
    java.lang.Object mObj1 -> b
    byte[] mData -> c
    android.os.Parcelable mParcelable -> d
    int mInt1 -> e
    int mInt2 -> f
    android.content.res.ColorStateList mTintList -> g
    android.graphics.PorterDuff$Mode DEFAULT_TINT_MODE -> h
    android.graphics.PorterDuff$Mode mTintMode -> i
    java.lang.String mTintModeStr -> j
    void <init>() -> <init>
    java.lang.String getResPackage() -> a
    int getResId() -> b
    java.lang.String toString() -> toString
    void onPreParceling(boolean) -> a
    void onPostParceling() -> c
    java.lang.String typeToString(int) -> a
    java.lang.String getResPackage(android.graphics.drawable.Icon) -> a
    int getResId(android.graphics.drawable.Icon) -> b
    void <clinit>() -> <clinit>
androidx.core.graphics.drawable.IconCompatParcelizer -> androidx.core.graphics.drawable.IconCompatParcelizer:
    void <init>() -> <init>
    androidx.core.graphics.drawable.IconCompat read(androidx.versionedparcelable.VersionedParcel) -> read
    void write(androidx.core.graphics.drawable.IconCompat,androidx.versionedparcelable.VersionedParcel) -> write
androidx.lifecycle.CompositeGeneratedAdaptersObserver -> androidx.a.a:
androidx.lifecycle.FullLifecycleObserverAdapter -> androidx.a.b:
androidx.lifecycle.Lifecycle -> androidx.a.c:
androidx.lifecycle.LiveData -> androidx.a.d:
    java.lang.Object NOT_SET -> a
    void <clinit>() -> <clinit>
androidx.lifecycle.LiveData$LifecycleBoundObserver -> androidx.a.d$a:
androidx.lifecycle.LiveData$ObserverWrapper -> androidx.a.d$b:
androidx.lifecycle.ReflectiveGenericLifecycleObserver -> androidx.a.e:
androidx.lifecycle.SingleGeneratedAdapterObserver -> androidx.a.f:
androidx.versionedparcelable.CustomVersionedParcelable -> androidx.versionedparcelable.CustomVersionedParcelable:
    void <init>() -> <init>
    void onPreParceling(boolean) -> a
    void onPostParceling() -> c
androidx.versionedparcelable.ParcelImpl -> androidx.versionedparcelable.ParcelImpl:
    androidx.versionedparcelable.VersionedParcelable mParcel -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void <init>(android.os.Parcel) -> <init>
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    void <clinit>() -> <clinit>
androidx.versionedparcelable.ParcelImpl$1 -> androidx.versionedparcelable.ParcelImpl$1:
    void <init>() -> <init>
    androidx.versionedparcelable.ParcelImpl createFromParcel(android.os.Parcel) -> a
    androidx.versionedparcelable.ParcelImpl[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
androidx.versionedparcelable.VersionedParcel -> androidx.versionedparcelable.a:
    void <init>() -> <init>
    boolean isStream() -> a
    void closeField() -> b
    androidx.versionedparcelable.VersionedParcel createSubParcel() -> c
    void writeByteArray(byte[]) -> a
    void writeInt(int) -> a
    void writeString(java.lang.String) -> a
    void writeParcelable(android.os.Parcelable) -> a
    int readInt() -> d
    java.lang.String readString() -> e
    byte[] readByteArray() -> f
    android.os.Parcelable readParcelable() -> g
    boolean readField(int) -> b
    void setOutputField(int) -> c
    void setSerializationFlags(boolean,boolean) -> a
    void writeByteArray(byte[],int) -> a
    void writeInt(int,int) -> a
    void writeString(java.lang.String,int) -> a
    void writeParcelable(android.os.Parcelable,int) -> a
    int readInt(int,int) -> b
    java.lang.String readString(java.lang.String,int) -> b
    byte[] readByteArray(byte[],int) -> b
    android.os.Parcelable readParcelable(android.os.Parcelable,int) -> b
    void writeVersionedParcelable(androidx.versionedparcelable.VersionedParcelable) -> a
    void writeVersionedParcelableCreator(androidx.versionedparcelable.VersionedParcelable) -> b
    androidx.versionedparcelable.VersionedParcelable readVersionedParcelable() -> h
    androidx.versionedparcelable.VersionedParcelable readFromParcel(java.lang.String,androidx.versionedparcelable.VersionedParcel) -> a
    void writeToParcel(androidx.versionedparcelable.VersionedParcelable,androidx.versionedparcelable.VersionedParcel) -> a
    java.lang.Class findParcelClass(androidx.versionedparcelable.VersionedParcelable) -> c
    java.lang.Class findParcelClass(java.lang.Class) -> a
androidx.versionedparcelable.VersionedParcelParcel -> androidx.versionedparcelable.b:
    android.util.SparseIntArray mPositionLookup -> a
    android.os.Parcel mParcel -> b
    int mOffset -> c
    int mEnd -> d
    java.lang.String mPrefix -> e
    int mCurrentField -> f
    int mNextRead -> g
    void <init>(android.os.Parcel) -> <init>
    void <init>(android.os.Parcel,int,int,java.lang.String) -> <init>
    int readUntilField(int) -> d
    boolean readField(int) -> b
    void setOutputField(int) -> c
    void closeField() -> b
    androidx.versionedparcelable.VersionedParcel createSubParcel() -> c
    void writeByteArray(byte[]) -> a
    void writeInt(int) -> a
    void writeString(java.lang.String) -> a
    void writeParcelable(android.os.Parcelable) -> a
    int readInt() -> d
    java.lang.String readString() -> e
    byte[] readByteArray() -> f
    android.os.Parcelable readParcelable() -> g
androidx.versionedparcelable.VersionedParcelable -> androidx.versionedparcelable.c:
bitter.jnibridge.JNIBridge -> bitter.jnibridge.JNIBridge:
    void <init>() -> <init>
    java.lang.Object invoke(long,java.lang.Class,java.lang.reflect.Method,java.lang.Object[]) -> invoke
    void delete(long) -> delete
    java.lang.Object newInterfaceProxy(long,java.lang.Class[]) -> newInterfaceProxy
    void disableInterfaceProxy(java.lang.Object) -> disableInterfaceProxy
bitter.jnibridge.JNIBridge$a -> bitter.jnibridge.JNIBridge$a:
    java.lang.Object a -> a
    long b -> b
    java.lang.reflect.Constructor c -> c
    void <init>(long) -> <init>
    java.lang.Object a(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> a
    java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> invoke
    void finalize() -> finalize
    void a() -> a
com.example.sains.MainActivity -> com.example.sains.MainActivity:
    void onCreate(android.os.Bundle) -> onCreate
    void <init>() -> <init>
com.google.a.a.a -> com.google.a.a.a:
    com.google.a.a.c a -> a
    void <init>(java.lang.String) -> <init>
    android.os.IBinder asBinder() -> asBinder
    boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
    boolean a(int,android.os.Parcel) -> a
    void <clinit>() -> <clinit>
com.google.a.a.b -> com.google.a.a.b:
    android.os.IBinder a -> a
    java.lang.String b -> b
    void <init>(android.os.IBinder,java.lang.String) -> <init>
    android.os.IBinder asBinder() -> asBinder
    android.os.Parcel a() -> a
    android.os.Parcel a(int,android.os.Parcel) -> a
    void b(int,android.os.Parcel) -> b
com.google.a.a.c -> com.google.a.a.c:
com.google.a.a.d -> com.google.a.a.d:
    void <init>() -> <init>
    android.os.Parcelable a(android.os.Parcel,android.os.Parcelable$Creator) -> a
    void a(android.os.Parcel,android.os.Parcelable) -> a
    void a(android.os.Parcel,android.os.IInterface) -> a
    void <clinit>() -> <clinit>
com.google.a.b.a.a.a.a -> com.google.a.b.a.a.a.a:
    com.google.a.b.a.a.a.b a(android.os.IBinder) -> a
com.google.a.b.a.a.a.b -> com.google.a.b.a.a.a.b:
    void a(java.lang.String,java.util.List,android.os.Bundle,com.google.a.b.a.a.a.c) -> a
    void a(java.lang.String,android.os.Bundle,com.google.a.b.a.a.a.c) -> a
com.google.a.b.a.a.a.c -> com.google.a.b.a.a.a.c:
    void a(android.os.Bundle) -> a
    void b(android.os.Bundle) -> b
    void a() -> a
com.google.a.b.a.a.a.d -> com.google.a.b.a.a.a.d:
    void <init>(android.os.IBinder) -> <init>
    void a(java.lang.String,java.util.List,android.os.Bundle,com.google.a.b.a.a.a.c) -> a
    void a(java.lang.String,android.os.Bundle,com.google.a.b.a.a.a.c) -> a
com.google.a.b.a.a.a.e -> com.google.a.b.a.a.a.e:
    void <init>() -> <init>
    boolean a(int,android.os.Parcel) -> a
com.google.ar.core.Anchor -> com.google.ar.core.Anchor:
    com.google.ar.core.Session session -> session
    long nativeHandle -> nativeHandle
    void <init>(long,com.google.ar.core.Session) -> <init>
    void <init>() -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void finalize() -> finalize
    com.google.ar.core.Pose getPose() -> getPose
    com.google.ar.core.TrackingState getTrackingState() -> getTrackingState
    java.lang.String getCloudAnchorId() -> getCloudAnchorId
    com.google.ar.core.Anchor$CloudAnchorState getCloudAnchorState() -> getCloudAnchorState
    void detach() -> detach
    void nativeReleaseAnchor(long) -> nativeReleaseAnchor
    com.google.ar.core.Pose nativeGetPose(long,long) -> nativeGetPose
    int nativeGetTrackingState(long,long) -> nativeGetTrackingState
    void nativeDetach(long,long) -> nativeDetach
    java.lang.String nativeGetCloudAnchorId(long,long) -> nativeGetCloudAnchorId
    int nativeGetCloudAnchorState(long,long) -> nativeGetCloudAnchorState
com.google.ar.core.Anchor$CloudAnchorState -> com.google.ar.core.Anchor$CloudAnchorState:
    com.google.ar.core.Anchor$CloudAnchorState NONE -> NONE
    com.google.ar.core.Anchor$CloudAnchorState TASK_IN_PROGRESS -> TASK_IN_PROGRESS
    com.google.ar.core.Anchor$CloudAnchorState SUCCESS -> SUCCESS
    com.google.ar.core.Anchor$CloudAnchorState ERROR_INTERNAL -> ERROR_INTERNAL
    com.google.ar.core.Anchor$CloudAnchorState ERROR_NOT_AUTHORIZED -> ERROR_NOT_AUTHORIZED
    com.google.ar.core.Anchor$CloudAnchorState ERROR_SERVICE_UNAVAILABLE -> ERROR_SERVICE_UNAVAILABLE
    com.google.ar.core.Anchor$CloudAnchorState ERROR_RESOURCE_EXHAUSTED -> ERROR_RESOURCE_EXHAUSTED
    com.google.ar.core.Anchor$CloudAnchorState ERROR_HOSTING_DATASET_PROCESSING_FAILED -> ERROR_HOSTING_DATASET_PROCESSING_FAILED
    com.google.ar.core.Anchor$CloudAnchorState ERROR_CLOUD_ID_NOT_FOUND -> ERROR_CLOUD_ID_NOT_FOUND
    com.google.ar.core.Anchor$CloudAnchorState ERROR_RESOLVING_LOCALIZATION_NO_MATCH -> ERROR_RESOLVING_LOCALIZATION_NO_MATCH
    com.google.ar.core.Anchor$CloudAnchorState ERROR_RESOLVING_SDK_VERSION_TOO_OLD -> ERROR_RESOLVING_SDK_VERSION_TOO_OLD
    com.google.ar.core.Anchor$CloudAnchorState ERROR_RESOLVING_SDK_VERSION_TOO_NEW -> ERROR_RESOLVING_SDK_VERSION_TOO_NEW
    int nativeCode -> nativeCode
    com.google.ar.core.Anchor$CloudAnchorState[] $VALUES -> $VALUES
    com.google.ar.core.Anchor$CloudAnchorState[] values() -> values
    com.google.ar.core.Anchor$CloudAnchorState valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    boolean isError() -> isError
    com.google.ar.core.Anchor$CloudAnchorState forNumber(int) -> forNumber
    void <clinit>() -> <clinit>
com.google.ar.core.ArCoreApk -> com.google.ar.core.ArCoreApk:
    com.google.ar.core.ArCoreApk getInstance() -> getInstance
    void <init>() -> <init>
    com.google.ar.core.ArCoreApk$Availability checkAvailability(android.content.Context) -> checkAvailability
    com.google.ar.core.ArCoreApk$InstallStatus requestInstall(android.app.Activity,boolean) -> requestInstall
    com.google.ar.core.ArCoreApk$InstallStatus requestInstall(android.app.Activity,boolean,com.google.ar.core.ArCoreApk$InstallBehavior,com.google.ar.core.ArCoreApk$UserMessageType) -> requestInstall
com.google.ar.core.ArCoreApk$Availability -> com.google.ar.core.ArCoreApk$Availability:
    com.google.ar.core.ArCoreApk$Availability UNKNOWN_ERROR -> UNKNOWN_ERROR
    com.google.ar.core.ArCoreApk$Availability UNKNOWN_CHECKING -> UNKNOWN_CHECKING
    com.google.ar.core.ArCoreApk$Availability UNKNOWN_TIMED_OUT -> UNKNOWN_TIMED_OUT
    com.google.ar.core.ArCoreApk$Availability UNSUPPORTED_DEVICE_NOT_CAPABLE -> UNSUPPORTED_DEVICE_NOT_CAPABLE
    com.google.ar.core.ArCoreApk$Availability SUPPORTED_NOT_INSTALLED -> SUPPORTED_NOT_INSTALLED
    com.google.ar.core.ArCoreApk$Availability SUPPORTED_APK_TOO_OLD -> SUPPORTED_APK_TOO_OLD
    com.google.ar.core.ArCoreApk$Availability SUPPORTED_INSTALLED -> SUPPORTED_INSTALLED
    int nativeCode -> nativeCode
    com.google.ar.core.ArCoreApk$Availability[] $VALUES -> $VALUES
    com.google.ar.core.ArCoreApk$Availability[] values() -> values
    com.google.ar.core.ArCoreApk$Availability valueOf(java.lang.String) -> valueOf
    boolean isUnknown() -> isUnknown
    boolean isUnsupported() -> isUnsupported
    boolean isSupported() -> isSupported
    boolean isTransient() -> isTransient
    void <init>(java.lang.String,int,int) -> <init>
    com.google.ar.core.ArCoreApk$Availability forNumber(int) -> forNumber
    void <init>(java.lang.String,int,int,com.google.ar.core.aj) -> <init>
    void <clinit>() -> <clinit>
com.google.ar.core.ArCoreApk$InstallBehavior -> com.google.ar.core.ArCoreApk$InstallBehavior:
    com.google.ar.core.ArCoreApk$InstallBehavior REQUIRED -> REQUIRED
    com.google.ar.core.ArCoreApk$InstallBehavior OPTIONAL -> OPTIONAL
    int nativeCode -> nativeCode
    com.google.ar.core.ArCoreApk$InstallBehavior[] $VALUES -> $VALUES
    com.google.ar.core.ArCoreApk$InstallBehavior[] values() -> values
    com.google.ar.core.ArCoreApk$InstallBehavior valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    com.google.ar.core.ArCoreApk$InstallBehavior forNumber(int) -> forNumber
    void <clinit>() -> <clinit>
com.google.ar.core.ArCoreApk$InstallStatus -> com.google.ar.core.ArCoreApk$InstallStatus:
    com.google.ar.core.ArCoreApk$InstallStatus INSTALLED -> INSTALLED
    com.google.ar.core.ArCoreApk$InstallStatus INSTALL_REQUESTED -> INSTALL_REQUESTED
    int nativeCode -> nativeCode
    com.google.ar.core.ArCoreApk$InstallStatus[] $VALUES -> $VALUES
    com.google.ar.core.ArCoreApk$InstallStatus[] values() -> values
    com.google.ar.core.ArCoreApk$InstallStatus valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    com.google.ar.core.ArCoreApk$InstallStatus forNumber(int) -> forNumber
    void <clinit>() -> <clinit>
com.google.ar.core.ArCoreApk$UserMessageType -> com.google.ar.core.ArCoreApk$UserMessageType:
    com.google.ar.core.ArCoreApk$UserMessageType APPLICATION -> APPLICATION
    com.google.ar.core.ArCoreApk$UserMessageType FEATURE -> FEATURE
    com.google.ar.core.ArCoreApk$UserMessageType USER_ALREADY_INFORMED -> USER_ALREADY_INFORMED
    int nativeCode -> nativeCode
    com.google.ar.core.ArCoreApk$UserMessageType[] $VALUES -> $VALUES
    com.google.ar.core.ArCoreApk$UserMessageType[] values() -> values
    com.google.ar.core.ArCoreApk$UserMessageType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    com.google.ar.core.ArCoreApk$UserMessageType forNumber(int) -> forNumber
    void <clinit>() -> <clinit>
com.google.ar.core.ArCoreApk$a -> com.google.ar.core.ArCoreApk$a:
    void a(com.google.ar.core.ArCoreApk$Availability) -> a
com.google.ar.core.ArCoreApkJniAdapter -> com.google.ar.core.ArCoreApkJniAdapter:
    java.util.Map a -> a
    void <init>() -> <init>
    int checkAvailability(android.content.Context) -> checkAvailability
    int requestInstall(android.app.Activity,boolean,int[]) -> requestInstall
    int requestInstallCustom(android.app.Activity,boolean,int,int,int[]) -> requestInstallCustom
    int a(java.lang.Throwable) -> a
    void <clinit>() -> <clinit>
com.google.ar.core.ArImage -> com.google.ar.core.ArImage:
    com.google.ar.core.Session session -> session
    long nativeHandle -> nativeHandle
    void <init>(com.google.ar.core.Session,long) -> <init>
    void close() -> close
    int getFormat() -> getFormat
    long getTimestamp() -> getTimestamp
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    android.media.Image$Plane[] getPlanes() -> getPlanes
    android.graphics.Rect getCropRect() -> getCropRect
    void setCropRect(android.graphics.Rect) -> setCropRect
    void setTimestamp(long) -> setTimestamp
    void nativeLoadSymbols() -> nativeLoadSymbols
    void nativeClose(long) -> nativeClose
    int nativeGetFormat(long,long) -> nativeGetFormat
    long nativeGetTimestamp(long,long) -> nativeGetTimestamp
    int nativeGetWidth(long,long) -> nativeGetWidth
    int nativeGetHeight(long,long) -> nativeGetHeight
    int nativeGetNumberOfPlanes(long,long) -> nativeGetNumberOfPlanes
    int nativeGetRowStride(long,long,int) -> nativeGetRowStride
    int nativeGetPixelStride(long,long,int) -> nativeGetPixelStride
    java.nio.ByteBuffer nativeGetBuffer(long,long,int) -> nativeGetBuffer
    int access$000(com.google.ar.core.ArImage,long,long,int) -> access$000
    int access$100(com.google.ar.core.ArImage,long,long,int) -> access$100
    java.nio.ByteBuffer access$200(com.google.ar.core.ArImage,long,long,int) -> access$200
com.google.ar.core.ArImage$a -> com.google.ar.core.ArImage$a:
    long a -> a
    int b -> b
    com.google.ar.core.ArImage c -> c
    void <init>(com.google.ar.core.ArImage,long,int) -> <init>
    int getRowStride() -> getRowStride
    int getPixelStride() -> getPixelStride
    java.nio.ByteBuffer getBuffer() -> getBuffer
com.google.ar.core.AugmentedFace -> com.google.ar.core.AugmentedFace:
    java.lang.String TAG -> TAG
    java.nio.FloatBuffer verticesBuffer -> verticesBuffer
    java.nio.FloatBuffer normalsBuffer -> normalsBuffer
    java.nio.FloatBuffer textureCoordinatesBuffer -> textureCoordinatesBuffer
    java.nio.ShortBuffer triangleIndicesBuffer -> triangleIndicesBuffer
    void <init>(long,com.google.ar.core.Session) -> <init>
    void <init>() -> <init>
    void populateMeshData() -> populateMeshData
    java.nio.FloatBuffer getMeshVertices() -> getMeshVertices
    java.nio.FloatBuffer getMeshNormals() -> getMeshNormals
    java.nio.FloatBuffer getMeshTextureCoordinates() -> getMeshTextureCoordinates
    java.nio.ShortBuffer getMeshTriangleIndices() -> getMeshTriangleIndices
    com.google.ar.core.Pose getRegionPose(com.google.ar.core.AugmentedFace$RegionType) -> getRegionPose
    com.google.ar.core.Pose getCenterPose() -> getCenterPose
    java.nio.ByteBuffer nativeGetMeshVerticesByteBuffer(long,long) -> nativeGetMeshVerticesByteBuffer
    java.nio.ByteBuffer nativeGetMeshNormalsByteBuffer(long,long) -> nativeGetMeshNormalsByteBuffer
    java.nio.ByteBuffer nativeGetMeshTextureCoordinatesByteBuffer(long,long) -> nativeGetMeshTextureCoordinatesByteBuffer
    java.nio.ByteBuffer nativeGetMeshTriangleIndicesByteBuffer(long,long) -> nativeGetMeshTriangleIndicesByteBuffer
    com.google.ar.core.Pose nativeGetRegionPose(long,long,int) -> nativeGetRegionPose
    com.google.ar.core.Pose nativeGetCenterPose(long,long) -> nativeGetCenterPose
    java.util.Collection getAnchors() -> getAnchors
    com.google.ar.core.Anchor createAnchor(com.google.ar.core.Pose) -> createAnchor
    com.google.ar.core.TrackingState getTrackingState() -> getTrackingState
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.google.ar.core.AugmentedFace$RegionType -> com.google.ar.core.AugmentedFace$RegionType:
    com.google.ar.core.AugmentedFace$RegionType NOSE_TIP -> NOSE_TIP
    com.google.ar.core.AugmentedFace$RegionType FOREHEAD_LEFT -> FOREHEAD_LEFT
    com.google.ar.core.AugmentedFace$RegionType FOREHEAD_RIGHT -> FOREHEAD_RIGHT
    int nativeCode -> nativeCode
    com.google.ar.core.AugmentedFace$RegionType[] $VALUES -> $VALUES
    com.google.ar.core.AugmentedFace$RegionType[] values() -> values
    com.google.ar.core.AugmentedFace$RegionType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    void <clinit>() -> <clinit>
com.google.ar.core.AugmentedImage -> com.google.ar.core.AugmentedImage:
    void <init>(long,com.google.ar.core.Session) -> <init>
    com.google.ar.core.Pose getCenterPose() -> getCenterPose
    float getExtentX() -> getExtentX
    float getExtentZ() -> getExtentZ
    int getIndex() -> getIndex
    java.lang.String getName() -> getName
    com.google.ar.core.AugmentedImage$TrackingMethod getTrackingMethod() -> getTrackingMethod
    com.google.ar.core.Pose nativeGetCenterPose(long,long) -> nativeGetCenterPose
    float nativeGetExtentX(long,long) -> nativeGetExtentX
    float nativeGetExtentZ(long,long) -> nativeGetExtentZ
    int nativeGetIndex(long,long) -> nativeGetIndex
    java.lang.String nativeGetName(long,long) -> nativeGetName
    int nativeGetTrackingMethod(long,long) -> nativeGetTrackingMethod
    java.util.Collection getAnchors() -> getAnchors
    com.google.ar.core.Anchor createAnchor(com.google.ar.core.Pose) -> createAnchor
    com.google.ar.core.TrackingState getTrackingState() -> getTrackingState
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.google.ar.core.AugmentedImage$TrackingMethod -> com.google.ar.core.AugmentedImage$TrackingMethod:
    com.google.ar.core.AugmentedImage$TrackingMethod NOT_TRACKING -> NOT_TRACKING
    com.google.ar.core.AugmentedImage$TrackingMethod FULL_TRACKING -> FULL_TRACKING
    com.google.ar.core.AugmentedImage$TrackingMethod LAST_KNOWN_POSE -> LAST_KNOWN_POSE
    int nativeCode -> nativeCode
    com.google.ar.core.AugmentedImage$TrackingMethod[] $VALUES -> $VALUES
    com.google.ar.core.AugmentedImage$TrackingMethod[] values() -> values
    com.google.ar.core.AugmentedImage$TrackingMethod valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    com.google.ar.core.AugmentedImage$TrackingMethod forNumber(int) -> forNumber
    void <clinit>() -> <clinit>
com.google.ar.core.AugmentedImageDatabase -> com.google.ar.core.AugmentedImageDatabase:
    com.google.ar.core.Session session -> session
    long nativeHandle -> nativeHandle
    com.google.ar.core.AugmentedImageDatabase deserialize(com.google.ar.core.Session,java.io.InputStream) -> deserialize
    void <init>(com.google.ar.core.Session) -> <init>
    void <init>(com.google.ar.core.Session,long) -> <init>
    int addImage(java.lang.String,android.graphics.Bitmap) -> addImage
    int addImage(java.lang.String,android.graphics.Bitmap,float) -> addImage
    int getNumImages() -> getNumImages
    void serialize(java.io.OutputStream) -> serialize
    void finalize() -> finalize
    java.nio.ByteBuffer convertBitmapToGrayscaleDirectBuffer(android.graphics.Bitmap) -> convertBitmapToGrayscaleDirectBuffer
    java.nio.ByteBuffer loadDirectByteBuffer(java.io.InputStream) -> loadDirectByteBuffer
    long nativeCreate(long) -> nativeCreate
    long nativeDeserialize(long,java.nio.ByteBuffer) -> nativeDeserialize
    int nativeAddImage(long,long,java.lang.String,java.nio.ByteBuffer,int,int,int) -> nativeAddImage
    int nativeAddImageWithPhysicalSize(long,long,java.lang.String,java.nio.ByteBuffer,int,int,int,float) -> nativeAddImageWithPhysicalSize
    java.nio.ByteBuffer nativeSerialize(long,long) -> nativeSerialize
    int nativeGetNumImages(long,long) -> nativeGetNumImages
    void nativeReleaseDatabase(long) -> nativeReleaseDatabase
com.google.ar.core.Camera -> com.google.ar.core.Camera:
    java.lang.String TAG -> TAG
    com.google.ar.core.Session session -> session
    long nativeHandle -> nativeHandle
    void <init>(com.google.ar.core.Session,com.google.ar.core.Frame) -> <init>
    void <init>() -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void finalize() -> finalize
    com.google.ar.core.TrackingState getTrackingState() -> getTrackingState
    com.google.ar.core.TrackingFailureReason getTrackingFailureReason() -> getTrackingFailureReason
    com.google.ar.core.Pose getPose() -> getPose
    com.google.ar.core.Pose getDisplayOrientedPose() -> getDisplayOrientedPose
    void getViewMatrix(float[],int) -> getViewMatrix
    void getProjectionMatrix(float[],int,float,float) -> getProjectionMatrix
    com.google.ar.core.CameraIntrinsics getImageIntrinsics() -> getImageIntrinsics
    com.google.ar.core.CameraIntrinsics getTextureIntrinsics() -> getTextureIntrinsics
    long nativeAcquireCamera(long,long) -> nativeAcquireCamera
    void nativeReleaseCamera(long) -> nativeReleaseCamera
    int nativeGetTrackingState(long,long) -> nativeGetTrackingState
    int nativeGetTrackingFailureReason(long,long) -> nativeGetTrackingFailureReason
    com.google.ar.core.Pose nativeGetPose(long,long) -> nativeGetPose
    com.google.ar.core.Pose nativeDisplayOrientedPose(long,long) -> nativeDisplayOrientedPose
    void nativeGetViewMatrix(long,long,float[],int) -> nativeGetViewMatrix
    void nativeGetProjectionMatrix(long,long,float[],int,float,float) -> nativeGetProjectionMatrix
    long nativeCreateCameraIntrinsics(long) -> nativeCreateCameraIntrinsics
    void nativeGetImageIntrinsics(long,long,long) -> nativeGetImageIntrinsics
    void nativeGetTextureIntrinsics(long,long,long) -> nativeGetTextureIntrinsics
com.google.ar.core.CameraConfig -> com.google.ar.core.CameraConfig:
    com.google.ar.core.Session session -> session
    long nativeHandle -> nativeHandle
    void <init>(com.google.ar.core.Session,long) -> <init>
    void <init>() -> <init>
    void finalize() -> finalize
    android.util.Size getImageSize() -> getImageSize
    android.util.Size getTextureSize() -> getTextureSize
    java.lang.String getCameraId() -> getCameraId
    com.google.ar.core.CameraConfig$FacingDirection getFacingDirection() -> getFacingDirection
    void nativeDestroyCameraConfig(long) -> nativeDestroyCameraConfig
    void nativeGetImageDimensions(long,long,int[]) -> nativeGetImageDimensions
    void nativeGetTextureDimensions(long,long,int[]) -> nativeGetTextureDimensions
    java.lang.String nativeGetCameraId(long,long) -> nativeGetCameraId
    int nativeGetFacingDirection(long,long) -> nativeGetFacingDirection
com.google.ar.core.CameraConfig$FacingDirection -> com.google.ar.core.CameraConfig$FacingDirection:
    com.google.ar.core.CameraConfig$FacingDirection BACK -> BACK
    com.google.ar.core.CameraConfig$FacingDirection FRONT -> FRONT
    int nativeCode -> nativeCode
    com.google.ar.core.CameraConfig$FacingDirection[] $VALUES -> $VALUES
    com.google.ar.core.CameraConfig$FacingDirection[] values() -> values
    com.google.ar.core.CameraConfig$FacingDirection valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    com.google.ar.core.CameraConfig$FacingDirection forNumber(int) -> forNumber
    void <clinit>() -> <clinit>
com.google.ar.core.CameraIntrinsics -> com.google.ar.core.CameraIntrinsics:
    com.google.ar.core.Session session -> session
    long nativeHandle -> nativeHandle
    void <init>(long,com.google.ar.core.Session) -> <init>
    void <init>() -> <init>
    void finalize() -> finalize
    void getFocalLength(float[],int) -> getFocalLength
    float[] getFocalLength() -> getFocalLength
    void getPrincipalPoint(float[],int) -> getPrincipalPoint
    float[] getPrincipalPoint() -> getPrincipalPoint
    void getImageDimensions(int[],int) -> getImageDimensions
    int[] getImageDimensions() -> getImageDimensions
    long nativeCreateIntrinsics(long,float,float,float,float,int,int) -> nativeCreateIntrinsics
    void nativeGetFocalLength(long,long,float[],int) -> nativeGetFocalLength
    void nativeGetPrincipalPoint(long,long,float[],int) -> nativeGetPrincipalPoint
    void nativeGetImageDimensions(long,long,int[],int) -> nativeGetImageDimensions
    void nativeDestroyCameraIntrinsics(long) -> nativeDestroyCameraIntrinsics
com.google.ar.core.Config -> com.google.ar.core.Config:
    java.lang.String TAG -> TAG
    com.google.ar.core.Session session -> session
    long nativeHandle -> nativeHandle
    int AR_CLOUD_ANCHOR_DEBUG_MODE_DISABLED -> AR_CLOUD_ANCHOR_DEBUG_MODE_DISABLED
    int AR_CLOUD_ANCHOR_DEBUG_MODE_ENABLED -> AR_CLOUD_ANCHOR_DEBUG_MODE_ENABLED
    void <init>(com.google.ar.core.Session) -> <init>
    void <init>(com.google.ar.core.Session,long) -> <init>
    void <init>() -> <init>
    com.google.ar.core.Config$LightEstimationMode getLightEstimationMode() -> getLightEstimationMode
    com.google.ar.core.Config setLightEstimationMode(com.google.ar.core.Config$LightEstimationMode) -> setLightEstimationMode
    com.google.ar.core.Config$PlaneFindingMode getPlaneFindingMode() -> getPlaneFindingMode
    com.google.ar.core.Config setPlaneFindingMode(com.google.ar.core.Config$PlaneFindingMode) -> setPlaneFindingMode
    com.google.ar.core.Config$UpdateMode getUpdateMode() -> getUpdateMode
    com.google.ar.core.Config setUpdateMode(com.google.ar.core.Config$UpdateMode) -> setUpdateMode
    com.google.ar.core.Config setCloudAnchorMode(com.google.ar.core.Config$CloudAnchorMode) -> setCloudAnchorMode
    com.google.ar.core.Config$CloudAnchorMode getCloudAnchorMode() -> getCloudAnchorMode
    com.google.ar.core.Config setAugmentedImageDatabase(com.google.ar.core.AugmentedImageDatabase) -> setAugmentedImageDatabase
    com.google.ar.core.AugmentedImageDatabase getAugmentedImageDatabase() -> getAugmentedImageDatabase
    com.google.ar.core.Config$AugmentedFaceMode getAugmentedFaceMode() -> getAugmentedFaceMode
    com.google.ar.core.Config setAugmentedFaceMode(com.google.ar.core.Config$AugmentedFaceMode) -> setAugmentedFaceMode
    com.google.ar.core.Config$FocusMode getFocusMode() -> getFocusMode
    com.google.ar.core.Config setFocusMode(com.google.ar.core.Config$FocusMode) -> setFocusMode
    void finalize() -> finalize
    long nativeCreate(long) -> nativeCreate
    void nativeDestroy(long) -> nativeDestroy
    int nativeGetLightEstimationMode(long,long) -> nativeGetLightEstimationMode
    void nativeSetLightEstimationMode(long,long,int) -> nativeSetLightEstimationMode
    int nativeGetPlaneFindingMode(long,long) -> nativeGetPlaneFindingMode
    void nativeSetPlaneFindingMode(long,long,int) -> nativeSetPlaneFindingMode
    int nativeGetUpdateMode(long,long) -> nativeGetUpdateMode
    void nativeSetUpdateMode(long,long,int) -> nativeSetUpdateMode
    void nativeSetCloudAnchorMode(long,long,int) -> nativeSetCloudAnchorMode
    int nativeGetCloudAnchorMode(long,long) -> nativeGetCloudAnchorMode
    void nativeSetAugmentedImageDatabase(long,long,long) -> nativeSetAugmentedImageDatabase
    void nativeUnsetAugmentedImageDatabase(long,long) -> nativeUnsetAugmentedImageDatabase
    long nativeGetAugmentedImageDatabase(long,long) -> nativeGetAugmentedImageDatabase
    int nativeGetAugmentedFaceMode(long,long) -> nativeGetAugmentedFaceMode
    void nativeSetAugmentedFaceMode(long,long,int) -> nativeSetAugmentedFaceMode
    int nativeGetFocusMode(long,long) -> nativeGetFocusMode
    void nativeSetFocusMode(long,long,int) -> nativeSetFocusMode
com.google.ar.core.Config$AugmentedFaceMode -> com.google.ar.core.Config$AugmentedFaceMode:
    com.google.ar.core.Config$AugmentedFaceMode DISABLED -> DISABLED
    com.google.ar.core.Config$AugmentedFaceMode MESH3D -> MESH3D
    int nativeCode -> nativeCode
    com.google.ar.core.Config$AugmentedFaceMode[] $VALUES -> $VALUES
    com.google.ar.core.Config$AugmentedFaceMode[] values() -> values
    com.google.ar.core.Config$AugmentedFaceMode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    com.google.ar.core.Config$AugmentedFaceMode forNumber(int) -> forNumber
    void <clinit>() -> <clinit>
com.google.ar.core.Config$CloudAnchorMode -> com.google.ar.core.Config$CloudAnchorMode:
    com.google.ar.core.Config$CloudAnchorMode DISABLED -> DISABLED
    com.google.ar.core.Config$CloudAnchorMode ENABLED -> ENABLED
    int nativeCode -> nativeCode
    com.google.ar.core.Config$CloudAnchorMode[] $VALUES -> $VALUES
    com.google.ar.core.Config$CloudAnchorMode[] values() -> values
    com.google.ar.core.Config$CloudAnchorMode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    com.google.ar.core.Config$CloudAnchorMode forNumber(int) -> forNumber
    void <clinit>() -> <clinit>
com.google.ar.core.Config$FocusMode -> com.google.ar.core.Config$FocusMode:
    com.google.ar.core.Config$FocusMode FIXED -> FIXED
    com.google.ar.core.Config$FocusMode AUTO -> AUTO
    int nativeCode -> nativeCode
    com.google.ar.core.Config$FocusMode[] $VALUES -> $VALUES
    com.google.ar.core.Config$FocusMode[] values() -> values
    com.google.ar.core.Config$FocusMode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    com.google.ar.core.Config$FocusMode forNumber(int) -> forNumber
    void <clinit>() -> <clinit>
com.google.ar.core.Config$LightEstimationMode -> com.google.ar.core.Config$LightEstimationMode:
    com.google.ar.core.Config$LightEstimationMode DISABLED -> DISABLED
    com.google.ar.core.Config$LightEstimationMode AMBIENT_INTENSITY -> AMBIENT_INTENSITY
    com.google.ar.core.Config$LightEstimationMode ENVIRONMENTAL_HDR -> ENVIRONMENTAL_HDR
    int nativeCode -> nativeCode
    com.google.ar.core.Config$LightEstimationMode[] $VALUES -> $VALUES
    com.google.ar.core.Config$LightEstimationMode[] values() -> values
    com.google.ar.core.Config$LightEstimationMode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    com.google.ar.core.Config$LightEstimationMode forNumber(int) -> forNumber
    void <clinit>() -> <clinit>
com.google.ar.core.Config$PlaneFindingMode -> com.google.ar.core.Config$PlaneFindingMode:
    com.google.ar.core.Config$PlaneFindingMode DISABLED -> DISABLED
    com.google.ar.core.Config$PlaneFindingMode HORIZONTAL -> HORIZONTAL
    com.google.ar.core.Config$PlaneFindingMode VERTICAL -> VERTICAL
    com.google.ar.core.Config$PlaneFindingMode HORIZONTAL_AND_VERTICAL -> HORIZONTAL_AND_VERTICAL
    int nativeCode -> nativeCode
    com.google.ar.core.Config$PlaneFindingMode[] $VALUES -> $VALUES
    com.google.ar.core.Config$PlaneFindingMode[] values() -> values
    com.google.ar.core.Config$PlaneFindingMode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    com.google.ar.core.Config$PlaneFindingMode forNumber(int) -> forNumber
    void <clinit>() -> <clinit>
com.google.ar.core.Config$UpdateMode -> com.google.ar.core.Config$UpdateMode:
    com.google.ar.core.Config$UpdateMode BLOCKING -> BLOCKING
    com.google.ar.core.Config$UpdateMode LATEST_CAMERA_IMAGE -> LATEST_CAMERA_IMAGE
    int nativeCode -> nativeCode
    com.google.ar.core.Config$UpdateMode[] $VALUES -> $VALUES
    com.google.ar.core.Config$UpdateMode[] values() -> values
    com.google.ar.core.Config$UpdateMode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    com.google.ar.core.Config$UpdateMode forNumber(int) -> forNumber
    void <clinit>() -> <clinit>
com.google.ar.core.Coordinates2d -> com.google.ar.core.Coordinates2d:
    com.google.ar.core.Coordinates2d TEXTURE_TEXELS -> TEXTURE_TEXELS
    com.google.ar.core.Coordinates2d TEXTURE_NORMALIZED -> TEXTURE_NORMALIZED
    com.google.ar.core.Coordinates2d IMAGE_PIXELS -> IMAGE_PIXELS
    com.google.ar.core.Coordinates2d IMAGE_NORMALIZED -> IMAGE_NORMALIZED
    com.google.ar.core.Coordinates2d OPENGL_NORMALIZED_DEVICE_COORDINATES -> OPENGL_NORMALIZED_DEVICE_COORDINATES
    com.google.ar.core.Coordinates2d VIEW -> VIEW
    com.google.ar.core.Coordinates2d VIEW_NORMALIZED -> VIEW_NORMALIZED
    int nativeCode -> nativeCode
    com.google.ar.core.Coordinates2d[] $VALUES -> $VALUES
    com.google.ar.core.Coordinates2d[] values() -> values
    com.google.ar.core.Coordinates2d valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    com.google.ar.core.Coordinates2d forNumber(int) -> forNumber
    void <clinit>() -> <clinit>
com.google.ar.core.Frame -> com.google.ar.core.Frame:
    java.lang.String TAG -> TAG
    java.util.ArrayList ANCHORS_EMPTY_LIST -> ANCHORS_EMPTY_LIST
    java.util.ArrayList PLANES_EMPTY_LIST -> PLANES_EMPTY_LIST
    com.google.ar.core.Session session -> session
    com.google.ar.core.LightEstimate lightEstimate -> lightEstimate
    long nativeHandle -> nativeHandle
    void <init>(com.google.ar.core.Session) -> <init>
    void <init>(com.google.ar.core.Session,long) -> <init>
    void <init>() -> <init>
    void finalize() -> finalize
    com.google.ar.core.Camera getCamera() -> getCamera
    boolean hasDisplayGeometryChanged() -> hasDisplayGeometryChanged
    void transformDisplayUvCoords(java.nio.FloatBuffer,java.nio.FloatBuffer) -> transformDisplayUvCoords
    long getTimestamp() -> getTimestamp
    long getAndroidCameraTimestamp() -> getAndroidCameraTimestamp
    com.google.ar.core.Pose getAndroidSensorPose() -> getAndroidSensorPose
    com.google.ar.core.LightEstimate getLightEstimate() -> getLightEstimate
    com.google.ar.core.ImageMetadata getImageMetadata() -> getImageMetadata
    boolean isSharedCameraUsed() -> isSharedCameraUsed
    com.google.ar.core.PointCloud acquirePointCloud() -> acquirePointCloud
    java.util.List hitTest(float,float) -> hitTest
    java.util.List hitTest(android.view.MotionEvent) -> hitTest
    java.util.List hitTest(float[],int,float[],int) -> hitTest
    java.util.List convertNativeHitResultsToList(long[]) -> convertNativeHitResultsToList
    java.util.Collection getUpdatedAnchors() -> getUpdatedAnchors
    java.util.Collection getUpdatedTrackables(java.lang.Class) -> getUpdatedTrackables
    android.media.Image acquireCameraImage() -> acquireCameraImage
    void transformCoordinates2d(com.google.ar.core.Coordinates2d,java.nio.FloatBuffer,com.google.ar.core.Coordinates2d,java.nio.FloatBuffer) -> transformCoordinates2d
    void transformCoordinates2d(com.google.ar.core.Coordinates2d,float[],com.google.ar.core.Coordinates2d,float[]) -> transformCoordinates2d
    long nativeCreateFrame(long) -> nativeCreateFrame
    void nativeDestroyFrame(long) -> nativeDestroyFrame
    boolean nativeHasDisplayGeometryChanged(long,long) -> nativeHasDisplayGeometryChanged
    void nativeTransformDisplayUvCoords(long,long,java.nio.FloatBuffer,java.nio.FloatBuffer) -> nativeTransformDisplayUvCoords
    long nativeGetTimestamp(long,long) -> nativeGetTimestamp
    long nativeGetAndroidCameraTimestamp(long,long) -> nativeGetAndroidCameraTimestamp
    com.google.ar.core.Pose nativeGetAndroidSensorPose(long,long) -> nativeGetAndroidSensorPose
    long[] nativeHitTest(long,long,float,float) -> nativeHitTest
    long[] nativeHitTestRay(long,long,float[],int,float[],int) -> nativeHitTestRay
    void nativeGetLightEstimate(long,long,long) -> nativeGetLightEstimate
    long nativeAcquireImageMetadata(long,long) -> nativeAcquireImageMetadata
    long nativeAcquirePointCloud(long,long) -> nativeAcquirePointCloud
    long[] nativeAcquireUpdatedAnchors(long,long) -> nativeAcquireUpdatedAnchors
    long[] nativeAcquireUpdatedTrackables(long,long,int) -> nativeAcquireUpdatedTrackables
    long nativeAcquireCameraImage(long,long) -> nativeAcquireCameraImage
    void nativeTransformCoordinates2dFloatArrayOrBuffer(long,long,int,java.lang.Object,int,java.lang.Object) -> nativeTransformCoordinates2dFloatArrayOrBuffer
    void <clinit>() -> <clinit>
com.google.ar.core.HitResult -> com.google.ar.core.HitResult:
    com.google.ar.core.Session session -> session
    long nativeHandle -> nativeHandle
    void <init>(long,com.google.ar.core.Session) -> <init>
    void <init>() -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void finalize() -> finalize
    com.google.ar.core.Pose getHitPose() -> getHitPose
    float getDistance() -> getDistance
    com.google.ar.core.Trackable getTrackable() -> getTrackable
    com.google.ar.core.Anchor createAnchor() -> createAnchor
    void nativeDestroyHitResult(long) -> nativeDestroyHitResult
    com.google.ar.core.Pose nativeGetPose(long,long) -> nativeGetPose
    float nativeGetDistance(long,long) -> nativeGetDistance
    long nativeAcquireTrackable(long,long) -> nativeAcquireTrackable
    long nativeCreateAnchor(long,long) -> nativeCreateAnchor
com.google.ar.core.ImageFormat -> com.google.ar.core.ImageFormat:
    int YUV_420_888 -> YUV_420_888
    int RGBA_FP16 -> RGBA_FP16
    void <init>() -> <init>
com.google.ar.core.ImageMetadata -> com.google.ar.core.ImageMetadata:
    int SECTION_COLOR_CORRECTION -> SECTION_COLOR_CORRECTION
    int SECTION_CONTROL -> SECTION_CONTROL
    int SECTION_EDGE -> SECTION_EDGE
    int SECTION_FLASH -> SECTION_FLASH
    int SECTION_FLASH_INFO -> SECTION_FLASH_INFO
    int SECTION_HOT_PIXEL -> SECTION_HOT_PIXEL
    int SECTION_JPEG -> SECTION_JPEG
    int SECTION_LENS -> SECTION_LENS
    int SECTION_LENS_INFO -> SECTION_LENS_INFO
    int SECTION_NOISE_REDUCTION -> SECTION_NOISE_REDUCTION
    int SECTION_REQUEST -> SECTION_REQUEST
    int SECTION_SCALER -> SECTION_SCALER
    int SECTION_SENSOR -> SECTION_SENSOR
    int SECTION_SENSOR_INFO -> SECTION_SENSOR_INFO
    int SECTION_SHADING -> SECTION_SHADING
    int SECTION_STATISTICS -> SECTION_STATISTICS
    int SECTION_STATISTICS_INFO -> SECTION_STATISTICS_INFO
    int SECTION_TONEMAP -> SECTION_TONEMAP
    int SECTION_INFO -> SECTION_INFO
    int SECTION_BLACK_LEVEL -> SECTION_BLACK_LEVEL
    int SECTION_SYNC -> SECTION_SYNC
    int SECTION_DEPTH -> SECTION_DEPTH
    int COLOR_CORRECTION_START -> COLOR_CORRECTION_START
    int CONTROL_START -> CONTROL_START
    int EDGE_START -> EDGE_START
    int FLASH_START -> FLASH_START
    int FLASH_INFO_START -> FLASH_INFO_START
    int HOT_PIXEL_START -> HOT_PIXEL_START
    int JPEG_START -> JPEG_START
    int LENS_START -> LENS_START
    int LENS_INFO_START -> LENS_INFO_START
    int NOISE_REDUCTION_START -> NOISE_REDUCTION_START
    int REQUEST_START -> REQUEST_START
    int SCALER_START -> SCALER_START
    int SENSOR_START -> SENSOR_START
    int SENSOR_INFO_START -> SENSOR_INFO_START
    int SHADING_START -> SHADING_START
    int STATISTICS_START -> STATISTICS_START
    int STATISTICS_INFO_START -> STATISTICS_INFO_START
    int TONEMAP_START -> TONEMAP_START
    int INFO_START -> INFO_START
    int BLACK_LEVEL_START -> BLACK_LEVEL_START
    int SYNC_START -> SYNC_START
    int DEPTH_START -> DEPTH_START
    int COLOR_CORRECTION_MODE -> COLOR_CORRECTION_MODE
    int COLOR_CORRECTION_TRANSFORM -> COLOR_CORRECTION_TRANSFORM
    int COLOR_CORRECTION_GAINS -> COLOR_CORRECTION_GAINS
    int COLOR_CORRECTION_ABERRATION_MODE -> COLOR_CORRECTION_ABERRATION_MODE
    int CONTROL_AE_ANTIBANDING_MODE -> CONTROL_AE_ANTIBANDING_MODE
    int CONTROL_AE_EXPOSURE_COMPENSATION -> CONTROL_AE_EXPOSURE_COMPENSATION
    int CONTROL_AE_LOCK -> CONTROL_AE_LOCK
    int CONTROL_AE_MODE -> CONTROL_AE_MODE
    int CONTROL_AE_REGIONS -> CONTROL_AE_REGIONS
    int CONTROL_AE_TARGET_FPS_RANGE -> CONTROL_AE_TARGET_FPS_RANGE
    int CONTROL_AE_PRECAPTURE_TRIGGER -> CONTROL_AE_PRECAPTURE_TRIGGER
    int CONTROL_AF_MODE -> CONTROL_AF_MODE
    int CONTROL_AF_REGIONS -> CONTROL_AF_REGIONS
    int CONTROL_AF_TRIGGER -> CONTROL_AF_TRIGGER
    int CONTROL_AWB_LOCK -> CONTROL_AWB_LOCK
    int CONTROL_AWB_MODE -> CONTROL_AWB_MODE
    int CONTROL_AWB_REGIONS -> CONTROL_AWB_REGIONS
    int CONTROL_CAPTURE_INTENT -> CONTROL_CAPTURE_INTENT
    int CONTROL_EFFECT_MODE -> CONTROL_EFFECT_MODE
    int CONTROL_MODE -> CONTROL_MODE
    int CONTROL_SCENE_MODE -> CONTROL_SCENE_MODE
    int CONTROL_VIDEO_STABILIZATION_MODE -> CONTROL_VIDEO_STABILIZATION_MODE
    int CONTROL_AE_STATE -> CONTROL_AE_STATE
    int CONTROL_AF_STATE -> CONTROL_AF_STATE
    int CONTROL_AWB_STATE -> CONTROL_AWB_STATE
    int CONTROL_POST_RAW_SENSITIVITY_BOOST -> CONTROL_POST_RAW_SENSITIVITY_BOOST
    int EDGE_MODE -> EDGE_MODE
    int FLASH_MODE -> FLASH_MODE
    int FLASH_STATE -> FLASH_STATE
    int HOT_PIXEL_MODE -> HOT_PIXEL_MODE
    int JPEG_GPS_COORDINATES -> JPEG_GPS_COORDINATES
    int JPEG_GPS_PROCESSING_METHOD -> JPEG_GPS_PROCESSING_METHOD
    int JPEG_GPS_TIMESTAMP -> JPEG_GPS_TIMESTAMP
    int JPEG_ORIENTATION -> JPEG_ORIENTATION
    int JPEG_QUALITY -> JPEG_QUALITY
    int JPEG_THUMBNAIL_QUALITY -> JPEG_THUMBNAIL_QUALITY
    int JPEG_THUMBNAIL_SIZE -> JPEG_THUMBNAIL_SIZE
    int LENS_APERTURE -> LENS_APERTURE
    int LENS_FILTER_DENSITY -> LENS_FILTER_DENSITY
    int LENS_FOCAL_LENGTH -> LENS_FOCAL_LENGTH
    int LENS_FOCUS_DISTANCE -> LENS_FOCUS_DISTANCE
    int LENS_OPTICAL_STABILIZATION_MODE -> LENS_OPTICAL_STABILIZATION_MODE
    int LENS_POSE_ROTATION -> LENS_POSE_ROTATION
    int LENS_POSE_TRANSLATION -> LENS_POSE_TRANSLATION
    int LENS_FOCUS_RANGE -> LENS_FOCUS_RANGE
    int LENS_STATE -> LENS_STATE
    int LENS_INTRINSIC_CALIBRATION -> LENS_INTRINSIC_CALIBRATION
    int LENS_RADIAL_DISTORTION -> LENS_RADIAL_DISTORTION
    int NOISE_REDUCTION_MODE -> NOISE_REDUCTION_MODE
    int REQUEST_PIPELINE_DEPTH -> REQUEST_PIPELINE_DEPTH
    int SCALER_CROP_REGION -> SCALER_CROP_REGION
    int SENSOR_EXPOSURE_TIME -> SENSOR_EXPOSURE_TIME
    int SENSOR_FRAME_DURATION -> SENSOR_FRAME_DURATION
    int SENSOR_SENSITIVITY -> SENSOR_SENSITIVITY
    int SENSOR_TIMESTAMP -> SENSOR_TIMESTAMP
    int SENSOR_NEUTRAL_COLOR_POINT -> SENSOR_NEUTRAL_COLOR_POINT
    int SENSOR_NOISE_PROFILE -> SENSOR_NOISE_PROFILE
    int SENSOR_GREEN_SPLIT -> SENSOR_GREEN_SPLIT
    int SENSOR_TEST_PATTERN_DATA -> SENSOR_TEST_PATTERN_DATA
    int SENSOR_TEST_PATTERN_MODE -> SENSOR_TEST_PATTERN_MODE
    int SENSOR_ROLLING_SHUTTER_SKEW -> SENSOR_ROLLING_SHUTTER_SKEW
    int SENSOR_DYNAMIC_BLACK_LEVEL -> SENSOR_DYNAMIC_BLACK_LEVEL
    int SENSOR_DYNAMIC_WHITE_LEVEL -> SENSOR_DYNAMIC_WHITE_LEVEL
    int SHADING_MODE -> SHADING_MODE
    int STATISTICS_FACE_DETECT_MODE -> STATISTICS_FACE_DETECT_MODE
    int STATISTICS_HOT_PIXEL_MAP_MODE -> STATISTICS_HOT_PIXEL_MAP_MODE
    int STATISTICS_FACE_IDS -> STATISTICS_FACE_IDS
    int STATISTICS_FACE_LANDMARKS -> STATISTICS_FACE_LANDMARKS
    int STATISTICS_FACE_RECTANGLES -> STATISTICS_FACE_RECTANGLES
    int STATISTICS_FACE_SCORES -> STATISTICS_FACE_SCORES
    int STATISTICS_LENS_SHADING_MAP -> STATISTICS_LENS_SHADING_MAP
    int STATISTICS_SCENE_FLICKER -> STATISTICS_SCENE_FLICKER
    int STATISTICS_HOT_PIXEL_MAP -> STATISTICS_HOT_PIXEL_MAP
    int STATISTICS_LENS_SHADING_MAP_MODE -> STATISTICS_LENS_SHADING_MAP_MODE
    int TONEMAP_CURVE_BLUE -> TONEMAP_CURVE_BLUE
    int TONEMAP_CURVE_GREEN -> TONEMAP_CURVE_GREEN
    int TONEMAP_CURVE_RED -> TONEMAP_CURVE_RED
    int TONEMAP_MODE -> TONEMAP_MODE
    int TONEMAP_GAMMA -> TONEMAP_GAMMA
    int TONEMAP_PRESET_CURVE -> TONEMAP_PRESET_CURVE
    int BLACK_LEVEL_LOCK -> BLACK_LEVEL_LOCK
    int SYNC_FRAME_NUMBER -> SYNC_FRAME_NUMBER
    java.lang.String TAG -> TAG
    int TYPE_BYTE -> TYPE_BYTE
    int TYPE_INT -> TYPE_INT
    int TYPE_FLOAT -> TYPE_FLOAT
    int TYPE_LONG -> TYPE_LONG
    int TYPE_DOUBLE -> TYPE_DOUBLE
    int TYPE_RATIONAL -> TYPE_RATIONAL
    com.google.ar.core.Session session -> session
    long nativeHandle -> nativeHandle
    com.google.ar.core.ImageMetadata$a sketchEntry -> sketchEntry
    void <init>(long,com.google.ar.core.Session) -> <init>
    void <init>() -> <init>
    void finalize() -> finalize
    long[] getKeys() -> getKeys
    byte getByte(int) -> getByte
    int getInt(int) -> getInt
    float getFloat(int) -> getFloat
    long getLong(int) -> getLong
    double getDouble(int) -> getDouble
    android.util.Rational getRational(int) -> getRational
    byte[] getByteArray(int) -> getByteArray
    int[] getIntArray(int) -> getIntArray
    float[] getFloatArray(int) -> getFloatArray
    long[] getLongArray(int) -> getLongArray
    double[] getDoubleArray(int) -> getDoubleArray
    android.util.Rational[] getRationalArray(int) -> getRationalArray
    void getMetdataEntry(int,com.google.ar.core.ImageMetadata$a) -> getMetdataEntry
    void nativeLoadSymbols() -> nativeLoadSymbols
    long[] nativeGetAllKeys(long,long) -> nativeGetAllKeys
    long nativeGetMetadataEntry(long,long,int) -> nativeGetMetadataEntry
    void nativeReleaseImageMetadata(long) -> nativeReleaseImageMetadata
    void nativeDestroyMetadataEntry(long,long) -> nativeDestroyMetadataEntry
    int nativeGetMetadataEntryValueType(long,long) -> nativeGetMetadataEntryValueType
    int nativeGetMetadataEntryValueCount(long,long) -> nativeGetMetadataEntryValueCount
    byte nativeGetByteFromMetadataEntry(long,long) -> nativeGetByteFromMetadataEntry
    int nativeGetIntFromMetadataEntry(long,long) -> nativeGetIntFromMetadataEntry
    float nativeGetFloatFromMetadataEntry(long,long) -> nativeGetFloatFromMetadataEntry
    long nativeGetLongFromMetadataEntry(long,long) -> nativeGetLongFromMetadataEntry
    double nativeGetDoubleFromMetadataEntry(long,long) -> nativeGetDoubleFromMetadataEntry
    android.util.Rational nativeGetRationalFromMetadataEntry(long,long) -> nativeGetRationalFromMetadataEntry
    byte[] nativeGetByteArrayFromMetadataEntry(long,long) -> nativeGetByteArrayFromMetadataEntry
    int[] nativeGetIntArrayFromMetadataEntry(long,long) -> nativeGetIntArrayFromMetadataEntry
    float[] nativeGetFloatArrayFromMetadataEntry(long,long) -> nativeGetFloatArrayFromMetadataEntry
    long[] nativeGetLongArrayFromMetadataEntry(long,long) -> nativeGetLongArrayFromMetadataEntry
    double[] nativeGetDoubleArrayFromMetadataEntry(long,long) -> nativeGetDoubleArrayFromMetadataEntry
    android.util.Rational[] nativeGetRationalArrayFromMetadataEntry(long,long) -> nativeGetRationalArrayFromMetadataEntry
com.google.ar.core.ImageMetadata$a -> com.google.ar.core.ImageMetadata$a:
    long a -> a
    int b -> b
    int c -> c
    void <init>() -> <init>
com.google.ar.core.InstallActivity -> com.google.ar.core.InstallActivity:
    java.lang.String TAG -> TAG
    java.lang.String MESSAGE_TYPE_KEY -> MESSAGE_TYPE_KEY
    java.lang.String INSTALL_BEHAVIOR_KEY -> INSTALL_BEHAVIOR_KEY
    int BOX_SIZE_DP -> BOX_SIZE_DP
    int INSTALLING_TEXT_BOTTOM_MARGIN_DP -> INSTALLING_TEXT_BOTTOM_MARGIN_DP
    android.view.ContextThemeWrapper themeWrapper -> themeWrapper
    com.google.ar.core.ArCoreApk$UserMessageType messageType -> messageType
    com.google.ar.core.ArCoreApk$InstallBehavior installBehavior -> installBehavior
    com.google.ar.core.q lastEvent -> lastEvent
    boolean finished -> finished
    boolean installStarted -> installStarted
    boolean waitingForCompletion -> waitingForCompletion
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void showEducationDialog() -> showEducationDialog
    void showSpinner() -> showSpinner
    void animateToSpinner() -> animateToSpinner
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onResume() -> onResume
    void finish() -> finish
    void finishWithFailure(java.lang.Exception) -> finishWithFailure
    void onDestroy() -> onDestroy
    boolean isOptional() -> isOptional
    void startInstaller() -> startInstaller
    void closeInstaller() -> closeInstaller
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void access$000(com.google.ar.core.InstallActivity,java.lang.Exception) -> access$000
    void access$100(com.google.ar.core.InstallActivity) -> access$100
    void access$200(com.google.ar.core.InstallActivity) -> access$200
    void access$300(com.google.ar.core.InstallActivity) -> access$300
    com.google.ar.core.q access$402(com.google.ar.core.InstallActivity,com.google.ar.core.q) -> access$402
    boolean access$500(com.google.ar.core.InstallActivity) -> access$500
    void access$600(com.google.ar.core.InstallActivity) -> access$600
com.google.ar.core.LightEstimate -> com.google.ar.core.LightEstimate:
    com.google.ar.core.Session session -> session
    long nativeHandle -> nativeHandle
    void <init>(com.google.ar.core.Session) -> <init>
    void <init>() -> <init>
    void finalize() -> finalize
    com.google.ar.core.LightEstimate$State getState() -> getState
    float getPixelIntensity() -> getPixelIntensity
    void getColorCorrection(float[],int) -> getColorCorrection
    long getTimestamp() -> getTimestamp
    float[] getEnvironmentalHdrMainLightDirection() -> getEnvironmentalHdrMainLightDirection
    float[] getEnvironmentalHdrMainLightIntensity() -> getEnvironmentalHdrMainLightIntensity
    float[] getEnvironmentalHdrAmbientSphericalHarmonics() -> getEnvironmentalHdrAmbientSphericalHarmonics
    com.google.ar.core.ArImage[] acquireEnvironmentalHdrCubeMap() -> acquireEnvironmentalHdrCubeMap
    com.google.ar.core.ArImage[] convertNativeArImageCubemapToArray(long[]) -> convertNativeArImageCubemapToArray
    long nativeCreateLightEstimate(long) -> nativeCreateLightEstimate
    void nativeDestroyLightEstimate(long) -> nativeDestroyLightEstimate
    int nativeGetState(long,long) -> nativeGetState
    float nativeGetPixelIntensity(long,long) -> nativeGetPixelIntensity
    void nativeGetColorCorrection(long,long,float[],int) -> nativeGetColorCorrection
    long nativeGetTimestamp(long,long) -> nativeGetTimestamp
    void nativeGetEnvironmentalHdrMainLightDirection(long,long,float[]) -> nativeGetEnvironmentalHdrMainLightDirection
    void nativeGetEnvironmentalHdrMainLightIntensity(long,long,float[]) -> nativeGetEnvironmentalHdrMainLightIntensity
    void nativeGetEnvironmentalHdrAmbientSphericalHarmonics(long,long,float[]) -> nativeGetEnvironmentalHdrAmbientSphericalHarmonics
    long[] nativeAcquireEnvironmentalHdrCubeMap(long,long) -> nativeAcquireEnvironmentalHdrCubeMap
com.google.ar.core.LightEstimate$State -> com.google.ar.core.LightEstimate$State:
    com.google.ar.core.LightEstimate$State NOT_VALID -> NOT_VALID
    com.google.ar.core.LightEstimate$State VALID -> VALID
    int nativeCode -> nativeCode
    com.google.ar.core.LightEstimate$State[] $VALUES -> $VALUES
    com.google.ar.core.LightEstimate$State[] values() -> values
    com.google.ar.core.LightEstimate$State valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    com.google.ar.core.LightEstimate$State forNumber(int) -> forNumber
    void <clinit>() -> <clinit>
com.google.ar.core.Plane -> com.google.ar.core.Plane:
    void <init>(long,com.google.ar.core.Session) -> <init>
    void <init>() -> <init>
    com.google.ar.core.Plane$Type getType() -> getType
    com.google.ar.core.Plane getSubsumedBy() -> getSubsumedBy
    com.google.ar.core.Pose getCenterPose() -> getCenterPose
    float getExtentX() -> getExtentX
    float getExtentZ() -> getExtentZ
    java.nio.FloatBuffer getPolygon() -> getPolygon
    boolean isPoseInExtents(com.google.ar.core.Pose) -> isPoseInExtents
    boolean isPoseInPolygon(com.google.ar.core.Pose) -> isPoseInPolygon
    int nativeGetType(long,long) -> nativeGetType
    long nativeAcquireSubsumedBy(long,long) -> nativeAcquireSubsumedBy
    com.google.ar.core.Pose nativeGetCenterPose(long,long) -> nativeGetCenterPose
    float nativeGetExtentX(long,long) -> nativeGetExtentX
    float nativeGetExtentZ(long,long) -> nativeGetExtentZ
    float[] nativeGetPolygon(long,long) -> nativeGetPolygon
    boolean nativeIsPoseInExtents(long,long,com.google.ar.core.Pose) -> nativeIsPoseInExtents
    boolean nativeIsPoseInPolygon(long,long,com.google.ar.core.Pose) -> nativeIsPoseInPolygon
    java.util.Collection getAnchors() -> getAnchors
    com.google.ar.core.Anchor createAnchor(com.google.ar.core.Pose) -> createAnchor
    com.google.ar.core.TrackingState getTrackingState() -> getTrackingState
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.google.ar.core.Plane$Type -> com.google.ar.core.Plane$Type:
    com.google.ar.core.Plane$Type HORIZONTAL_UPWARD_FACING -> HORIZONTAL_UPWARD_FACING
    com.google.ar.core.Plane$Type HORIZONTAL_DOWNWARD_FACING -> HORIZONTAL_DOWNWARD_FACING
    com.google.ar.core.Plane$Type VERTICAL -> VERTICAL
    int nativeCode -> nativeCode
    com.google.ar.core.Plane$Type[] $VALUES -> $VALUES
    com.google.ar.core.Plane$Type[] values() -> values
    com.google.ar.core.Plane$Type valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    com.google.ar.core.Plane$Type forNumber(int) -> forNumber
    void <clinit>() -> <clinit>
com.google.ar.core.Point -> com.google.ar.core.Point:
    void <init>(long,com.google.ar.core.Session) -> <init>
    void <init>() -> <init>
    com.google.ar.core.Pose getPose() -> getPose
    com.google.ar.core.Point$OrientationMode getOrientationMode() -> getOrientationMode
    com.google.ar.core.Pose nativeGetPose(long,long) -> nativeGetPose
    int nativeGetOrientationMode(long,long) -> nativeGetOrientationMode
    java.util.Collection getAnchors() -> getAnchors
    com.google.ar.core.Anchor createAnchor(com.google.ar.core.Pose) -> createAnchor
    com.google.ar.core.TrackingState getTrackingState() -> getTrackingState
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.google.ar.core.Point$OrientationMode -> com.google.ar.core.Point$OrientationMode:
    com.google.ar.core.Point$OrientationMode INITIALIZED_TO_IDENTITY -> INITIALIZED_TO_IDENTITY
    com.google.ar.core.Point$OrientationMode ESTIMATED_SURFACE_NORMAL -> ESTIMATED_SURFACE_NORMAL
    int nativeCode -> nativeCode
    com.google.ar.core.Point$OrientationMode[] $VALUES -> $VALUES
    com.google.ar.core.Point$OrientationMode[] values() -> values
    com.google.ar.core.Point$OrientationMode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    com.google.ar.core.Point$OrientationMode fromNumber(int) -> fromNumber
    void <clinit>() -> <clinit>
com.google.ar.core.PointCloud -> com.google.ar.core.PointCloud:
    com.google.ar.core.Session session -> session
    long nativeHandle -> nativeHandle
    void <init>(com.google.ar.core.Session,long) -> <init>
    void <init>() -> <init>
    void release() -> release
    void finalize() -> finalize
    java.nio.FloatBuffer getPoints() -> getPoints
    java.nio.IntBuffer getIds() -> getIds
    long getTimestamp() -> getTimestamp
    void close() -> close
    java.nio.ByteBuffer nativeGetData(long,long) -> nativeGetData
    java.nio.ByteBuffer nativeGetIds(long,long) -> nativeGetIds
    long nativeGetTimestamp(long,long) -> nativeGetTimestamp
    void nativeReleasePointCloud(long) -> nativeReleasePointCloud
com.google.ar.core.Pose -> com.google.ar.core.Pose:
    com.google.ar.core.Pose IDENTITY -> IDENTITY
    com.google.ar.core.Quaternion quaternion -> quaternion
    float[] translation -> translation
    void <init>(float,float,float,float,float,float,float) -> <init>
    void <init>(float[],float[]) -> <init>
    void <init>(float[],com.google.ar.core.Quaternion) -> <init>
    com.google.ar.core.Pose makeTranslation(float,float,float) -> makeTranslation
    com.google.ar.core.Pose makeTranslation(float[]) -> makeTranslation
    com.google.ar.core.Pose makeRotation(float,float,float,float) -> makeRotation
    com.google.ar.core.Pose makeRotation(float[]) -> makeRotation
    com.google.ar.core.Pose compose(com.google.ar.core.Pose) -> compose
    com.google.ar.core.Pose makeInterpolated(com.google.ar.core.Pose,com.google.ar.core.Pose,float) -> makeInterpolated
    com.google.ar.core.Pose inverse() -> inverse
    com.google.ar.core.Pose extractRotation() -> extractRotation
    com.google.ar.core.Pose extractTranslation() -> extractTranslation
    void toMatrix(float[],int) -> toMatrix
    float tx() -> tx
    float ty() -> ty
    float tz() -> tz
    float qx() -> qx
    float qy() -> qy
    float qz() -> qz
    float qw() -> qw
    void getTranslation(float[],int) -> getTranslation
    float[] getTranslation() -> getTranslation
    void getRotationQuaternion(float[],int) -> getRotationQuaternion
    float[] getRotationQuaternion() -> getRotationQuaternion
    void rotateVector(float[],int,float[],int) -> rotateVector
    float[] rotateVector(float[]) -> rotateVector
    void transformPoint(float[],int,float[],int) -> transformPoint
    float[] transformPoint(float[]) -> transformPoint
    void getTransformedAxis(int,float,float[],int) -> getTransformedAxis
    float[] getTransformedAxis(int,float) -> getTransformedAxis
    float[] getXAxis() -> getXAxis
    float[] getYAxis() -> getYAxis
    float[] getZAxis() -> getZAxis
    java.lang.String toString() -> toString
    com.google.ar.core.Quaternion getQuaternion() -> getQuaternion
    void <clinit>() -> <clinit>
com.google.ar.core.Quaternion -> com.google.ar.core.Quaternion:
    com.google.ar.core.Quaternion a -> a
    float x -> x
    float y -> y
    float z -> z
    float w -> w
    void <init>() -> <init>
    void <init>(com.google.ar.core.Quaternion) -> <init>
    void <init>(float,float,float,float) -> <init>
    void a(float,float,float,float) -> a
    float a() -> a
    float b() -> b
    float c() -> c
    float d() -> d
    void a(float[],int) -> a
    com.google.ar.core.Quaternion e() -> e
    com.google.ar.core.Quaternion a(com.google.ar.core.Quaternion) -> a
    com.google.ar.core.Quaternion a(com.google.ar.core.Quaternion,com.google.ar.core.Quaternion,float) -> a
    void a(float[],int,int) -> a
    void a(com.google.ar.core.Quaternion,float[],int,float[],int) -> a
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.google.ar.core.R -> com.google.ar.core.R:
    void <init>() -> <init>
com.google.ar.core.R$id -> com.google.ar.core.R$id:
    int __arcore_cancelButton -> __arcore_cancelButton
    int __arcore_continueButton -> __arcore_continueButton
    int __arcore_messageText -> __arcore_messageText
    void <init>() -> <init>
com.google.ar.core.R$layout -> com.google.ar.core.R$layout:
    int __arcore_education -> __arcore_education
    void <init>() -> <init>
com.google.ar.core.R$raw -> com.google.ar.core.R$raw:
    int keep -> keep
    void <init>() -> <init>
com.google.ar.core.R$string -> com.google.ar.core.R$string:
    int __arcore_cancel -> __arcore_cancel
    int __arcore_continue -> __arcore_continue
    int __arcore_install_app -> __arcore_install_app
    int __arcore_install_feature -> __arcore_install_feature
    int __arcore_installing -> __arcore_installing
    void <init>() -> <init>
com.google.ar.core.Session -> com.google.ar.core.Session:
    java.lang.String TAG -> TAG
    long nativeWrapperHandle -> nativeWrapperHandle
    com.google.ar.core.i faceCache -> faceCache
    com.google.ar.core.SharedCamera sharedCamera -> sharedCamera
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,java.util.Set) -> <init>
    void <init>(long) -> <init>
    void <init>() -> <init>
    com.google.ar.core.Session createForSharedCamera(android.content.Context) -> createForSharedCamera
    com.google.ar.core.SharedCamera getSharedCamera() -> getSharedCamera
    void finalize() -> finalize
    void close() -> close
    com.google.ar.core.Trackable createTrackable(long) -> createTrackable
    void configure(com.google.ar.core.Config) -> configure
    com.google.ar.core.Config getConfig() -> getConfig
    void getConfig(com.google.ar.core.Config) -> getConfig
    void resume() -> resume
    boolean isSharedCameraUsed() -> isSharedCameraUsed
    com.google.ar.core.Frame update() -> update
    void pause() -> pause
    void pauseSharedCameraIfInUse() -> pauseSharedCameraIfInUse
    void setCameraTextureName(int) -> setCameraTextureName
    void setDisplayGeometry(int,int,int) -> setDisplayGeometry
    boolean isSupported(com.google.ar.core.Config) -> isSupported
    java.util.Collection getAllAnchors() -> getAllAnchors
    java.util.Collection getAllTrackables(java.lang.Class) -> getAllTrackables
    com.google.ar.core.Anchor createAnchor(com.google.ar.core.Pose) -> createAnchor
    com.google.ar.core.Anchor hostCloudAnchor(com.google.ar.core.Anchor) -> hostCloudAnchor
    com.google.ar.core.Anchor resolveCloudAnchor(java.lang.String) -> resolveCloudAnchor
    java.util.Collection convertNativeAnchorsToCollection(long[]) -> convertNativeAnchorsToCollection
    java.util.Collection convertNativeTrackablesToCollection(java.lang.Class,long[]) -> convertNativeTrackablesToCollection
    java.util.List getSupportedCameraConfigs() -> getSupportedCameraConfigs
    void setCameraConfig(com.google.ar.core.CameraConfig) -> setCameraConfig
    com.google.ar.core.CameraConfig getCameraConfig() -> getCameraConfig
    java.util.List convertNativeCameraConfigsToCollection(long[]) -> convertNativeCameraConfigsToCollection
    void throwExceptionFromArStatus(int) -> throwExceptionFromArStatus
    void loadDynamicSymbolsAfterSessionCreate() -> loadDynamicSymbolsAfterSessionCreate
    java.nio.ByteBuffer directByteBufferOrDefault(java.nio.ByteBuffer) -> directByteBufferOrDefault
    long nativeCreateSessionAndWrapper(android.content.Context) -> nativeCreateSessionAndWrapper
    long nativeCreateSessionAndWrapperWithFeatures(android.content.Context,int[]) -> nativeCreateSessionAndWrapperWithFeatures
    void nativeDestroySessionWrapper(long) -> nativeDestroySessionWrapper
    void nativeCloseSession(long) -> nativeCloseSession
    boolean nativeIsSupported(long,long) -> nativeIsSupported
    void nativeConfigure(long,long) -> nativeConfigure
    void nativeGetConfig(long,long) -> nativeGetConfig
    void nativeResume(long) -> nativeResume
    void nativePause(long) -> nativePause
    void nativeSetCameraTextureName(long,int) -> nativeSetCameraTextureName
    void nativeSetDisplayGeometry(long,int,int,int) -> nativeSetDisplayGeometry
    void nativeUpdate(long,long) -> nativeUpdate
    long nativeCreateAnchor(long,com.google.ar.core.Pose) -> nativeCreateAnchor
    long[] nativeAcquireAllAnchors(long) -> nativeAcquireAllAnchors
    long[] nativeAcquireAllTrackables(long,int) -> nativeAcquireAllTrackables
    long nativeHostCloudAnchor(long,long) -> nativeHostCloudAnchor
    long nativeResolveCloudAnchor(long,java.lang.String) -> nativeResolveCloudAnchor
    long[] nativeGetSupportedCameraConfigs(long) -> nativeGetSupportedCameraConfigs
    int nativeSetCameraConfig(long,long) -> nativeSetCameraConfig
    long nativeGetCameraConfig(long) -> nativeGetCameraConfig
    long nativeCreateSessionAndWrapperForSharedCamera(android.content.Context) -> nativeCreateSessionAndWrapperForSharedCamera
    long nativeCreateSessionWrapperFromHandle(long) -> nativeCreateSessionWrapperFromHandle
    long nativeReleaseSessionOwnership(long) -> nativeReleaseSessionOwnership
    long nativeGetSessionNativeHandle(long) -> nativeGetSessionNativeHandle
com.google.ar.core.Session$Feature -> com.google.ar.core.Session$Feature:
    com.google.ar.core.Session$Feature FRONT_CAMERA -> FRONT_CAMERA
    com.google.ar.core.Session$Feature SHARED_CAMERA -> SHARED_CAMERA
    int nativeCode -> nativeCode
    com.google.ar.core.Session$Feature[] $VALUES -> $VALUES
    com.google.ar.core.Session$Feature[] values() -> values
    com.google.ar.core.Session$Feature valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    void <clinit>() -> <clinit>
com.google.ar.core.Session$a -> com.google.ar.core.Session$a:
    com.google.ar.core.Session$a a -> a
    int b -> b
    com.google.ar.core.Session$a[] c -> c
    com.google.ar.core.Session$a[] values() -> values
    void <init>(java.lang.String,int,int) -> <init>
    void <clinit>() -> <clinit>
com.google.ar.core.Session$b -> com.google.ar.core.Session$b:
    com.google.ar.core.Session$b c -> c
    com.google.ar.core.Session$b a -> a
    com.google.ar.core.Session$b d -> d
    com.google.ar.core.Session$b e -> e
    com.google.ar.core.Session$b f -> f
    com.google.ar.core.Session$b g -> g
    int b -> b
    java.lang.Class h -> h
    com.google.ar.core.Session$b[] i -> i
    com.google.ar.core.Session$b[] values() -> values
    void <init>(java.lang.String,int,int,java.lang.Class) -> <init>
    com.google.ar.core.Trackable a(long,com.google.ar.core.Session) -> a
    com.google.ar.core.Session$b a(java.lang.Class) -> a
    void <init>(java.lang.String,int,int,java.lang.Class,byte) -> <init>
    void <clinit>() -> <clinit>
com.google.ar.core.Session$c -> com.google.ar.core.Session$c:
    com.google.ar.core.Session$c a -> a
    com.google.ar.core.Session$c b -> b
    com.google.ar.core.Session$c c -> c
    com.google.ar.core.Session$c m -> m
    com.google.ar.core.Session$c n -> n
    com.google.ar.core.Session$c o -> o
    com.google.ar.core.Session$c p -> p
    com.google.ar.core.Session$c q -> q
    com.google.ar.core.Session$c r -> r
    com.google.ar.core.Session$c s -> s
    com.google.ar.core.Session$c t -> t
    com.google.ar.core.Session$c d -> d
    com.google.ar.core.Session$c u -> u
    com.google.ar.core.Session$c v -> v
    com.google.ar.core.Session$c w -> w
    com.google.ar.core.Session$c x -> x
    com.google.ar.core.Session$c y -> y
    com.google.ar.core.Session$c z -> z
    com.google.ar.core.Session$c A -> A
    com.google.ar.core.Session$c B -> B
    com.google.ar.core.Session$c C -> C
    com.google.ar.core.Session$c e -> e
    com.google.ar.core.Session$c f -> f
    com.google.ar.core.Session$c g -> g
    com.google.ar.core.Session$c h -> h
    com.google.ar.core.Session$c i -> i
    int j -> j
    java.lang.Class k -> k
    java.lang.String l -> l
    com.google.ar.core.Session$c[] D -> D
    com.google.ar.core.Session$c[] values() -> values
    void <init>(java.lang.String,int,int,java.lang.Class) -> <init>
    void <init>(java.lang.String,int,int,java.lang.Class,java.lang.String) -> <init>
    void <clinit>() -> <clinit>
com.google.ar.core.SessionCreateJniHelper -> com.google.ar.core.SessionCreateJniHelper:
    void <init>() -> <init>
    int getMinApkVersion(android.content.Context) -> getMinApkVersion
    int getArCoreApkVersionCode(android.content.Context) -> getArCoreApkVersionCode
    boolean checkApkSignature(android.content.Context) -> checkApkSignature
com.google.ar.core.SharedCamera -> com.google.ar.core.SharedCamera:
    java.lang.String TAG -> TAG
    com.google.ar.core.SharedCamera$a sharedCameraInfo -> sharedCameraInfo
    boolean cameraSharedWithAr -> cameraSharedWithAr
    com.google.ar.core.Session session -> session
    android.os.Handler sharedCameraHandler -> sharedCameraHandler
    void <init>(com.google.ar.core.Session) -> <init>
    void close() -> close
    void setAppSurfaces(java.lang.String,java.util.List) -> setAppSurfaces
    android.graphics.SurfaceTexture getSurfaceTexture() -> getSurfaceTexture
    java.util.List getArCoreSurfaces() -> getArCoreSurfaces
    android.hardware.camera2.CameraDevice$StateCallback createARDeviceStateCallback(android.hardware.camera2.CameraDevice$StateCallback,android.os.Handler) -> createARDeviceStateCallback
    android.hardware.camera2.CameraCaptureSession$StateCallback createARSessionStateCallback(android.hardware.camera2.CameraCaptureSession$StateCallback,android.os.Handler) -> createARSessionStateCallback
    void pause() -> pause
    void setDummyOnImageAvailableListener(android.media.ImageReader) -> setDummyOnImageAvailableListener
    void setDummyListenerToAvoidImageBufferStarvation() -> setDummyListenerToAvoidImageBufferStarvation
    void onDeviceOpened(android.hardware.camera2.CameraDevice) -> onDeviceOpened
    void onDeviceClosed(android.hardware.camera2.CameraDevice) -> onDeviceClosed
    void onDeviceDisconnected(android.hardware.camera2.CameraDevice) -> onDeviceDisconnected
    void onCaptureSessionActive(android.hardware.camera2.CameraCaptureSession) -> onCaptureSessionActive
    void onCaptureSessionClosed(android.hardware.camera2.CameraCaptureSession) -> onCaptureSessionClosed
    void onCaptureSessionConfigureFailed(android.hardware.camera2.CameraCaptureSession) -> onCaptureSessionConfigureFailed
    void onCaptureSessionConfigured(android.hardware.camera2.CameraCaptureSession) -> onCaptureSessionConfigured
    void onCaptureSessionReady(android.hardware.camera2.CameraCaptureSession) -> onCaptureSessionReady
    android.media.ImageReader getCpuImageReader() -> getCpuImageReader
    android.media.ImageReader getCpuImageReaderMotionTracking() -> getCpuImageReaderMotionTracking
    android.graphics.SurfaceTexture getGpuSurfaceTexture() -> getGpuSurfaceTexture
    android.view.Surface getGpuSurface() -> getGpuSurface
    void setCaptureCallback(android.hardware.camera2.CameraCaptureSession$CaptureCallback,android.os.Handler) -> setCaptureCallback
    void nativeSharedCameraOnOpened(long,android.hardware.camera2.CameraDevice) -> nativeSharedCameraOnOpened
    void nativeSharedCameraOnClosed(long,android.hardware.camera2.CameraDevice) -> nativeSharedCameraOnClosed
    void nativeSharedCameraOnDisconnected(long,android.hardware.camera2.CameraDevice) -> nativeSharedCameraOnDisconnected
    android.media.ImageReader nativeSharedCameraGetImageReader(long,android.hardware.camera2.CameraDevice) -> nativeSharedCameraGetImageReader
    android.media.ImageReader nativeSharedCameraGetImageReaderMotionTracking(long,android.hardware.camera2.CameraDevice) -> nativeSharedCameraGetImageReaderMotionTracking
    android.graphics.SurfaceTexture nativeSharedCameraGetSurfaceTexture(long,android.hardware.camera2.CameraDevice) -> nativeSharedCameraGetSurfaceTexture
    android.view.Surface nativeSharedCameraGetSurface(long,android.hardware.camera2.CameraDevice) -> nativeSharedCameraGetSurface
    void nativeSharedCameraSetAppSurfaces(long,java.lang.String,java.util.List) -> nativeSharedCameraSetAppSurfaces
    void nativeSharedCameraCaptureSessionActive(long,android.hardware.camera2.CameraCaptureSession) -> nativeSharedCameraCaptureSessionActive
    void nativeSharedCameraCaptureSessionClosed(long,android.hardware.camera2.CameraCaptureSession) -> nativeSharedCameraCaptureSessionClosed
    void nativeSharedCameraCaptureSessionConfigureFailed(long,android.hardware.camera2.CameraCaptureSession) -> nativeSharedCameraCaptureSessionConfigureFailed
    void nativeSharedCameraCaptureSessionConfigured(long,android.hardware.camera2.CameraCaptureSession) -> nativeSharedCameraCaptureSessionConfigured
    void nativeSharedCameraCaptureSessionReady(long,android.hardware.camera2.CameraCaptureSession) -> nativeSharedCameraCaptureSessionReady
    void nativeSharedCameraSetCaptureCallback(long,android.hardware.camera2.CameraCaptureSession$CaptureCallback,android.os.Handler) -> nativeSharedCameraSetCaptureCallback
    void lambda$setDummyOnImageAvailableListener$0$SharedCamera(android.media.ImageReader) -> lambda$setDummyOnImageAvailableListener$0$SharedCamera
    void access$100(com.google.ar.core.SharedCamera,android.hardware.camera2.CameraDevice) -> access$100
    com.google.ar.core.SharedCamera$a access$200(com.google.ar.core.SharedCamera) -> access$200
    void access$300(com.google.ar.core.SharedCamera,android.hardware.camera2.CameraDevice) -> access$300
    android.graphics.SurfaceTexture access$400(com.google.ar.core.SharedCamera) -> access$400
    android.view.Surface access$500(com.google.ar.core.SharedCamera) -> access$500
    void access$600(com.google.ar.core.SharedCamera,android.hardware.camera2.CameraDevice) -> access$600
    void access$700(com.google.ar.core.SharedCamera) -> access$700
    void access$800(com.google.ar.core.SharedCamera,android.hardware.camera2.CameraCaptureSession) -> access$800
    void access$900(com.google.ar.core.SharedCamera,android.hardware.camera2.CameraCaptureSession) -> access$900
    void access$1000(com.google.ar.core.SharedCamera) -> access$1000
    void access$1100(com.google.ar.core.SharedCamera,android.hardware.camera2.CameraCaptureSession) -> access$1100
    void access$1200(com.google.ar.core.SharedCamera,android.hardware.camera2.CameraCaptureSession) -> access$1200
    void access$1300(com.google.ar.core.SharedCamera,android.hardware.camera2.CameraCaptureSession) -> access$1300
com.google.ar.core.SharedCamera$a -> com.google.ar.core.SharedCamera$a:
    android.hardware.camera2.CameraDevice a -> a
    java.util.Map b -> b
    android.graphics.SurfaceTexture c -> c
    android.view.Surface d -> d
    void <init>() -> <init>
    android.hardware.camera2.CameraDevice a() -> a
    void a(android.hardware.camera2.CameraDevice) -> a
    void a(java.lang.String,java.util.List) -> a
    android.graphics.SurfaceTexture b() -> b
    void a(android.graphics.SurfaceTexture) -> a
    android.view.Surface c() -> c
    void a(android.view.Surface) -> a
    void <init>(byte) -> <init>
com.google.ar.core.Trackable -> com.google.ar.core.Trackable:
    com.google.ar.core.TrackingState getTrackingState() -> getTrackingState
    com.google.ar.core.Anchor createAnchor(com.google.ar.core.Pose) -> createAnchor
    java.util.Collection getAnchors() -> getAnchors
com.google.ar.core.TrackableBase -> com.google.ar.core.TrackableBase:
    long nativeHandle -> nativeHandle
    com.google.ar.core.Session session -> session
    void <init>(long,com.google.ar.core.Session) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void finalize() -> finalize
    com.google.ar.core.TrackingState getTrackingState() -> getTrackingState
    com.google.ar.core.Anchor createAnchor(com.google.ar.core.Pose) -> createAnchor
    java.util.Collection getAnchors() -> getAnchors
    void internalReleaseNativeHandle(long) -> internalReleaseNativeHandle
    int internalGetType(long,long) -> internalGetType
    void nativeReleaseTrackable(long) -> nativeReleaseTrackable
    int nativeGetType(long,long) -> nativeGetType
    int nativeGetTrackingState(long,long) -> nativeGetTrackingState
    long nativeCreateAnchor(long,long,com.google.ar.core.Pose) -> nativeCreateAnchor
    long[] nativeGetAnchors(long,long) -> nativeGetAnchors
com.google.ar.core.TrackingFailureReason -> com.google.ar.core.TrackingFailureReason:
    com.google.ar.core.TrackingFailureReason NONE -> NONE
    com.google.ar.core.TrackingFailureReason BAD_STATE -> BAD_STATE
    com.google.ar.core.TrackingFailureReason INSUFFICIENT_LIGHT -> INSUFFICIENT_LIGHT
    com.google.ar.core.TrackingFailureReason EXCESSIVE_MOTION -> EXCESSIVE_MOTION
    com.google.ar.core.TrackingFailureReason INSUFFICIENT_FEATURES -> INSUFFICIENT_FEATURES
    int nativeCode -> nativeCode
    com.google.ar.core.TrackingFailureReason[] $VALUES -> $VALUES
    com.google.ar.core.TrackingFailureReason[] values() -> values
    com.google.ar.core.TrackingFailureReason valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    com.google.ar.core.TrackingFailureReason forNumber(int) -> forNumber
    void <clinit>() -> <clinit>
com.google.ar.core.TrackingState -> com.google.ar.core.TrackingState:
    com.google.ar.core.TrackingState TRACKING -> TRACKING
    com.google.ar.core.TrackingState PAUSED -> PAUSED
    com.google.ar.core.TrackingState STOPPED -> STOPPED
    int nativeCode -> nativeCode
    com.google.ar.core.TrackingState[] $VALUES -> $VALUES
    com.google.ar.core.TrackingState[] values() -> values
    com.google.ar.core.TrackingState valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    com.google.ar.core.TrackingState forNumber(int) -> forNumber
    void <clinit>() -> <clinit>
com.google.ar.core.a -> com.google.ar.core.a:
    void <init>(java.lang.String,int,int) -> <init>
    boolean isUnknown() -> isUnknown
com.google.ar.core.aa -> com.google.ar.core.b:
    void <init>() -> <init>
com.google.ar.core.ab -> com.google.ar.core.c:
    android.content.Context a -> a
    com.google.ar.core.p b -> b
    boolean c -> c
    void <init>(android.content.Context,com.google.ar.core.p) -> <init>
    void run() -> run
    void a() -> a
com.google.ar.core.ac -> com.google.ar.core.d:
    java.util.concurrent.atomic.AtomicReference a -> a
    void <init>(java.util.concurrent.atomic.AtomicReference) -> <init>
    void a(com.google.ar.core.ArCoreApk$Availability) -> a
com.google.ar.core.ad -> com.google.ar.core.e:
    void <init>(java.lang.String,int,int,java.lang.Class) -> <init>
    com.google.ar.core.Trackable a(long,com.google.ar.core.Session) -> a
com.google.ar.core.ae -> com.google.ar.core.f:
    void <init>(java.lang.String,int,int,java.lang.Class) -> <init>
    com.google.ar.core.Trackable a(long,com.google.ar.core.Session) -> a
com.google.ar.core.af -> com.google.ar.core.g:
    void <init>(java.lang.String,int,int,java.lang.Class) -> <init>
    com.google.ar.core.Trackable a(long,com.google.ar.core.Session) -> a
com.google.ar.core.ag -> com.google.ar.core.h:
    void <init>(java.lang.String,int,int,java.lang.Class) -> <init>
    com.google.ar.core.Trackable a(long,com.google.ar.core.Session) -> a
com.google.ar.core.ah -> com.google.ar.core.i:
    void <init>(java.lang.String,int,int,java.lang.Class) -> <init>
    com.google.ar.core.Trackable a(long,com.google.ar.core.Session) -> a
com.google.ar.core.ai -> com.google.ar.core.j:
    void <init>(java.lang.String,int,int,java.lang.Class) -> <init>
    com.google.ar.core.Trackable a(long,com.google.ar.core.Session) -> a
com.google.ar.core.aj -> com.google.ar.core.k:
    com.google.ar.core.h a -> a
    com.google.ar.core.ArCoreApk$Availability a(android.content.Context) -> a
    android.app.PendingIntent b(android.content.Context) -> b
    android.net.Uri a(java.lang.String) -> a
    void <init>(com.google.ar.core.h) -> <init>
    void a(com.google.ar.core.ArCoreApk$Availability) -> a
com.google.ar.core.ak -> com.google.ar.core.l:
    android.media.ImageReader$OnImageAvailableListener a -> a
    void <init>() -> <init>
    void onImageAvailable(android.media.ImageReader) -> onImageAvailable
    void <clinit>() -> <clinit>
com.google.ar.core.al -> com.google.ar.core.m:
    android.hardware.camera2.CameraDevice$StateCallback a -> a
    android.hardware.camera2.CameraDevice b -> b
    void <init>(android.hardware.camera2.CameraDevice$StateCallback,android.hardware.camera2.CameraDevice) -> <init>
    void run() -> run
com.google.ar.core.am -> com.google.ar.core.n:
    android.os.Handler a -> a
    android.hardware.camera2.CameraDevice$StateCallback b -> b
    com.google.ar.core.SharedCamera c -> c
    void <init>(com.google.ar.core.SharedCamera,android.os.Handler,android.hardware.camera2.CameraDevice$StateCallback) -> <init>
    void onClosed(android.hardware.camera2.CameraDevice) -> onClosed
    void onOpened(android.hardware.camera2.CameraDevice) -> onOpened
    void onDisconnected(android.hardware.camera2.CameraDevice) -> onDisconnected
    void onError(android.hardware.camera2.CameraDevice,int) -> onError
com.google.ar.core.an -> com.google.ar.core.o:
    android.hardware.camera2.CameraDevice$StateCallback a -> a
    android.hardware.camera2.CameraDevice b -> b
    void <init>(android.hardware.camera2.CameraDevice$StateCallback,android.hardware.camera2.CameraDevice) -> <init>
    void run() -> run
com.google.ar.core.annotations.NativeEnum -> com.google.ar.core.annotations.NativeEnum:
    java.lang.String value() -> value
com.google.ar.core.annotations.UsedByNative -> com.google.ar.core.annotations.UsedByNative:
    java.lang.String value() -> value
com.google.ar.core.annotations.UsedByReflection -> com.google.ar.core.annotations.UsedByReflection:
    java.lang.String value() -> value
com.google.ar.core.ao -> com.google.ar.core.p:
    android.hardware.camera2.CameraDevice$StateCallback a -> a
    android.hardware.camera2.CameraDevice b -> b
    void <init>(android.hardware.camera2.CameraDevice$StateCallback,android.hardware.camera2.CameraDevice) -> <init>
    void run() -> run
com.google.ar.core.ap -> com.google.ar.core.q:
    android.os.Handler a -> a
    android.hardware.camera2.CameraCaptureSession$StateCallback b -> b
    com.google.ar.core.SharedCamera c -> c
    void <init>(com.google.ar.core.SharedCamera,android.os.Handler,android.hardware.camera2.CameraCaptureSession$StateCallback) -> <init>
    void onClosed(android.hardware.camera2.CameraCaptureSession) -> onClosed
    void onConfigured(android.hardware.camera2.CameraCaptureSession) -> onConfigured
    void onConfigureFailed(android.hardware.camera2.CameraCaptureSession) -> onConfigureFailed
    void onReady(android.hardware.camera2.CameraCaptureSession) -> onReady
    void onActive(android.hardware.camera2.CameraCaptureSession) -> onActive
com.google.ar.core.aq -> com.google.ar.core.s:
    android.hardware.camera2.CameraDevice$StateCallback a -> a
    android.hardware.camera2.CameraDevice b -> b
    int c -> c
    void <init>(android.hardware.camera2.CameraDevice$StateCallback,android.hardware.camera2.CameraDevice,int) -> <init>
    void run() -> run
com.google.ar.core.ar -> com.google.ar.core.t:
    android.hardware.camera2.CameraCaptureSession$StateCallback a -> a
    android.hardware.camera2.CameraCaptureSession b -> b
    void <init>(android.hardware.camera2.CameraCaptureSession$StateCallback,android.hardware.camera2.CameraCaptureSession) -> <init>
    void run() -> run
com.google.ar.core.as -> com.google.ar.core.u:
    android.hardware.camera2.CameraCaptureSession$StateCallback a -> a
    android.hardware.camera2.CameraCaptureSession b -> b
    void <init>(android.hardware.camera2.CameraCaptureSession$StateCallback,android.hardware.camera2.CameraCaptureSession) -> <init>
    void run() -> run
com.google.ar.core.at -> com.google.ar.core.v:
    android.hardware.camera2.CameraCaptureSession$StateCallback a -> a
    android.hardware.camera2.CameraCaptureSession b -> b
    void <init>(android.hardware.camera2.CameraCaptureSession$StateCallback,android.hardware.camera2.CameraCaptureSession) -> <init>
    void run() -> run
com.google.ar.core.au -> com.google.ar.core.w:
    android.hardware.camera2.CameraCaptureSession$StateCallback a -> a
    android.hardware.camera2.CameraCaptureSession b -> b
    void <init>(android.hardware.camera2.CameraCaptureSession$StateCallback,android.hardware.camera2.CameraCaptureSession) -> <init>
    void run() -> run
com.google.ar.core.av -> com.google.ar.core.x:
    android.hardware.camera2.CameraCaptureSession$StateCallback a -> a
    android.hardware.camera2.CameraCaptureSession b -> b
    void <init>(android.hardware.camera2.CameraCaptureSession$StateCallback,android.hardware.camera2.CameraCaptureSession) -> <init>
    void run() -> run
com.google.ar.core.b -> com.google.ar.core.y:
    void <init>(java.lang.String,int,int) -> <init>
    boolean isUnknown() -> isUnknown
com.google.ar.core.c -> com.google.ar.core.z:
    void <init>(java.lang.String,int,int) -> <init>
    boolean isUnknown() -> isUnknown
    boolean isTransient() -> isTransient
com.google.ar.core.d -> com.google.ar.core.aa:
    void <init>(java.lang.String,int,int) -> <init>
    boolean isSupported() -> isSupported
com.google.ar.core.e -> com.google.ar.core.ab:
    void <init>(java.lang.String,int,int) -> <init>
    boolean isUnsupported() -> isUnsupported
com.google.ar.core.exceptions.AnchorNotSupportedForHostingException -> com.google.ar.core.exceptions.AnchorNotSupportedForHostingException:
    void <init>() -> <init>
com.google.ar.core.exceptions.CameraNotAvailableException -> com.google.ar.core.exceptions.CameraNotAvailableException:
    void <init>() -> <init>
com.google.ar.core.exceptions.CloudAnchorsNotConfiguredException -> com.google.ar.core.exceptions.CloudAnchorsNotConfiguredException:
    void <init>() -> <init>
com.google.ar.core.exceptions.DataInvalidFormatException -> com.google.ar.core.exceptions.DataInvalidFormatException:
    void <init>() -> <init>
com.google.ar.core.exceptions.DataUnsupportedVersionException -> com.google.ar.core.exceptions.DataUnsupportedVersionException:
    void <init>() -> <init>
com.google.ar.core.exceptions.DeadlineExceededException -> com.google.ar.core.exceptions.DeadlineExceededException:
    void <init>() -> <init>
com.google.ar.core.exceptions.FatalException -> com.google.ar.core.exceptions.FatalException:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
com.google.ar.core.exceptions.ImageInsufficientQualityException -> com.google.ar.core.exceptions.ImageInsufficientQualityException:
    void <init>() -> <init>
com.google.ar.core.exceptions.MissingGlContextException -> com.google.ar.core.exceptions.MissingGlContextException:
    void <init>() -> <init>
com.google.ar.core.exceptions.NotTrackingException -> com.google.ar.core.exceptions.NotTrackingException:
    void <init>() -> <init>
com.google.ar.core.exceptions.NotYetAvailableException -> com.google.ar.core.exceptions.NotYetAvailableException:
    void <init>() -> <init>
com.google.ar.core.exceptions.ResourceExhaustedException -> com.google.ar.core.exceptions.ResourceExhaustedException:
    void <init>() -> <init>
com.google.ar.core.exceptions.SessionNotPausedException -> com.google.ar.core.exceptions.SessionNotPausedException:
    void <init>() -> <init>
com.google.ar.core.exceptions.SessionPausedException -> com.google.ar.core.exceptions.SessionPausedException:
    void <init>() -> <init>
com.google.ar.core.exceptions.TextureNotSetException -> com.google.ar.core.exceptions.TextureNotSetException:
    void <init>() -> <init>
com.google.ar.core.exceptions.UnavailableApkTooOldException -> com.google.ar.core.exceptions.UnavailableApkTooOldException:
    void <init>() -> <init>
com.google.ar.core.exceptions.UnavailableArcoreNotInstalledException -> com.google.ar.core.exceptions.UnavailableArcoreNotInstalledException:
    void <init>() -> <init>
com.google.ar.core.exceptions.UnavailableDeviceNotCompatibleException -> com.google.ar.core.exceptions.UnavailableDeviceNotCompatibleException:
    void <init>() -> <init>
com.google.ar.core.exceptions.UnavailableException -> com.google.ar.core.exceptions.UnavailableException:
    void <init>() -> <init>
com.google.ar.core.exceptions.UnavailableSdkTooOldException -> com.google.ar.core.exceptions.UnavailableSdkTooOldException:
    void <init>() -> <init>
com.google.ar.core.exceptions.UnavailableUserDeclinedInstallationException -> com.google.ar.core.exceptions.UnavailableUserDeclinedInstallationException:
    void <init>() -> <init>
com.google.ar.core.exceptions.UnsupportedConfigurationException -> com.google.ar.core.exceptions.UnsupportedConfigurationException:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
com.google.ar.core.f -> com.google.ar.core.ac:
    void <init>(java.lang.String,int,int) -> <init>
    boolean isSupported() -> isSupported
com.google.ar.core.g -> com.google.ar.core.ad:
    void <init>(java.lang.String,int,int) -> <init>
    boolean isSupported() -> isSupported
com.google.ar.core.h -> com.google.ar.core.ae:
    com.google.ar.core.h b -> b
    java.lang.Exception a -> a
    boolean c -> c
    int d -> d
    long e -> e
    com.google.ar.core.ArCoreApk$Availability f -> f
    boolean g -> g
    com.google.ar.core.n h -> h
    boolean i -> i
    boolean j -> j
    int k -> k
    void <init>() -> <init>
    com.google.ar.core.h a() -> a
    com.google.ar.core.ArCoreApk$Availability checkAvailability(android.content.Context) -> checkAvailability
    com.google.ar.core.ArCoreApk$InstallStatus requestInstall(android.app.Activity,boolean,com.google.ar.core.ArCoreApk$InstallBehavior,com.google.ar.core.ArCoreApk$UserMessageType) -> requestInstall
    com.google.ar.core.ArCoreApk$InstallStatus requestInstall(android.app.Activity,boolean) -> requestInstall
    com.google.ar.core.ArCoreApk$InstallStatus a(android.app.Activity) -> a
    com.google.ar.core.n a(android.content.Context) -> a
    void b() -> b
    boolean b(android.content.Context) -> b
    boolean c(android.content.Context) -> c
    boolean c() -> c
    int d(android.content.Context) -> d
    void e(android.content.Context) -> e
    com.google.ar.core.ArCoreApk$Availability a(com.google.ar.core.h,com.google.ar.core.ArCoreApk$Availability) -> a
    boolean a(com.google.ar.core.h,boolean) -> a
    void <clinit>() -> <clinit>
com.google.ar.core.i -> com.google.ar.core.af:
    java.util.Map a -> a
    void <init>() -> <init>
    com.google.ar.core.AugmentedFace a(long,com.google.ar.core.Session) -> a
com.google.ar.core.j -> com.google.ar.core.ag:
    void <init>(int,float,boolean) -> <init>
    boolean removeEldestEntry(java.util.Map$Entry) -> removeEldestEntry
com.google.ar.core.k -> com.google.ar.core.ah:
    com.google.ar.core.InstallActivity a -> a
    void <init>(com.google.ar.core.InstallActivity) -> <init>
    void onClick(android.view.View) -> onClick
com.google.ar.core.l -> com.google.ar.core.ai:
    int a -> a
    int b -> b
    int c -> c
    com.google.ar.core.InstallActivity d -> d
    void <init>(com.google.ar.core.InstallActivity,int,int,int) -> <init>
    void onAnimationUpdate(android.animation.ValueAnimator) -> onAnimationUpdate
com.google.ar.core.m -> com.google.ar.core.aj:
    com.google.ar.core.InstallActivity a -> a
    void <init>(com.google.ar.core.InstallActivity) -> <init>
    void onClick(android.view.View) -> onClick
com.google.ar.core.n -> com.google.ar.core.ak:
    java.util.Queue a -> a
    android.content.Context b -> b
    int c -> c
    com.google.a.b.a.a.a.b d -> d
    android.content.BroadcastReceiver e -> e
    android.content.Context f -> f
    android.content.ServiceConnection g -> g
    java.util.concurrent.atomic.AtomicReference h -> h
    void <init>() -> <init>
    void a(android.content.Context) -> a
    void a() -> a
    void a(android.content.Context,com.google.ar.core.ArCoreApk$a) -> a
    void a(android.app.Activity,com.google.ar.core.p) -> a
    void <init>(byte) -> <init>
    void b(android.app.Activity,com.google.ar.core.p) -> b
    void a(android.app.Activity,android.os.Bundle,com.google.ar.core.p) -> a
    android.os.Bundle b() -> b
    void c() -> c
    void a(android.os.IBinder) -> a
    void d() -> d
    void a(java.lang.Runnable) -> a
    void a(com.google.ar.core.n,android.os.IBinder) -> a
    void a(com.google.ar.core.n) -> a
    android.os.Bundle b(com.google.ar.core.n) -> b
    com.google.a.b.a.a.a.b c(com.google.ar.core.n) -> c
    void d(com.google.ar.core.n) -> d
    void a(com.google.ar.core.n,android.app.Activity,com.google.ar.core.p) -> a
    void a(com.google.ar.core.n,android.app.Activity,android.os.Bundle,com.google.ar.core.p) -> a
com.google.ar.core.o -> com.google.ar.core.al:
    com.google.ar.core.InstallActivity a -> a
    void <init>(com.google.ar.core.InstallActivity) -> <init>
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
com.google.ar.core.p -> com.google.ar.core.am:
    boolean a -> a
    com.google.ar.core.InstallActivity b -> b
    void a(com.google.ar.core.q) -> a
    void a(java.lang.Exception) -> a
    void <init>(com.google.ar.core.InstallActivity) -> <init>
com.google.ar.core.q -> com.google.ar.core.an:
    com.google.ar.core.q a -> a
    com.google.ar.core.q b -> b
    com.google.ar.core.q c -> c
    com.google.ar.core.q[] d -> d
    com.google.ar.core.q[] values() -> values
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.ar.core.s -> com.google.ar.core.ao:
    android.content.Context b -> b
    com.google.ar.core.ArCoreApk$a a -> a
    com.google.ar.core.n c -> c
    void <init>(com.google.ar.core.n,android.content.Context,com.google.ar.core.ArCoreApk$a) -> <init>
    void run() -> run
com.google.ar.core.t -> com.google.ar.core.ap:
    com.google.ar.core.n a -> a
    void <init>(com.google.ar.core.n) -> <init>
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
com.google.ar.core.u -> com.google.ar.core.aq:
    com.google.ar.core.p a -> a
    com.google.ar.core.n b -> b
    void <init>(com.google.ar.core.n,com.google.ar.core.p) -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.google.ar.core.v -> com.google.ar.core.ar:
    com.google.ar.core.s a -> a
    void <init>(com.google.ar.core.s) -> <init>
    void b(android.os.Bundle) -> b
    void a(android.os.Bundle) -> a
    void a() -> a
com.google.ar.core.w -> com.google.ar.core.as:
    java.util.concurrent.atomic.AtomicBoolean a -> a
    com.google.ar.core.x b -> b
    void <init>(com.google.ar.core.x,java.util.concurrent.atomic.AtomicBoolean) -> <init>
    void a(android.os.Bundle) -> a
    void b(android.os.Bundle) -> b
    void a() -> a
com.google.ar.core.x -> com.google.ar.core.at:
    android.app.Activity a -> a
    com.google.ar.core.p b -> b
    com.google.ar.core.n c -> c
    void <init>(com.google.ar.core.n,android.app.Activity,com.google.ar.core.p) -> <init>
    void run() -> run
com.google.ar.core.y -> com.google.ar.core.au:
    int a -> a
    int b -> b
    int c -> c
    int[] d -> d
    void <clinit>() -> <clinit>
com.google.ar.core.z -> com.google.ar.core.av:
    java.util.concurrent.atomic.AtomicBoolean a -> a
    com.google.ar.core.x b -> b
    void <init>(com.google.ar.core.x,java.util.concurrent.atomic.AtomicBoolean) -> <init>
    void run() -> run
com.google.vr.dynamite.client.DynamiteClient -> com.google.vr.dynamite.client.DynamiteClient:
    android.util.ArrayMap a -> a
    void <init>() -> <init>
    int checkVersion(android.content.Context,java.lang.String,java.lang.String,java.lang.String) -> checkVersion
    long loadNativeRemoteLibrary(android.content.Context,java.lang.String,java.lang.String) -> loadNativeRemoteLibrary
    java.lang.ClassLoader getRemoteClassLoader(android.content.Context,java.lang.String,java.lang.String) -> getRemoteClassLoader
    java.lang.ClassLoader getRemoteDexClassLoader(android.content.Context,java.lang.String) -> getRemoteDexClassLoader
    android.content.Context getRemoteContext(android.content.Context,java.lang.String,java.lang.String) -> getRemoteContext
    com.google.vr.dynamite.client.e getRemoteLibraryLoaderFromInfo(com.google.vr.dynamite.client.d) -> getRemoteLibraryLoaderFromInfo
    void <clinit>() -> <clinit>
com.google.vr.dynamite.client.ILoadedInstanceCreator -> com.google.vr.dynamite.client.ILoadedInstanceCreator:
    com.google.vr.dynamite.client.INativeLibraryLoader newNativeLibraryLoader(com.google.vr.dynamite.client.IObjectWrapper,com.google.vr.dynamite.client.IObjectWrapper) -> newNativeLibraryLoader
com.google.vr.dynamite.client.INativeLibraryLoader -> com.google.vr.dynamite.client.INativeLibraryLoader:
    long initializeAndLoadNativeLibrary(java.lang.String) -> initializeAndLoadNativeLibrary
    int checkVersion(java.lang.String) -> checkVersion
com.google.vr.dynamite.client.IObjectWrapper -> com.google.vr.dynamite.client.IObjectWrapper:
com.google.vr.dynamite.client.IObjectWrapper$a -> com.google.vr.dynamite.client.IObjectWrapper$a:
    void <init>() -> <init>
com.google.vr.dynamite.client.ObjectWrapper -> com.google.vr.dynamite.client.ObjectWrapper:
    java.lang.Object wrappedObject -> wrappedObject
    void <init>(java.lang.Object) -> <init>
    com.google.vr.dynamite.client.IObjectWrapper a(java.lang.Object) -> a
    java.lang.Object unwrap(com.google.vr.dynamite.client.IObjectWrapper,java.lang.Class) -> unwrap
com.google.vr.dynamite.client.UsedByNative -> com.google.vr.dynamite.client.UsedByNative:
com.google.vr.dynamite.client.UsedByReflection -> com.google.vr.dynamite.client.UsedByReflection:
com.google.vr.dynamite.client.a -> com.google.vr.dynamite.client.a:
    void <init>(android.os.IBinder) -> <init>
    com.google.vr.dynamite.client.INativeLibraryLoader newNativeLibraryLoader(com.google.vr.dynamite.client.IObjectWrapper,com.google.vr.dynamite.client.IObjectWrapper) -> newNativeLibraryLoader
com.google.vr.dynamite.client.b -> com.google.vr.dynamite.client.b:
    void <init>(android.os.IBinder) -> <init>
    long initializeAndLoadNativeLibrary(java.lang.String) -> initializeAndLoadNativeLibrary
    int checkVersion(java.lang.String) -> checkVersion
com.google.vr.dynamite.client.c -> com.google.vr.dynamite.client.c:
    int a -> a
    void <init>(int) -> <init>
    java.lang.String getMessage() -> getMessage
com.google.vr.dynamite.client.d -> com.google.vr.dynamite.client.d:
    java.lang.String a -> a
    java.lang.String b -> b
    void <init>(java.lang.String,java.lang.String) -> <init>
    java.lang.String a() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.vr.dynamite.client.e -> com.google.vr.dynamite.client.e:
    android.content.Context a -> a
    com.google.vr.dynamite.client.ILoadedInstanceCreator b -> b
    com.google.vr.dynamite.client.d c -> c
    void <init>(com.google.vr.dynamite.client.d) -> <init>
    com.google.vr.dynamite.client.ILoadedInstanceCreator a(android.content.Context) -> a
    android.content.Context b(android.content.Context) -> b
    android.os.IBinder a(java.lang.ClassLoader,java.lang.String) -> a
com.google.vr.dynamite.client.f -> com.google.vr.dynamite.client.f:
    int a -> a
    int b -> b
    int c -> c
    void <init>(int,int,int) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.rexraphael.flutterunitywidget.FlutterUnityView -> com.a.a.a:
    android.content.Context context -> e
    com.rexraphael.flutterunitywidget.UnityView unityView -> a
    io.flutter.plugin.common.MethodChannel channel -> b
    io.flutter.plugin.common.PluginRegistry$Registrar registrar -> c
    android.app.Activity activity -> d
    void <init>(android.content.Context,io.flutter.plugin.common.PluginRegistry$Registrar,int) -> <init>
    void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> a
    android.view.View getView() -> a
    void dispose() -> b
    com.rexraphael.flutterunitywidget.UnityView getUnityView(io.flutter.plugin.common.PluginRegistry$Registrar) -> a
com.rexraphael.flutterunitywidget.FlutterUnityView$1 -> com.a.a.a$1:
    io.flutter.plugin.common.MethodChannel$Result val$result -> a
    com.rexraphael.flutterunitywidget.FlutterUnityView this$0 -> b
    void <init>(com.rexraphael.flutterunitywidget.FlutterUnityView,io.flutter.plugin.common.MethodChannel$Result) -> <init>
    void onReady() -> a
com.rexraphael.flutterunitywidget.FlutterUnityView$2 -> com.a.a.a$2:
    com.rexraphael.flutterunitywidget.UnityView val$view -> a
    com.rexraphael.flutterunitywidget.FlutterUnityView this$0 -> b
    void <init>(com.rexraphael.flutterunitywidget.FlutterUnityView,com.rexraphael.flutterunitywidget.UnityView) -> <init>
    void onReady() -> a
com.rexraphael.flutterunitywidget.FlutterUnityViewFactory -> com.a.a.b:
    io.flutter.plugin.common.PluginRegistry$Registrar mPluginRegistrar -> a
    void <init>(io.flutter.plugin.common.PluginRegistry$Registrar) -> <init>
    io.flutter.plugin.platform.PlatformView create(android.content.Context,int,java.lang.Object) -> a
com.rexraphael.flutterunitywidget.FlutterUnityWidgetPlugin -> com.a.a.c:
    void registerWith(io.flutter.plugin.common.PluginRegistry$Registrar) -> a
com.rexraphael.flutterunitywidget.UnityEventListener -> com.a.a.d:
com.rexraphael.flutterunitywidget.UnityUtils -> com.a.a.e:
    boolean isAR -> a
    com.unity3d.player.UnityPlayer unityPlayer -> b
    boolean _isUnityReady -> c
    boolean _isUnityPaused -> d
    java.util.concurrent.CopyOnWriteArraySet mUnityEventListeners -> e
    com.unity3d.player.UnityPlayer getPlayer() -> a
    boolean isUnityReady() -> b
    void createPlayer(android.app.Activity,com.rexraphael.flutterunitywidget.UnityUtils$CreateCallback) -> a
    void postMessage(java.lang.String,java.lang.String,java.lang.String) -> a
    void pause() -> c
    void resume() -> d
    void addUnityEventListener(com.rexraphael.flutterunitywidget.UnityEventListener) -> a
    void addUnityViewToBackground(android.app.Activity) -> a
    void addUnityViewToGroup(android.view.ViewGroup) -> a
    com.unity3d.player.UnityPlayer access$002(com.unity3d.player.UnityPlayer) -> a
    com.unity3d.player.UnityPlayer access$000() -> e
    boolean access$102(boolean) -> a
    void <clinit>() -> <clinit>
com.rexraphael.flutterunitywidget.UnityUtils$1 -> com.a.a.e$1:
    android.app.Activity val$activity -> a
    com.rexraphael.flutterunitywidget.UnityUtils$CreateCallback val$callback -> b
    void <init>(android.app.Activity,com.rexraphael.flutterunitywidget.UnityUtils$CreateCallback) -> <init>
    void run() -> run
com.rexraphael.flutterunitywidget.UnityUtils$CreateCallback -> com.a.a.e$a:
    void onReady() -> a
com.rexraphael.flutterunitywidget.UnityView -> com.a.a.f:
    com.unity3d.player.UnityPlayer view -> a
    void <init>(android.content.Context) -> <init>
    void setUnityPlayer(com.unity3d.player.UnityPlayer) -> setUnityPlayer
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    boolean dispatchTouchEvent(android.view.MotionEvent) -> dispatchTouchEvent
    void onDetachedFromWindow() -> onDetachedFromWindow
com.unity3d.player.AudioVolumeHandler -> com.unity3d.player.AudioVolumeHandler:
    com.unity3d.player.a a -> a
    void onAudioVolumeChanged(int) -> onAudioVolumeChanged
    void <init>(android.content.Context) -> <init>
    void a() -> a
com.unity3d.player.BuildConfig -> com.unity3d.player.BuildConfig:
    boolean DEBUG -> DEBUG
    java.lang.String APPLICATION_ID -> APPLICATION_ID
    java.lang.String BUILD_TYPE -> BUILD_TYPE
    java.lang.String FLAVOR -> FLAVOR
    int VERSION_CODE -> VERSION_CODE
    java.lang.String VERSION_NAME -> VERSION_NAME
    void <init>() -> <init>
com.unity3d.player.Camera2Wrapper -> com.unity3d.player.Camera2Wrapper:
    android.content.Context a -> a
    com.unity3d.player.b b -> b
    int c -> c
    void <init>(android.content.Context) -> <init>
    void a() -> a
    void initCamera2Jni() -> initCamera2Jni
    void deinitCamera2Jni() -> deinitCamera2Jni
    void nativeFrameReady(java.lang.Object,java.lang.Object,java.lang.Object,int,int,int) -> nativeFrameReady
    void nativeSurfaceTextureReady(java.lang.Object) -> nativeSurfaceTextureReady
    int getCamera2Count() -> getCamera2Count
    int getCamera2SensorOrientation(int) -> getCamera2SensorOrientation
    boolean isCamera2FrontFacing(int) -> isCamera2FrontFacing
    int[] getCamera2Resolutions(int) -> getCamera2Resolutions
    boolean initializeCamera2(int,int,int,int,int) -> initializeCamera2
    boolean isCamera2AutoFocusPointSupported(int) -> isCamera2AutoFocusPointSupported
    boolean setAutoFocusPoint(float,float) -> setAutoFocusPoint
    android.graphics.Rect getFrameSizeCamera2() -> getFrameSizeCamera2
    void closeCamera2() -> closeCamera2
    void startCamera2() -> startCamera2
    void pauseCamera2() -> pauseCamera2
    void stopCamera2() -> stopCamera2
    int a(float) -> a
    java.lang.Object getCameraFocusArea(float,float) -> getCameraFocusArea
    void a(java.lang.Object,java.lang.Object,java.lang.Object,int,int,int) -> a
    void a(java.lang.Object) -> a
com.unity3d.player.GoogleARCoreApi -> com.unity3d.player.GoogleARCoreApi:
    void <init>() -> <init>
    void initializeARCore(android.app.Activity) -> initializeARCore
    void pauseARCore() -> pauseARCore
    void resumeARCore() -> resumeARCore
com.unity3d.player.GoogleVrApi -> com.unity3d.player.GoogleVrApi:
    java.util.concurrent.atomic.AtomicReference a -> a
    void <init>() -> <init>
    void a(com.unity3d.player.f) -> a
    void a() -> a
    com.unity3d.player.GoogleVrProxy b() -> b
    com.unity3d.player.GoogleVrVideo getGoogleVrVideo() -> getGoogleVrVideo
    void <clinit>() -> <clinit>
com.unity3d.player.GoogleVrProxy -> com.unity3d.player.GoogleVrProxy:
    boolean f -> f
    boolean g -> g
    java.lang.Runnable h -> h
    java.util.Vector i -> i
    android.view.SurfaceView j -> j
    com.unity3d.player.GoogleVrProxy$a k -> k
    java.lang.Thread l -> l
    android.os.Handler m -> m
    void <init>(com.unity3d.player.f) -> <init>
    void a(boolean) -> a
    boolean d() -> d
    boolean a() -> a
    void a(android.content.Intent) -> a
    void e() -> e
    void pauseGvrLayout() -> pauseGvrLayout
    void b() -> b
    void resumeGvrLayout() -> resumeGvrLayout
    boolean a(android.app.Activity,android.content.Context,android.view.SurfaceView,java.lang.Runnable) -> a
    long loadGoogleVr(boolean,boolean,boolean,boolean,boolean) -> loadGoogleVr
    void setGoogleVrModeEnabled(boolean) -> setGoogleVrModeEnabled
    void unloadGoogleVr() -> unloadGoogleVr
    int getVideoSurfaceId() -> getVideoSurfaceId
    java.lang.Object getVideoSurface() -> getVideoSurface
    void registerGoogleVrVideoListener(com.unity3d.player.GoogleVrVideo$GoogleVrVideoCallbacks) -> registerGoogleVrVideoListener
    void deregisterGoogleVrVideoListener(com.unity3d.player.GoogleVrVideo$GoogleVrVideoCallbacks) -> deregisterGoogleVrVideoListener
    void setVideoLocationTransform(float[]) -> setVideoLocationTransform
    void c() -> c
    boolean a(java.lang.ClassLoader) -> a
    boolean f() -> f
    void initVrJni() -> initVrJni
    void setVrVideoTransform(float[][]) -> setVrVideoTransform
    boolean isQuiting() -> isQuiting
    java.util.Vector a(com.unity3d.player.GoogleVrProxy) -> a
    java.lang.Runnable b(com.unity3d.player.GoogleVrProxy) -> b
    com.unity3d.player.GoogleVrProxy$a c(com.unity3d.player.GoogleVrProxy) -> c
    boolean d(com.unity3d.player.GoogleVrProxy) -> d
    void a(com.unity3d.player.GoogleVrProxy,boolean) -> a
com.unity3d.player.GoogleVrProxy$1 -> com.unity3d.player.GoogleVrProxy$1:
    com.unity3d.player.GoogleVrProxy a -> a
    void <init>(com.unity3d.player.GoogleVrProxy,android.os.Looper) -> <init>
    void handleMessage(android.os.Message) -> handleMessage
com.unity3d.player.GoogleVrProxy$2 -> com.unity3d.player.GoogleVrProxy$2:
    java.util.concurrent.atomic.AtomicLong a -> a
    boolean b -> b
    boolean c -> c
    boolean d -> d
    boolean e -> e
    boolean f -> f
    com.unity3d.player.GoogleVrProxy g -> g
    void <init>(com.unity3d.player.GoogleVrProxy,java.util.concurrent.atomic.AtomicLong,boolean,boolean,boolean,boolean,boolean) -> <init>
    void run() -> run
com.unity3d.player.GoogleVrProxy$3 -> com.unity3d.player.GoogleVrProxy$3:
    boolean a -> a
    com.unity3d.player.GoogleVrProxy b -> b
    void <init>(com.unity3d.player.GoogleVrProxy,boolean) -> <init>
    void run() -> run
com.unity3d.player.GoogleVrProxy$4 -> com.unity3d.player.GoogleVrProxy$4:
    com.unity3d.player.GoogleVrProxy a -> a
    void <init>(com.unity3d.player.GoogleVrProxy) -> <init>
    void run() -> run
com.unity3d.player.GoogleVrProxy$a -> com.unity3d.player.GoogleVrProxy$a:
    boolean a -> a
    boolean b -> b
    boolean c -> c
    boolean d -> d
    boolean e -> e
    boolean f -> f
    com.unity3d.player.GoogleVrProxy g -> g
    void <init>(com.unity3d.player.GoogleVrProxy) -> <init>
    boolean a() -> a
    void b() -> b
com.unity3d.player.GoogleVrVideo -> com.unity3d.player.GoogleVrVideo:
    void registerGoogleVrVideoListener(com.unity3d.player.GoogleVrVideo$GoogleVrVideoCallbacks) -> registerGoogleVrVideoListener
    void deregisterGoogleVrVideoListener(com.unity3d.player.GoogleVrVideo$GoogleVrVideoCallbacks) -> deregisterGoogleVrVideoListener
    void setVideoLocationTransform(float[]) -> setVideoLocationTransform
com.unity3d.player.GoogleVrVideo$GoogleVrVideoCallbacks -> com.unity3d.player.GoogleVrVideo$GoogleVrVideoCallbacks:
    void onSurfaceAvailable(android.view.Surface) -> onSurfaceAvailable
    void onSurfaceUnavailable() -> onSurfaceUnavailable
    void onFrameAvailable() -> onFrameAvailable
com.unity3d.player.HFPStatus -> com.unity3d.player.HFPStatus:
    android.content.Context a -> a
    android.content.BroadcastReceiver b -> b
    android.content.Intent c -> c
    boolean d -> d
    android.media.AudioManager e -> e
    int f -> f
    void initHFPStatusJni() -> initHFPStatusJni
    void deinitHFPStatusJni() -> deinitHFPStatusJni
    void <init>(android.content.Context) -> <init>
    void a() -> a
    void requestHFPStat() -> requestHFPStat
    boolean getHFPStat() -> getHFPStat
    boolean a(com.unity3d.player.HFPStatus) -> a
    android.media.AudioManager b(com.unity3d.player.HFPStatus) -> b
    boolean a(com.unity3d.player.HFPStatus,boolean) -> a
    int a(com.unity3d.player.HFPStatus,int) -> a
    int c(com.unity3d.player.HFPStatus) -> c
com.unity3d.player.HFPStatus$1 -> com.unity3d.player.HFPStatus$1:
    com.unity3d.player.HFPStatus a -> a
    void <init>(com.unity3d.player.HFPStatus) -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.unity3d.player.HFPStatus$a -> com.unity3d.player.HFPStatus$a:
    int a -> a
    int b -> b
    int c -> c
    int[] d -> d
    void <clinit>() -> <clinit>
com.unity3d.player.IUnityPlayerLifecycleEvents -> com.unity3d.player.IUnityPlayerLifecycleEvents:
    void onUnityPlayerUnloaded() -> onUnityPlayerUnloaded
    void onUnityPlayerQuitted() -> onUnityPlayerQuitted
com.unity3d.player.NativeLoader -> com.unity3d.player.NativeLoader:
    boolean load(java.lang.String) -> load
    boolean unload() -> unload
com.unity3d.player.NetworkConnectivity -> com.unity3d.player.NetworkConnectivity:
    int a -> a
    int b -> b
    int c -> c
    int d -> d
    android.net.ConnectivityManager e -> e
    android.net.ConnectivityManager$NetworkCallback f -> f
    int a() -> a
    void <init>(android.content.Context) -> <init>
    void b() -> b
    int a(com.unity3d.player.NetworkConnectivity,int) -> a
com.unity3d.player.NetworkConnectivity$1 -> com.unity3d.player.NetworkConnectivity$1:
    com.unity3d.player.NetworkConnectivity a -> a
    void <init>(com.unity3d.player.NetworkConnectivity) -> <init>
    void onAvailable(android.net.Network) -> onAvailable
    void onCapabilitiesChanged(android.net.Network,android.net.NetworkCapabilities) -> onCapabilitiesChanged
    void onUnavailable() -> onUnavailable
    void onLost(android.net.Network) -> onLost
com.unity3d.player.R -> com.unity3d.player.R:
    void <init>() -> <init>
com.unity3d.player.R$drawable -> com.unity3d.player.R$drawable:
    int app_banner -> app_banner
    void <init>() -> <init>
com.unity3d.player.R$id -> com.unity3d.player.R$id:
    int __arcore_cancelButton -> __arcore_cancelButton
    int __arcore_continueButton -> __arcore_continueButton
    int __arcore_messageText -> __arcore_messageText
    void <init>() -> <init>
com.unity3d.player.R$layout -> com.unity3d.player.R$layout:
    int __arcore_education -> __arcore_education
    void <init>() -> <init>
com.unity3d.player.R$mipmap -> com.unity3d.player.R$mipmap:
    int app_icon -> app_icon
    int app_icon_round -> app_icon_round
    int ic_launcher_background -> ic_launcher_background
    int ic_launcher_foreground -> ic_launcher_foreground
    void <init>() -> <init>
com.unity3d.player.R$raw -> com.unity3d.player.R$raw:
    int keep -> keep
    void <init>() -> <init>
com.unity3d.player.R$string -> com.unity3d.player.R$string:
    int __arcore_cancel -> __arcore_cancel
    int __arcore_continue -> __arcore_continue
    int __arcore_install_app -> __arcore_install_app
    int __arcore_install_feature -> __arcore_install_feature
    int __arcore_installing -> __arcore_installing
    int app_name -> app_name
    int game_view_content_description -> game_view_content_description
    void <init>() -> <init>
com.unity3d.player.R$style -> com.unity3d.player.R$style:
    int BaseUnityTheme -> BaseUnityTheme
    int UnityThemeSelector -> UnityThemeSelector
    int UnityThemeSelector_Translucent -> UnityThemeSelector_Translucent
    void <init>() -> <init>
com.unity3d.player.ReflectionHelper -> com.unity3d.player.ReflectionHelper:
    boolean LOG -> LOG
    boolean LOGV -> LOGV
    com.unity3d.player.ReflectionHelper$a[] a -> a
    long b -> b
    void <init>() -> <init>
    boolean a(com.unity3d.player.ReflectionHelper$a) -> a
    void a(com.unity3d.player.ReflectionHelper$a,java.lang.reflect.Member) -> a
    java.lang.reflect.Constructor getConstructorID(java.lang.Class,java.lang.String) -> getConstructorID
    java.lang.reflect.Method getMethodID(java.lang.Class,java.lang.String,java.lang.String,boolean) -> getMethodID
    java.lang.reflect.Field getFieldID(java.lang.Class,java.lang.String,java.lang.String,boolean) -> getFieldID
    java.lang.String getFieldSignature(java.lang.reflect.Field) -> getFieldSignature
    float a(java.lang.Class,java.lang.Class) -> a
    float a(java.lang.Class,java.lang.Class[],java.lang.Class[]) -> a
    java.lang.Class[] a(java.lang.String) -> a
    java.lang.Class a(java.lang.String,int[]) -> a
    java.lang.Object nativeProxyInvoke(long,java.lang.String,java.lang.Object[]) -> nativeProxyInvoke
    void nativeProxyFinalize(long) -> nativeProxyFinalize
    void nativeProxyLogJNIInvokeException(long) -> nativeProxyLogJNIInvokeException
    void endUnityLaunch() -> endUnityLaunch
    java.lang.Object newProxyInstance(long,java.lang.Class) -> newProxyInstance
    void setNativeExceptionOnProxy(java.lang.Object,long,boolean) -> setNativeExceptionOnProxy
    java.lang.Object newProxyInstance(long,java.lang.Class[]) -> newProxyInstance
    long a() -> a
    void a(long) -> a
    java.lang.Object a(long,java.lang.String,java.lang.Object[]) -> a
    void b(long) -> b
    void <clinit>() -> <clinit>
com.unity3d.player.ReflectionHelper$1 -> com.unity3d.player.ReflectionHelper$1:
    long c -> c
    long d -> d
    boolean e -> e
    long a -> a
    java.lang.Class[] b -> b
    void <init>(long,java.lang.Class[]) -> <init>
    java.lang.Object a(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> a
    java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> invoke
    void a(long,boolean) -> a
    void finalize() -> finalize
com.unity3d.player.ReflectionHelper$a -> com.unity3d.player.ReflectionHelper$a:
    java.lang.Class b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    int e -> e
    java.lang.reflect.Member a -> a
    void <init>(java.lang.Class,java.lang.String,java.lang.String) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.unity3d.player.ReflectionHelper$b -> com.unity3d.player.ReflectionHelper$b:
    void a(long,boolean) -> a
com.unity3d.player.UnityPlayer -> com.unity3d.player.UnityPlayer:
    android.app.Activity currentActivity -> currentActivity
    int mInitialScreenOrientation -> mInitialScreenOrientation
    boolean mMainDisplayOverride -> mMainDisplayOverride
    boolean mIsFullscreen -> mIsFullscreen
    com.unity3d.player.n mState -> mState
    java.util.concurrent.ConcurrentLinkedQueue m_Events -> m_Events
    android.content.BroadcastReceiver mKillingIsMyBusiness -> mKillingIsMyBusiness
    int ANR_TIMEOUT_SECONDS -> ANR_TIMEOUT_SECONDS
    int RUN_STATE_CHANGED_MSG_CODE -> RUN_STATE_CHANGED_MSG_CODE
    com.unity3d.player.UnityPlayer$e m_MainThread -> m_MainThread
    boolean m_AddPhoneCallListener -> m_AddPhoneCallListener
    com.unity3d.player.UnityPlayer$c m_PhoneCallListener -> m_PhoneCallListener
    android.telephony.TelephonyManager m_TelephonyManager -> m_TelephonyManager
    android.content.ClipboardManager m_ClipboardManager -> m_ClipboardManager
    com.unity3d.player.l m_SplashScreen -> m_SplashScreen
    com.unity3d.player.GoogleARCoreApi m_ARCoreApi -> m_ARCoreApi
    com.unity3d.player.UnityPlayer$a m_FakeListener -> m_FakeListener
    com.unity3d.player.Camera2Wrapper m_Camera2Wrapper -> m_Camera2Wrapper
    com.unity3d.player.HFPStatus m_HFPStatus -> m_HFPStatus
    com.unity3d.player.AudioVolumeHandler m_AudioVolumeHandler -> m_AudioVolumeHandler
    android.net.Uri m_launchUri -> m_launchUri
    com.unity3d.player.NetworkConnectivity m_NetworkConnectivity -> m_NetworkConnectivity
    com.unity3d.player.IUnityPlayerLifecycleEvents m_UnityPlayerLifecycleEvents -> m_UnityPlayerLifecycleEvents
    android.content.Context mContext -> mContext
    android.view.SurfaceView mGlView -> mGlView
    boolean mQuitting -> mQuitting
    boolean mProcessKillRequested -> mProcessKillRequested
    com.unity3d.player.q mVideoPlayerProxy -> mVideoPlayerProxy
    com.unity3d.player.k mSoftInputDialog -> mSoftInputDialog
    java.lang.String SPLASH_ENABLE_METADATA_NAME -> SPLASH_ENABLE_METADATA_NAME
    java.lang.String SPLASH_MODE_METADATA_NAME -> SPLASH_MODE_METADATA_NAME
    java.lang.String TANGO_ENABLE_METADATA_NAME -> TANGO_ENABLE_METADATA_NAME
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,com.unity3d.player.IUnityPlayerLifecycleEvents) -> <init>
    void onUnityPlayerUnloaded() -> onUnityPlayerUnloaded
    void onUnityPlayerQuitted() -> onUnityPlayerQuitted
    void toggleGyroscopeSensor(boolean) -> toggleGyroscopeSensor
    java.lang.String GetGlViewContentDescription(android.content.Context) -> GetGlViewContentDescription
    void DisableStaticSplashScreen() -> DisableStaticSplashScreen
    void EarlyEnableFullScreenIfVrLaunched(android.app.Activity) -> EarlyEnableFullScreenIfVrLaunched
    boolean IsWindowTranslucent() -> IsWindowTranslucent
    android.view.SurfaceView CreateGlView() -> CreateGlView
    void sendSurfaceChangedEvent() -> sendSurfaceChangedEvent
    void updateGLDisplay(int,android.view.Surface) -> updateGLDisplay
    boolean updateDisplayInternal(int,android.view.Surface) -> updateDisplayInternal
    boolean displayChanged(int,android.view.Surface) -> displayChanged
    void UnitySendMessage(java.lang.String,java.lang.String,java.lang.String) -> UnitySendMessage
    void nativeUnitySendMessage(java.lang.String,java.lang.String,byte[]) -> nativeUnitySendMessage
    void finish() -> finish
    void runOnAnonymousThread(java.lang.Runnable) -> runOnAnonymousThread
    void runOnUiThread(java.lang.Runnable) -> runOnUiThread
    void init(int,boolean) -> init
    android.view.View getView() -> getView
    android.os.Bundle getSettings() -> getSettings
    void quit() -> quit
    void newIntent(android.content.Intent) -> newIntent
    void destroy() -> destroy
    void pause() -> pause
    void pauseUnity() -> pauseUnity
    void resume() -> resume
    void lowMemory() -> lowMemory
    void shutdown() -> shutdown
    void unload() -> unload
    void checkResumePlayer() -> checkResumePlayer
    boolean skipPermissionsDialog() -> skipPermissionsDialog
    void requestUserAuthorization(java.lang.String) -> requestUserAuthorization
    int getNetworkConnectivity() -> getNetworkConnectivity
    void configurationChanged(android.content.res.Configuration) -> configurationChanged
    void windowFocusChanged(boolean) -> windowFocusChanged
    boolean loadLibraryStatic(java.lang.String) -> loadLibraryStatic
    boolean loadLibrary(java.lang.String) -> loadLibrary
    void addPhoneCallListener() -> addPhoneCallListener
    void initJni(android.content.Context) -> initJni
    boolean nativeRender() -> nativeRender
    void nativeSetInputArea(int,int,int,int) -> nativeSetInputArea
    void nativeSetKeyboardIsVisible(boolean) -> nativeSetKeyboardIsVisible
    void nativeSetInputString(java.lang.String) -> nativeSetInputString
    void nativeSetInputSelection(int,int) -> nativeSetInputSelection
    void nativeSoftInputCanceled() -> nativeSoftInputCanceled
    void nativeSoftInputLostFocus() -> nativeSoftInputLostFocus
    void nativeReportKeyboardConfigChanged() -> nativeReportKeyboardConfigChanged
    boolean nativePause() -> nativePause
    void nativeResume() -> nativeResume
    void nativeLowMemory() -> nativeLowMemory
    void nativeApplicationUnload() -> nativeApplicationUnload
    void nativeFocusChanged(boolean) -> nativeFocusChanged
    void nativeRecreateGfxState(int,android.view.Surface) -> nativeRecreateGfxState
    void nativeSendSurfaceChangedEvent() -> nativeSendSurfaceChangedEvent
    boolean nativeDone() -> nativeDone
    void nativeSoftInputClosed() -> nativeSoftInputClosed
    boolean nativeInjectEvent(android.view.InputEvent) -> nativeInjectEvent
    boolean nativeIsAutorotationOn() -> nativeIsAutorotationOn
    void nativeMuteMasterAudio(boolean) -> nativeMuteMasterAudio
    void nativeRestartActivityIndicator() -> nativeRestartActivityIndicator
    void nativeSetLaunchURL(java.lang.String) -> nativeSetLaunchURL
    void loadNative(android.content.pm.ApplicationInfo) -> loadNative
    void unloadNative() -> unloadNative
    void showSoftInput(java.lang.String,int,boolean,boolean,boolean,boolean,java.lang.String,int,boolean) -> showSoftInput
    void hideSoftInput() -> hideSoftInput
    void setSoftInputStr(java.lang.String) -> setSoftInputStr
    void setCharacterLimit(int) -> setCharacterLimit
    void setHideInputField(boolean) -> setHideInputField
    void setSelection(int,int) -> setSelection
    java.lang.String getKeyboardLayout() -> getKeyboardLayout
    void reportSoftInputStr(java.lang.String,int,boolean) -> reportSoftInputStr
    void reportSoftInputSelection(int,int) -> reportSoftInputSelection
    void reportSoftInputArea(android.graphics.Rect) -> reportSoftInputArea
    void reportSoftInputIsVisible(boolean) -> reportSoftInputIsVisible
    void setClipboardText(java.lang.String) -> setClipboardText
    java.lang.String getClipboardText() -> getClipboardText
    java.lang.String getLaunchURL() -> getLaunchURL
    boolean initializeGoogleAr() -> initializeGoogleAr
    boolean initializeGoogleVr() -> initializeGoogleVr
    boolean showVideoPlayer(java.lang.String,int,int,int,boolean,int,int) -> showVideoPlayer
    void notifyOnUnityPlayerUnloaded() -> notifyOnUnityPlayerUnloaded
    android.content.pm.ApplicationInfo getApplicationInfo() -> getApplicationInfo
    boolean getSplashEnabled() -> getSplashEnabled
    boolean getTangoEnabled() -> getTangoEnabled
    int getSplashMode() -> getSplashMode
    void executeGLThreadJobs() -> executeGLThreadJobs
    void disableLogger() -> disableLogger
    void queueGLThreadEvent(java.lang.Runnable) -> queueGLThreadEvent
    void queueGLThreadEvent(com.unity3d.player.UnityPlayer$f) -> queueGLThreadEvent
    boolean isFinishing() -> isFinishing
    void hideStatusBar() -> hideStatusBar
    boolean injectEvent(android.view.InputEvent) -> injectEvent
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onKeyMultiple(int,int,android.view.KeyEvent) -> onKeyMultiple
    boolean onKeyLongPress(int,android.view.KeyEvent) -> onKeyLongPress
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean onGenericMotionEvent(android.view.MotionEvent) -> onGenericMotionEvent
    void swapViews(android.view.View,android.view.View) -> swapViews
    boolean addViewToPlayer(android.view.View,boolean) -> addViewToPlayer
    void removeViewFromPlayer(android.view.View) -> removeViewFromPlayer
    void reportError(java.lang.String,java.lang.String) -> reportError
    void access$000(com.unity3d.player.UnityPlayer,boolean) -> access$000
    boolean access$100(com.unity3d.player.UnityPlayer) -> access$100
    void access$200(com.unity3d.player.UnityPlayer) -> access$200
    boolean access$300(com.unity3d.player.UnityPlayer) -> access$300
    void access$400(com.unity3d.player.UnityPlayer) -> access$400
    void access$500(com.unity3d.player.UnityPlayer,java.lang.String) -> access$500
    void access$700(com.unity3d.player.UnityPlayer,boolean) -> access$700
    com.unity3d.player.l access$900(com.unity3d.player.UnityPlayer) -> access$900
    com.unity3d.player.l access$902(com.unity3d.player.UnityPlayer,com.unity3d.player.l) -> access$902
    void access$1000(com.unity3d.player.UnityPlayer,int,android.view.Surface) -> access$1000
    void access$1100(com.unity3d.player.UnityPlayer) -> access$1100
    void access$1200(com.unity3d.player.UnityPlayer) -> access$1200
    void access$1300(com.unity3d.player.UnityPlayer,int,android.view.Surface) -> access$1300
    boolean access$1400(com.unity3d.player.UnityPlayer) -> access$1400
    android.view.SurfaceView access$1500(com.unity3d.player.UnityPlayer) -> access$1500
    void access$1600(com.unity3d.player.UnityPlayer) -> access$1600
    boolean access$1700(com.unity3d.player.UnityPlayer) -> access$1700
    boolean access$1802(com.unity3d.player.UnityPlayer,boolean) -> access$1802
    void access$1900(com.unity3d.player.UnityPlayer) -> access$1900
    void access$2000(com.unity3d.player.UnityPlayer) -> access$2000
    android.content.Context access$2100(com.unity3d.player.UnityPlayer) -> access$2100
    void access$2200(com.unity3d.player.UnityPlayer) -> access$2200
    void access$2400(com.unity3d.player.UnityPlayer) -> access$2400
    void access$2500(com.unity3d.player.UnityPlayer,java.lang.String) -> access$2500
    void access$2600(com.unity3d.player.UnityPlayer) -> access$2600
    void access$2700(com.unity3d.player.UnityPlayer,int,int) -> access$2700
    void access$2800(com.unity3d.player.UnityPlayer,int,int,int,int) -> access$2800
    void access$2900(com.unity3d.player.UnityPlayer,boolean) -> access$2900
    android.view.SurfaceView access$3000(com.unity3d.player.UnityPlayer) -> access$3000
    com.unity3d.player.q access$3102(com.unity3d.player.UnityPlayer,com.unity3d.player.q) -> access$3102
    boolean access$3200(com.unity3d.player.UnityPlayer) -> access$3200
    int access$3300(com.unity3d.player.UnityPlayer) -> access$3300
    com.unity3d.player.IUnityPlayerLifecycleEvents access$3400(com.unity3d.player.UnityPlayer) -> access$3400
    void <clinit>() -> <clinit>
com.unity3d.player.UnityPlayer$1 -> com.unity3d.player.UnityPlayer$1:
    com.unity3d.player.UnityPlayer a -> a
    void <init>(com.unity3d.player.UnityPlayer) -> <init>
    void onClick(android.content.DialogInterface,int) -> onClick
com.unity3d.player.UnityPlayer$10 -> com.unity3d.player.UnityPlayer$10:
    int a -> a
    int b -> b
    com.unity3d.player.UnityPlayer c -> c
    void <init>(com.unity3d.player.UnityPlayer,int,int) -> <init>
    void run() -> run
com.unity3d.player.UnityPlayer$11 -> com.unity3d.player.UnityPlayer$11:
    boolean a -> a
    java.lang.String b -> b
    int c -> c
    com.unity3d.player.UnityPlayer d -> d
    void <init>(com.unity3d.player.UnityPlayer,boolean,java.lang.String,int) -> <init>
    void a() -> a
com.unity3d.player.UnityPlayer$12 -> com.unity3d.player.UnityPlayer$12:
    int a -> a
    int b -> b
    com.unity3d.player.UnityPlayer c -> c
    void <init>(com.unity3d.player.UnityPlayer,int,int) -> <init>
    void a() -> a
com.unity3d.player.UnityPlayer$13 -> com.unity3d.player.UnityPlayer$13:
    android.graphics.Rect a -> a
    com.unity3d.player.UnityPlayer b -> b
    void <init>(com.unity3d.player.UnityPlayer,android.graphics.Rect) -> <init>
    void a() -> a
com.unity3d.player.UnityPlayer$14 -> com.unity3d.player.UnityPlayer$14:
    boolean a -> a
    com.unity3d.player.UnityPlayer b -> b
    void <init>(com.unity3d.player.UnityPlayer,boolean) -> <init>
    void a() -> a
com.unity3d.player.UnityPlayer$15 -> com.unity3d.player.UnityPlayer$15:
    com.unity3d.player.UnityPlayer a -> a
    void <init>(com.unity3d.player.UnityPlayer) -> <init>
    void run() -> run
com.unity3d.player.UnityPlayer$16 -> com.unity3d.player.UnityPlayer$16:
    com.unity3d.player.GoogleVrProxy a -> a
    java.lang.Runnable b -> b
    java.util.concurrent.Semaphore c -> c
    com.unity3d.player.UnityPlayer d -> d
    void <init>(com.unity3d.player.UnityPlayer,com.unity3d.player.GoogleVrProxy,java.lang.Runnable,java.util.concurrent.Semaphore) -> <init>
    void run() -> run
com.unity3d.player.UnityPlayer$17 -> com.unity3d.player.UnityPlayer$17:
    com.unity3d.player.UnityPlayer a -> a
    void <init>(com.unity3d.player.UnityPlayer) -> <init>
    void a() -> a
com.unity3d.player.UnityPlayer$18 -> com.unity3d.player.UnityPlayer$18:
    com.unity3d.player.UnityPlayer a -> a
    void <init>(com.unity3d.player.UnityPlayer) -> <init>
    void run() -> run
com.unity3d.player.UnityPlayer$19 -> com.unity3d.player.UnityPlayer$19:
    com.unity3d.player.UnityPlayer a -> a
    void <init>(com.unity3d.player.UnityPlayer) -> <init>
    void run() -> run
com.unity3d.player.UnityPlayer$2 -> com.unity3d.player.UnityPlayer$2:
    com.unity3d.player.UnityPlayer a -> a
    void <init>(com.unity3d.player.UnityPlayer) -> <init>
    void run() -> run
com.unity3d.player.UnityPlayer$20 -> com.unity3d.player.UnityPlayer$20:
    com.unity3d.player.UnityPlayer a -> a
    void <init>(com.unity3d.player.UnityPlayer) -> <init>
    void run() -> run
com.unity3d.player.UnityPlayer$21 -> com.unity3d.player.UnityPlayer$21:
    com.unity3d.player.UnityPlayer a -> a
    void <init>(com.unity3d.player.UnityPlayer) -> <init>
    void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
    void surfaceChanged(android.view.SurfaceHolder,int,int,int) -> surfaceChanged
    void surfaceDestroyed(android.view.SurfaceHolder) -> surfaceDestroyed
com.unity3d.player.UnityPlayer$22 -> com.unity3d.player.UnityPlayer$22:
    com.unity3d.player.UnityPlayer a -> a
    void <init>(com.unity3d.player.UnityPlayer) -> <init>
    void run() -> run
com.unity3d.player.UnityPlayer$23 -> com.unity3d.player.UnityPlayer$23:
    int a -> a
    android.view.Surface b -> b
    java.util.concurrent.Semaphore c -> c
    com.unity3d.player.UnityPlayer d -> d
    void <init>(com.unity3d.player.UnityPlayer,int,android.view.Surface,java.util.concurrent.Semaphore) -> <init>
    void run() -> run
com.unity3d.player.UnityPlayer$24 -> com.unity3d.player.UnityPlayer$24:
    com.unity3d.player.UnityPlayer a -> a
    void <init>(com.unity3d.player.UnityPlayer) -> <init>
    void run() -> run
com.unity3d.player.UnityPlayer$25 -> com.unity3d.player.UnityPlayer$25:
    java.util.concurrent.Semaphore a -> a
    com.unity3d.player.UnityPlayer b -> b
    void <init>(com.unity3d.player.UnityPlayer,java.util.concurrent.Semaphore) -> <init>
    void run() -> run
com.unity3d.player.UnityPlayer$26 -> com.unity3d.player.UnityPlayer$26:
    java.util.concurrent.Semaphore a -> a
    com.unity3d.player.UnityPlayer b -> b
    void <init>(com.unity3d.player.UnityPlayer,java.util.concurrent.Semaphore) -> <init>
    void run() -> run
com.unity3d.player.UnityPlayer$3 -> com.unity3d.player.UnityPlayer$3:
    com.unity3d.player.UnityPlayer a -> a
    void <init>(com.unity3d.player.UnityPlayer) -> <init>
    void run() -> run
com.unity3d.player.UnityPlayer$4 -> com.unity3d.player.UnityPlayer$4:
    com.unity3d.player.UnityPlayer a -> a
    java.lang.String b -> b
    int c -> c
    boolean d -> d
    boolean e -> e
    boolean f -> f
    boolean g -> g
    java.lang.String h -> h
    int i -> i
    boolean j -> j
    com.unity3d.player.UnityPlayer k -> k
    void <init>(com.unity3d.player.UnityPlayer,com.unity3d.player.UnityPlayer,java.lang.String,int,boolean,boolean,boolean,boolean,java.lang.String,int,boolean) -> <init>
    void run() -> run
com.unity3d.player.UnityPlayer$5 -> com.unity3d.player.UnityPlayer$5:
    com.unity3d.player.UnityPlayer a -> a
    void <init>(com.unity3d.player.UnityPlayer) -> <init>
    void run() -> run
com.unity3d.player.UnityPlayer$6 -> com.unity3d.player.UnityPlayer$6:
    java.lang.Runnable a -> a
    com.unity3d.player.UnityPlayer b -> b
    void <init>(com.unity3d.player.UnityPlayer,java.lang.Runnable) -> <init>
    void a() -> a
com.unity3d.player.UnityPlayer$7 -> com.unity3d.player.UnityPlayer$7:
    java.lang.String a -> a
    com.unity3d.player.UnityPlayer b -> b
    void <init>(com.unity3d.player.UnityPlayer,java.lang.String) -> <init>
    void run() -> run
com.unity3d.player.UnityPlayer$8 -> com.unity3d.player.UnityPlayer$8:
    int a -> a
    com.unity3d.player.UnityPlayer b -> b
    void <init>(com.unity3d.player.UnityPlayer,int) -> <init>
    void run() -> run
com.unity3d.player.UnityPlayer$9 -> com.unity3d.player.UnityPlayer$9:
    boolean a -> a
    com.unity3d.player.UnityPlayer b -> b
    void <init>(com.unity3d.player.UnityPlayer,boolean) -> <init>
    void run() -> run
com.unity3d.player.UnityPlayer$a -> com.unity3d.player.UnityPlayer$a:
    com.unity3d.player.UnityPlayer a -> a
    void <init>(com.unity3d.player.UnityPlayer) -> <init>
    void onAccuracyChanged(android.hardware.Sensor,int) -> onAccuracyChanged
    void onSensorChanged(android.hardware.SensorEvent) -> onSensorChanged
com.unity3d.player.UnityPlayer$b -> com.unity3d.player.UnityPlayer$b:
    int a -> a
    int b -> b
    int c -> c
    int[] d -> d
    void <clinit>() -> <clinit>
com.unity3d.player.UnityPlayer$c -> com.unity3d.player.UnityPlayer$c:
    com.unity3d.player.UnityPlayer a -> a
    void <init>(com.unity3d.player.UnityPlayer) -> <init>
    void onCallStateChanged(int,java.lang.String) -> onCallStateChanged
    void <init>(com.unity3d.player.UnityPlayer,byte) -> <init>
com.unity3d.player.UnityPlayer$d -> com.unity3d.player.UnityPlayer$d:
    com.unity3d.player.UnityPlayer$d a -> a
    com.unity3d.player.UnityPlayer$d b -> b
    com.unity3d.player.UnityPlayer$d c -> c
    com.unity3d.player.UnityPlayer$d d -> d
    com.unity3d.player.UnityPlayer$d e -> e
    com.unity3d.player.UnityPlayer$d f -> f
    com.unity3d.player.UnityPlayer$d g -> g
    com.unity3d.player.UnityPlayer$d h -> h
    com.unity3d.player.UnityPlayer$d i -> i
    com.unity3d.player.UnityPlayer$d[] j -> j
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.unity3d.player.UnityPlayer$e -> com.unity3d.player.UnityPlayer$e:
    android.os.Handler a -> a
    boolean b -> b
    boolean c -> c
    int d -> d
    int e -> e
    int f -> f
    com.unity3d.player.UnityPlayer g -> g
    void <init>(com.unity3d.player.UnityPlayer) -> <init>
    void run() -> run
    void a() -> a
    void b() -> b
    void a(java.lang.Runnable) -> a
    void c() -> c
    void d() -> d
    void b(java.lang.Runnable) -> b
    void c(java.lang.Runnable) -> c
    void d(java.lang.Runnable) -> d
    void e() -> e
    void a(com.unity3d.player.UnityPlayer$d) -> a
    void <init>(com.unity3d.player.UnityPlayer,byte) -> <init>
com.unity3d.player.UnityPlayer$e$1 -> com.unity3d.player.UnityPlayer$e$1:
    com.unity3d.player.UnityPlayer$e a -> a
    void <init>(com.unity3d.player.UnityPlayer$e) -> <init>
    void a() -> a
    boolean handleMessage(android.os.Message) -> handleMessage
com.unity3d.player.UnityPlayer$f -> com.unity3d.player.UnityPlayer$f:
    com.unity3d.player.UnityPlayer e -> e
    void <init>(com.unity3d.player.UnityPlayer) -> <init>
    void run() -> run
    void a() -> a
    void <init>(com.unity3d.player.UnityPlayer,byte) -> <init>
com.unity3d.player.UnityPlayerActivity -> com.unity3d.player.UnityPlayerActivity:
    com.unity3d.player.UnityPlayer mUnityPlayer -> mUnityPlayer
    void <init>() -> <init>
    java.lang.String updateUnityCommandLineArguments(java.lang.String) -> updateUnityCommandLineArguments
    void onCreate(android.os.Bundle) -> onCreate
    void onUnityPlayerUnloaded() -> onUnityPlayerUnloaded
    void onUnityPlayerQuitted() -> onUnityPlayerQuitted
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onDestroy() -> onDestroy
    void onPause() -> onPause
    void onResume() -> onResume
    void onLowMemory() -> onLowMemory
    void onTrimMemory(int) -> onTrimMemory
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean onGenericMotionEvent(android.view.MotionEvent) -> onGenericMotionEvent
com.unity3d.player.a -> com.unity3d.player.a:
    android.content.Context a -> a
    android.media.AudioManager b -> b
    com.unity3d.player.a$a c -> c
    void <init>(android.content.Context) -> <init>
    void a(com.unity3d.player.a$b) -> a
    void a() -> a
com.unity3d.player.a$a -> com.unity3d.player.a$a:
    com.unity3d.player.a$b b -> b
    android.media.AudioManager c -> c
    int d -> d
    int e -> e
    com.unity3d.player.a a -> a
    void <init>(com.unity3d.player.a,android.os.Handler,android.media.AudioManager,int,com.unity3d.player.a$b) -> <init>
    void onChange(boolean,android.net.Uri) -> onChange
    boolean deliverSelfNotifications() -> deliverSelfNotifications
com.unity3d.player.a$b -> com.unity3d.player.a$b:
    void onAudioVolumeChanged(int) -> onAudioVolumeChanged
com.unity3d.player.b -> com.unity3d.player.b:
    com.unity3d.player.d a -> a
    android.hardware.camera2.CameraManager b -> b
    java.lang.String[] c -> c
    android.hardware.camera2.CameraDevice d -> d
    java.util.concurrent.Semaphore e -> e
    android.os.HandlerThread f -> f
    android.os.Handler g -> g
    android.graphics.Rect h -> h
    android.graphics.Rect i -> i
    int j -> j
    int k -> k
    float l -> l
    float m -> m
    int n -> n
    int o -> o
    boolean p -> p
    android.util.Range q -> q
    android.media.ImageReader r -> r
    android.media.Image s -> s
    android.hardware.camera2.CaptureRequest$Builder t -> t
    android.hardware.camera2.CameraCaptureSession u -> u
    java.lang.Object v -> v
    int w -> w
    android.graphics.SurfaceTexture x -> x
    android.view.Surface y -> y
    int z -> z
    android.hardware.camera2.CameraCaptureSession$CaptureCallback A -> A
    android.hardware.camera2.CameraDevice$StateCallback B -> B
    android.media.ImageReader$OnImageAvailableListener C -> C
    android.graphics.SurfaceTexture$OnFrameAvailableListener D -> D
    void <init>(com.unity3d.player.d) -> <init>
    android.hardware.camera2.CameraManager b(android.content.Context) -> b
    java.lang.String[] c(android.content.Context) -> c
    int a(android.content.Context) -> a
    int a(android.content.Context,int) -> a
    boolean b(android.content.Context,int) -> b
    boolean c(android.content.Context,int) -> c
    android.util.Size[] a(android.hardware.camera2.CameraCharacteristics) -> a
    int[] d(android.content.Context,int) -> d
    void g() -> g
    void h() -> h
    boolean a(android.content.Context,int,int,int,int,int) -> a
    void b(android.hardware.camera2.CameraCharacteristics) -> b
    boolean a(float,float) -> a
    android.graphics.Rect a() -> a
    void b() -> b
    void i() -> i
    void a(java.lang.Object) -> a
    void j() -> j
    void k() -> k
    void c() -> c
    void d() -> d
    void e() -> e
    void a(android.hardware.camera2.CameraDevice) -> a
    android.graphics.Rect a(android.util.Size[],double,double) -> a
    int a(android.util.Range[],int) -> a
    void a(com.unity3d.player.b,java.lang.Object) -> a
    android.hardware.camera2.CameraDevice a(com.unity3d.player.b) -> a
    java.lang.Object b(com.unity3d.player.b) -> b
    android.hardware.camera2.CameraCaptureSession a(com.unity3d.player.b,android.hardware.camera2.CameraCaptureSession) -> a
    android.hardware.camera2.CaptureRequest$Builder a(com.unity3d.player.b,android.hardware.camera2.CaptureRequest$Builder) -> a
    android.view.Surface c(com.unity3d.player.b) -> c
    android.hardware.camera2.CaptureRequest$Builder d(com.unity3d.player.b) -> d
    android.media.ImageReader e(com.unity3d.player.b) -> e
    android.util.Range f(com.unity3d.player.b) -> f
    void g(com.unity3d.player.b) -> g
    android.hardware.camera2.CameraDevice a(com.unity3d.player.b,android.hardware.camera2.CameraDevice) -> a
    java.util.concurrent.Semaphore f() -> f
    void b(com.unity3d.player.b,android.hardware.camera2.CameraDevice) -> b
    com.unity3d.player.d h(com.unity3d.player.b) -> h
    android.media.Image i(com.unity3d.player.b) -> i
    android.media.Image a(com.unity3d.player.b,android.media.Image) -> a
    void <clinit>() -> <clinit>
com.unity3d.player.b$1 -> com.unity3d.player.b$1:
    com.unity3d.player.b a -> a
    void <init>(com.unity3d.player.b) -> <init>
    void onCaptureCompleted(android.hardware.camera2.CameraCaptureSession,android.hardware.camera2.CaptureRequest,android.hardware.camera2.TotalCaptureResult) -> onCaptureCompleted
    void onCaptureFailed(android.hardware.camera2.CameraCaptureSession,android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureFailure) -> onCaptureFailed
    void onCaptureSequenceCompleted(android.hardware.camera2.CameraCaptureSession,int,long) -> onCaptureSequenceCompleted
    void onCaptureSequenceAborted(android.hardware.camera2.CameraCaptureSession,int) -> onCaptureSequenceAborted
com.unity3d.player.b$2 -> com.unity3d.player.b$2:
    com.unity3d.player.b a -> a
    void <init>(com.unity3d.player.b) -> <init>
    void onConfigured(android.hardware.camera2.CameraCaptureSession) -> onConfigured
    void onConfigureFailed(android.hardware.camera2.CameraCaptureSession) -> onConfigureFailed
com.unity3d.player.b$3 -> com.unity3d.player.b$3:
    com.unity3d.player.b a -> a
    void <init>(com.unity3d.player.b) -> <init>
    void onOpened(android.hardware.camera2.CameraDevice) -> onOpened
    void onClosed(android.hardware.camera2.CameraDevice) -> onClosed
    void onDisconnected(android.hardware.camera2.CameraDevice) -> onDisconnected
    void onError(android.hardware.camera2.CameraDevice,int) -> onError
com.unity3d.player.b$4 -> com.unity3d.player.b$4:
    com.unity3d.player.b a -> a
    void <init>(com.unity3d.player.b) -> <init>
    void onImageAvailable(android.media.ImageReader) -> onImageAvailable
com.unity3d.player.b$5 -> com.unity3d.player.b$5:
    com.unity3d.player.b a -> a
    void <init>(com.unity3d.player.b) -> <init>
    void onFrameAvailable(android.graphics.SurfaceTexture) -> onFrameAvailable
com.unity3d.player.b$a -> com.unity3d.player.b$a:
    int a -> a
    int b -> b
    int c -> c
    int[] d -> d
    void <clinit>() -> <clinit>
com.unity3d.player.c -> com.unity3d.player.c:
    com.unity3d.player.o a -> a
    com.unity3d.player.f b -> b
    android.content.Context c -> c
    java.lang.String d -> d
    java.lang.String e -> e
    void <init>(java.lang.String,com.unity3d.player.f) -> <init>
    void runOnUiThread(java.lang.Runnable) -> runOnUiThread
    boolean runOnUiThreadWithSync(java.lang.Runnable) -> runOnUiThreadWithSync
    void reportError(java.lang.String) -> reportError
com.unity3d.player.c$1 -> com.unity3d.player.c$1:
    java.lang.Runnable a -> a
    java.util.concurrent.Semaphore b -> b
    com.unity3d.player.c c -> c
    void <init>(com.unity3d.player.c,java.lang.Runnable,java.util.concurrent.Semaphore) -> <init>
    void run() -> run
com.unity3d.player.d -> com.unity3d.player.d:
    void a(java.lang.Object,java.lang.Object,java.lang.Object,int,int,int) -> a
    void a(java.lang.Object) -> a
com.unity3d.player.e -> com.unity3d.player.e:
    boolean a(android.app.Activity) -> a
    void a(android.app.Activity,java.lang.String) -> a
com.unity3d.player.f -> com.unity3d.player.f:
    boolean addViewToPlayer(android.view.View,boolean) -> addViewToPlayer
    void removeViewFromPlayer(android.view.View) -> removeViewFromPlayer
    void reportError(java.lang.String,java.lang.String) -> reportError
com.unity3d.player.g -> com.unity3d.player.g:
    boolean a -> a
    void Log(int,java.lang.String) -> Log
    void <clinit>() -> <clinit>
com.unity3d.player.h -> com.unity3d.player.h:
    void <init>() -> <init>
    boolean a(android.content.pm.PackageItemInfo) -> a
    boolean a(android.app.Activity) -> a
    void a(android.app.Activity,java.lang.String) -> a
com.unity3d.player.i -> com.unity3d.player.i:
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
    void onRequestPermissionsResult(int,java.lang.String[],int[]) -> onRequestPermissionsResult
com.unity3d.player.j -> com.unity3d.player.j:
    boolean a -> a
    boolean b -> b
    boolean c -> c
    com.unity3d.player.e d -> d
    void <clinit>() -> <clinit>
com.unity3d.player.k -> com.unity3d.player.k:
    android.content.Context a -> a
    com.unity3d.player.UnityPlayer b -> b
    int c -> c
    int d -> d
    void <init>(android.content.Context,com.unity3d.player.UnityPlayer,java.lang.String,int,boolean,boolean,boolean,java.lang.String,int,boolean) -> <init>
    void a(boolean) -> a
    void a(android.widget.EditText,java.lang.String,int,boolean,boolean,boolean,java.lang.String,int) -> a
    void afterTextChanged(android.text.Editable) -> afterTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    int a(int,boolean,boolean,boolean) -> a
    void a(java.lang.String,boolean) -> a
    void onClick(android.view.View) -> onClick
    void onBackPressed() -> onBackPressed
    android.view.View createSoftInputView() -> createSoftInputView
    java.lang.String b() -> b
    void a(java.lang.String) -> a
    void a(int) -> a
    void a(int,int) -> a
    java.lang.String a() -> a
    com.unity3d.player.UnityPlayer a(com.unity3d.player.k) -> a
    java.lang.String b(com.unity3d.player.k) -> b
    void a(com.unity3d.player.k,java.lang.String,boolean) -> a
    android.content.Context c(com.unity3d.player.k) -> c
    void <clinit>() -> <clinit>
com.unity3d.player.k$1 -> com.unity3d.player.k$1:
    android.view.View a -> a
    com.unity3d.player.k b -> b
    void <init>(com.unity3d.player.k,android.view.View) -> <init>
    void onGlobalLayout() -> onGlobalLayout
com.unity3d.player.k$2 -> com.unity3d.player.k$2:
    com.unity3d.player.k a -> a
    void <init>(com.unity3d.player.k) -> <init>
    void onFocusChange(android.view.View,boolean) -> onFocusChange
com.unity3d.player.k$3 -> com.unity3d.player.k$3:
    com.unity3d.player.k a -> a
    void <init>(com.unity3d.player.k,android.content.Context) -> <init>
    boolean onKeyPreIme(int,android.view.KeyEvent) -> onKeyPreIme
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    void onSelectionChanged(int,int) -> onSelectionChanged
com.unity3d.player.k$4 -> com.unity3d.player.k$4:
    com.unity3d.player.k a -> a
    void <init>(com.unity3d.player.k) -> <init>
    boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent) -> onEditorAction
com.unity3d.player.l -> com.unity3d.player.l:
    int a -> a
    int b -> b
    android.graphics.Bitmap c -> c
    android.graphics.Bitmap d -> d
    void <init>(android.content.Context,int) -> <init>
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onDetachedFromWindow() -> onDetachedFromWindow
com.unity3d.player.l$1 -> com.unity3d.player.l$1:
    int[] a -> a
    void <clinit>() -> <clinit>
com.unity3d.player.l$a -> com.unity3d.player.l$a:
    int a -> a
    int b -> b
    int c -> c
    int[] d -> d
    int[] a() -> a
    void <clinit>() -> <clinit>
com.unity3d.player.m -> com.unity3d.player.m:
    java.lang.Thread$UncaughtExceptionHandler a -> a
    void <init>() -> <init>
    boolean a() -> a
    void uncaughtException(java.lang.Thread,java.lang.Throwable) -> uncaughtException
com.unity3d.player.n -> com.unity3d.player.n:
    boolean a -> a
    boolean b -> b
    boolean c -> c
    boolean d -> d
    boolean e -> e
    void <init>() -> <init>
    void a() -> a
    void b() -> b
    boolean c() -> c
    void a(boolean) -> a
    void b(boolean) -> b
    boolean d() -> d
    void c(boolean) -> c
    boolean e() -> e
    void d(boolean) -> d
    boolean f() -> f
    boolean g() -> g
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.unity3d.player.o -> com.unity3d.player.o:
    java.util.HashMap a -> a
    java.lang.Class b -> b
    java.lang.Object c -> c
    void <init>(java.lang.Class,java.lang.Object) -> <init>
    void a(java.lang.String,java.lang.Class[]) -> a
    void a(java.lang.String,com.unity3d.player.o$a) -> a
    java.lang.Object a(java.lang.String,java.lang.Object[]) -> a
com.unity3d.player.o$a -> com.unity3d.player.o$a:
    java.lang.Class[] a -> a
    java.lang.reflect.Method b -> b
    com.unity3d.player.o c -> c
    void <init>(com.unity3d.player.o,java.lang.Class[]) -> <init>
com.unity3d.player.p -> com.unity3d.player.p:
    boolean a -> a
    android.content.Context b -> b
    android.view.SurfaceView c -> c
    android.view.SurfaceHolder d -> d
    java.lang.String e -> e
    int f -> f
    int g -> g
    boolean h -> h
    long i -> i
    long j -> j
    android.widget.FrameLayout k -> k
    android.view.Display l -> l
    int m -> m
    int n -> n
    int o -> o
    int p -> p
    android.media.MediaPlayer q -> q
    android.widget.MediaController r -> r
    boolean s -> s
    boolean t -> t
    int u -> u
    boolean v -> v
    boolean w -> w
    com.unity3d.player.p$a x -> x
    com.unity3d.player.p$b y -> y
    int z -> z
    void b(java.lang.String) -> b
    void <init>(android.content.Context,java.lang.String,int,int,int,boolean,long,long,com.unity3d.player.p$a) -> <init>
    boolean a() -> a
    void a(int) -> a
    void destroyPlayer() -> destroyPlayer
    void c() -> c
    void CancelOnPrepare() -> CancelOnPrepare
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void onBufferingUpdate(android.media.MediaPlayer,int) -> onBufferingUpdate
    void onCompletion(android.media.MediaPlayer) -> onCompletion
    void onVideoSizeChanged(android.media.MediaPlayer,int,int) -> onVideoSizeChanged
    void onPrepared(android.media.MediaPlayer) -> onPrepared
    void surfaceChanged(android.view.SurfaceHolder,int,int,int) -> surfaceChanged
    void surfaceDestroyed(android.view.SurfaceHolder) -> surfaceDestroyed
    void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
    void doCleanUp() -> doCleanUp
    void d() -> d
    void updateVideoLayout() -> updateVideoLayout
    boolean canPause() -> canPause
    boolean canSeekBackward() -> canSeekBackward
    boolean canSeekForward() -> canSeekForward
    int getBufferPercentage() -> getBufferPercentage
    int getCurrentPosition() -> getCurrentPosition
    int getDuration() -> getDuration
    boolean isPlaying() -> isPlaying
    void pause() -> pause
    void seekTo(int) -> seekTo
    void start() -> start
    int getAudioSessionId() -> getAudioSessionId
    boolean b() -> b
    void a(java.lang.String) -> a
    void <clinit>() -> <clinit>
com.unity3d.player.p$a -> com.unity3d.player.p$a:
    void a(int) -> a
com.unity3d.player.p$b -> com.unity3d.player.p$b:
    com.unity3d.player.p b -> b
    boolean c -> c
    com.unity3d.player.p a -> a
    void <init>(com.unity3d.player.p,com.unity3d.player.p) -> <init>
    void run() -> run
    void a() -> a
com.unity3d.player.q -> com.unity3d.player.q:
    com.unity3d.player.UnityPlayer a -> a
    android.content.Context b -> b
    com.unity3d.player.q$a c -> c
    java.util.concurrent.Semaphore d -> d
    java.util.concurrent.locks.Lock e -> e
    com.unity3d.player.p f -> f
    int g -> g
    boolean h -> h
    boolean i -> i
    void <init>(com.unity3d.player.UnityPlayer) -> <init>
    boolean a(android.content.Context,java.lang.String,int,int,int,boolean,long,long,com.unity3d.player.q$a) -> a
    void d() -> d
    void a() -> a
    void b() -> b
    void c() -> c
    void runOnUiThread(java.lang.Runnable) -> runOnUiThread
    com.unity3d.player.p a(com.unity3d.player.q) -> a
    int a(com.unity3d.player.q,int) -> a
    java.util.concurrent.Semaphore b(com.unity3d.player.q) -> b
    com.unity3d.player.p a(com.unity3d.player.q,com.unity3d.player.p) -> a
    android.content.Context c(com.unity3d.player.q) -> c
    java.util.concurrent.locks.Lock d(com.unity3d.player.q) -> d
    boolean e(com.unity3d.player.q) -> e
    void f(com.unity3d.player.q) -> f
    com.unity3d.player.UnityPlayer g(com.unity3d.player.q) -> g
    boolean h(com.unity3d.player.q) -> h
com.unity3d.player.q$1 -> com.unity3d.player.q$1:
    java.lang.String a -> a
    int b -> b
    int c -> c
    int d -> d
    boolean e -> e
    long f -> f
    long g -> g
    com.unity3d.player.q h -> h
    void <init>(com.unity3d.player.q,java.lang.String,int,int,int,boolean,long,long) -> <init>
    void run() -> run
com.unity3d.player.q$1$1 -> com.unity3d.player.q$1$1:
    com.unity3d.player.q$1 a -> a
    void <init>(com.unity3d.player.q$1) -> <init>
    void a(int) -> a
com.unity3d.player.q$1$1$1 -> com.unity3d.player.q$1$1$1:
    com.unity3d.player.q$1$1 a -> a
    void <init>(com.unity3d.player.q$1$1) -> <init>
    void run() -> run
com.unity3d.player.q$2 -> com.unity3d.player.q$2:
    com.unity3d.player.q a -> a
    void <init>(com.unity3d.player.q) -> <init>
    void run() -> run
com.unity3d.player.q$3 -> com.unity3d.player.q$3:
    com.unity3d.player.q a -> a
    void <init>(com.unity3d.player.q) -> <init>
    void run() -> run
com.unity3d.player.q$4 -> com.unity3d.player.q$4:
    com.unity3d.player.q a -> a
    void <init>(com.unity3d.player.q) -> <init>
    void run() -> run
com.unity3d.player.q$a -> com.unity3d.player.q$a:
    void a() -> a
io.flutter.Log -> io.flutter.a:
    int logLevel -> a
    void v(java.lang.String,java.lang.String) -> a
    void d(java.lang.String,java.lang.String) -> b
    void w(java.lang.String,java.lang.String) -> c
    void e(java.lang.String,java.lang.String,java.lang.Throwable) -> a
    void <clinit>() -> <clinit>
io.flutter.app.FlutterActivity -> io.flutter.app.a:
    io.flutter.app.FlutterActivityDelegate delegate -> a
    io.flutter.app.FlutterActivityEvents eventDelegate -> b
    io.flutter.view.FlutterView$Provider viewProvider -> c
    io.flutter.plugin.common.PluginRegistry pluginRegistry -> d
    void <init>() -> <init>
    io.flutter.view.FlutterView createFlutterView(android.content.Context) -> a
    io.flutter.view.FlutterNativeView createFlutterNativeView() -> a
    boolean retainFlutterNativeView() -> b
    boolean hasPlugin(java.lang.String) -> a
    io.flutter.plugin.common.PluginRegistry$Registrar registrarFor(java.lang.String) -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onResume() -> onResume
    void onDestroy() -> onDestroy
    void onBackPressed() -> onBackPressed
    void onStop() -> onStop
    void onPause() -> onPause
    void onPostResume() -> onPostResume
    void onRequestPermissionsResult(int,java.lang.String[],int[]) -> onRequestPermissionsResult
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onUserLeaveHint() -> onUserLeaveHint
    void onTrimMemory(int) -> onTrimMemory
    void onLowMemory() -> onLowMemory
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
io.flutter.app.FlutterActivityDelegate -> io.flutter.app.b:
    android.view.WindowManager$LayoutParams matchParent -> a
    android.app.Activity activity -> b
    io.flutter.app.FlutterActivityDelegate$ViewFactory viewFactory -> c
    io.flutter.view.FlutterView flutterView -> d
    android.view.View launchView -> e
    void <init>(android.app.Activity,io.flutter.app.FlutterActivityDelegate$ViewFactory) -> <init>
    boolean hasPlugin(java.lang.String) -> a
    io.flutter.plugin.common.PluginRegistry$Registrar registrarFor(java.lang.String) -> b
    boolean onRequestPermissionsResult(int,java.lang.String[],int[]) -> a
    boolean onActivityResult(int,int,android.content.Intent) -> a
    void onCreate(android.os.Bundle) -> a
    void onNewIntent(android.content.Intent) -> a
    boolean isDebuggable() -> i
    void onPause() -> a
    void onStart() -> b
    void onResume() -> c
    void onStop() -> d
    void onPostResume() -> e
    void onDestroy() -> f
    boolean onBackPressed() -> g
    void onUserLeaveHint() -> h
    void onTrimMemory(int) -> onTrimMemory
    void onLowMemory() -> onLowMemory
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    java.lang.String[] getArgsFromIntent(android.content.Intent) -> b
    boolean loadIntent(android.content.Intent) -> c
    void runBundle(java.lang.String) -> c
    android.view.View createLaunchView() -> j
    android.graphics.drawable.Drawable getLaunchScreenDrawableFromActivityTheme() -> k
    java.lang.Boolean showSplashScreenUntilFirstFrame() -> l
    void addLaunchView() -> m
    android.view.View access$000(io.flutter.app.FlutterActivityDelegate) -> a
    android.view.View access$002(io.flutter.app.FlutterActivityDelegate,android.view.View) -> a
    io.flutter.view.FlutterView access$100(io.flutter.app.FlutterActivityDelegate) -> b
    void <clinit>() -> <clinit>
io.flutter.app.FlutterActivityDelegate$1 -> io.flutter.app.b$1:
    io.flutter.app.FlutterActivityDelegate this$0 -> a
    void <init>(io.flutter.app.FlutterActivityDelegate) -> <init>
    void onFirstFrame() -> a
io.flutter.app.FlutterActivityDelegate$1$1 -> io.flutter.app.b$1$1:
    io.flutter.app.FlutterActivityDelegate$1 this$1 -> a
    void <init>(io.flutter.app.FlutterActivityDelegate$1) -> <init>
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
io.flutter.app.FlutterActivityDelegate$ViewFactory -> io.flutter.app.b$a:
    io.flutter.view.FlutterView createFlutterView(android.content.Context) -> a
    io.flutter.view.FlutterNativeView createFlutterNativeView() -> a
    boolean retainFlutterNativeView() -> b
io.flutter.app.FlutterActivityEvents -> io.flutter.app.c:
    void onCreate(android.os.Bundle) -> a
    void onNewIntent(android.content.Intent) -> a
    void onPause() -> a
    void onStart() -> b
    void onResume() -> c
    void onPostResume() -> e
    void onDestroy() -> f
    void onStop() -> d
    boolean onBackPressed() -> g
    void onUserLeaveHint() -> h
io.flutter.app.FlutterApplication -> io.flutter.app.FlutterApplication:
    android.app.Activity mCurrentActivity -> a
    void <init>() -> <init>
    void onCreate() -> onCreate
    android.app.Activity getCurrentActivity() -> a
    void setCurrentActivity(android.app.Activity) -> a
io.flutter.app.FlutterPluginRegistry -> io.flutter.app.d:
    android.app.Activity mActivity -> a
    android.content.Context mAppContext -> b
    io.flutter.view.FlutterNativeView mNativeView -> c
    io.flutter.view.FlutterView mFlutterView -> d
    io.flutter.plugin.platform.PlatformViewsController mPlatformViewsController -> e
    java.util.Map mPluginMap -> f
    java.util.List mRequestPermissionsResultListeners -> g
    java.util.List mActivityResultListeners -> h
    java.util.List mNewIntentListeners -> i
    java.util.List mUserLeaveHintListeners -> j
    java.util.List mViewDestroyListeners -> k
    void <init>(io.flutter.view.FlutterNativeView,android.content.Context) -> <init>
    boolean hasPlugin(java.lang.String) -> a
    io.flutter.plugin.common.PluginRegistry$Registrar registrarFor(java.lang.String) -> b
    void attach(io.flutter.view.FlutterView,android.app.Activity) -> a
    void detach() -> a
    void onPreEngineRestart() -> b
    io.flutter.plugin.platform.PlatformViewsController getPlatformViewsController() -> c
    boolean onRequestPermissionsResult(int,java.lang.String[],int[]) -> a
    boolean onActivityResult(int,int,android.content.Intent) -> a
    boolean onNewIntent(android.content.Intent) -> a
    void onUserLeaveHint() -> d
    boolean onViewDestroy(io.flutter.view.FlutterNativeView) -> a
    void destroy() -> e
    android.app.Activity access$000(io.flutter.app.FlutterPluginRegistry) -> a
    android.content.Context access$100(io.flutter.app.FlutterPluginRegistry) -> b
    io.flutter.view.FlutterNativeView access$200(io.flutter.app.FlutterPluginRegistry) -> c
    io.flutter.plugin.platform.PlatformViewsController access$400(io.flutter.app.FlutterPluginRegistry) -> d
io.flutter.app.FlutterPluginRegistry$FlutterRegistrar -> io.flutter.app.d$a:
    java.lang.String pluginKey -> b
    io.flutter.app.FlutterPluginRegistry this$0 -> a
    void <init>(io.flutter.app.FlutterPluginRegistry,java.lang.String) -> <init>
    android.app.Activity activity() -> a
    android.content.Context context() -> b
    io.flutter.plugin.common.BinaryMessenger messenger() -> c
    io.flutter.plugin.platform.PlatformViewRegistry platformViewRegistry() -> d
io.flutter.embedding.android.AndroidKeyProcessor -> io.flutter.embedding.a.a:
    io.flutter.embedding.engine.systemchannels.KeyEventChannel keyEventChannel -> a
    io.flutter.plugin.editing.TextInputPlugin textInputPlugin -> b
    int combiningCharacter -> c
    void <init>(io.flutter.embedding.engine.systemchannels.KeyEventChannel,io.flutter.plugin.editing.TextInputPlugin) -> <init>
    void onKeyUp(android.view.KeyEvent) -> a
    void onKeyDown(android.view.KeyEvent) -> b
    java.lang.Character applyCombiningCharacterToBaseCharacter(int) -> a
io.flutter.embedding.android.AndroidTouchProcessor -> io.flutter.embedding.a.b:
    io.flutter.embedding.engine.renderer.FlutterRenderer renderer -> a
    void <init>(io.flutter.embedding.engine.renderer.FlutterRenderer) -> <init>
    boolean onTouchEvent(android.view.MotionEvent) -> a
    boolean onGenericMotionEvent(android.view.MotionEvent) -> b
    void addPointerForIndex(android.view.MotionEvent,int,int,int,java.nio.ByteBuffer) -> a
    int getPointerChangeForAction(int) -> a
    int getPointerDeviceTypeForToolType(int) -> b
io.flutter.embedding.engine.FlutterEngine -> io.flutter.embedding.engine.a:
io.flutter.embedding.engine.FlutterEngine$EngineLifecycleListener -> io.flutter.embedding.engine.a$a:
    void onPreEngineRestart() -> a
io.flutter.embedding.engine.FlutterJNI -> io.flutter.embedding.engine.FlutterJNI:
    java.lang.String TAG -> TAG
    io.flutter.embedding.engine.FlutterJNI$AsyncWaitForVsyncDelegate asyncWaitForVsyncDelegate -> asyncWaitForVsyncDelegate
    float refreshRateFPS -> refreshRateFPS
    java.lang.String observatoryUri -> observatoryUri
    java.lang.Long nativePlatformViewId -> nativePlatformViewId
    io.flutter.embedding.engine.FlutterJNI$AccessibilityDelegate accessibilityDelegate -> accessibilityDelegate
    io.flutter.embedding.engine.dart.PlatformMessageHandler platformMessageHandler -> platformMessageHandler
    java.util.Set engineLifecycleListeners -> engineLifecycleListeners
    java.util.Set flutterUiDisplayListeners -> flutterUiDisplayListeners
    android.os.Looper mainLooper -> mainLooper
    void nativeInit(android.content.Context,java.lang.String[],java.lang.String,java.lang.String,java.lang.String) -> nativeInit
    void nativeRecordStartTimestamp(long) -> nativeRecordStartTimestamp
    boolean nativeGetIsSoftwareRenderingEnabled() -> nativeGetIsSoftwareRenderingEnabled
    java.lang.String getObservatoryUri() -> getObservatoryUri
    void setRefreshRateFPS(float) -> setRefreshRateFPS
    void setAsyncWaitForVsyncDelegate(io.flutter.embedding.engine.FlutterJNI$AsyncWaitForVsyncDelegate) -> setAsyncWaitForVsyncDelegate
    void asyncWaitForVsync(long) -> asyncWaitForVsync
    void nativeOnVsync(long,long,long) -> nativeOnVsync
    io.flutter.view.FlutterCallbackInformation nativeLookupCallbackInformation(long) -> nativeLookupCallbackInformation
    void <init>() -> <init>
    boolean isAttached() -> isAttached
    void attachToNative(boolean) -> attachToNative
    long nativeAttach(io.flutter.embedding.engine.FlutterJNI,boolean) -> nativeAttach
    void detachFromNativeAndReleaseResources() -> detachFromNativeAndReleaseResources
    void nativeDestroy(long) -> nativeDestroy
    void ensureNotAttachedToNative() -> ensureNotAttachedToNative
    void ensureAttachedToNative() -> ensureAttachedToNative
    void addIsDisplayingFlutterUiListener(io.flutter.embedding.engine.renderer.FlutterUiDisplayListener) -> addIsDisplayingFlutterUiListener
    void removeIsDisplayingFlutterUiListener(io.flutter.embedding.engine.renderer.FlutterUiDisplayListener) -> removeIsDisplayingFlutterUiListener
    void onFirstFrame() -> onFirstFrame
    void onRenderingStopped() -> onRenderingStopped
    void onSurfaceCreated(android.view.Surface) -> onSurfaceCreated
    void nativeSurfaceCreated(long,android.view.Surface) -> nativeSurfaceCreated
    void onSurfaceChanged(int,int) -> onSurfaceChanged
    void nativeSurfaceChanged(long,int,int) -> nativeSurfaceChanged
    void onSurfaceDestroyed() -> onSurfaceDestroyed
    void nativeSurfaceDestroyed(long) -> nativeSurfaceDestroyed
    void setViewportMetrics(float,int,int,int,int,int,int,int,int,int,int,int,int,int,int) -> setViewportMetrics
    void nativeSetViewportMetrics(long,float,int,int,int,int,int,int,int,int,int,int,int,int,int,int) -> nativeSetViewportMetrics
    void dispatchPointerDataPacket(java.nio.ByteBuffer,int) -> dispatchPointerDataPacket
    void nativeDispatchPointerDataPacket(long,java.nio.ByteBuffer,int) -> nativeDispatchPointerDataPacket
    void setAccessibilityDelegate(io.flutter.embedding.engine.FlutterJNI$AccessibilityDelegate) -> setAccessibilityDelegate
    void updateSemantics(java.nio.ByteBuffer,java.lang.String[]) -> updateSemantics
    void updateCustomAccessibilityActions(java.nio.ByteBuffer,java.lang.String[]) -> updateCustomAccessibilityActions
    void dispatchSemanticsAction(int,io.flutter.view.AccessibilityBridge$Action) -> dispatchSemanticsAction
    void dispatchSemanticsAction(int,io.flutter.view.AccessibilityBridge$Action,java.lang.Object) -> dispatchSemanticsAction
    void dispatchSemanticsAction(int,int,java.nio.ByteBuffer,int) -> dispatchSemanticsAction
    void nativeDispatchSemanticsAction(long,int,int,java.nio.ByteBuffer,int) -> nativeDispatchSemanticsAction
    void setSemanticsEnabled(boolean) -> setSemanticsEnabled
    void nativeSetSemanticsEnabled(long,boolean) -> nativeSetSemanticsEnabled
    void setAccessibilityFeatures(int) -> setAccessibilityFeatures
    void nativeSetAccessibilityFeatures(long,int) -> nativeSetAccessibilityFeatures
    void registerTexture(long,android.graphics.SurfaceTexture) -> registerTexture
    void nativeRegisterTexture(long,long,android.graphics.SurfaceTexture) -> nativeRegisterTexture
    void markTextureFrameAvailable(long) -> markTextureFrameAvailable
    void nativeMarkTextureFrameAvailable(long,long) -> nativeMarkTextureFrameAvailable
    void unregisterTexture(long) -> unregisterTexture
    void nativeUnregisterTexture(long,long) -> nativeUnregisterTexture
    void runBundleAndSnapshotFromLibrary(java.lang.String,java.lang.String,java.lang.String,android.content.res.AssetManager) -> runBundleAndSnapshotFromLibrary
    void nativeRunBundleAndSnapshotFromLibrary(long,java.lang.String,java.lang.String,java.lang.String,android.content.res.AssetManager) -> nativeRunBundleAndSnapshotFromLibrary
    void setPlatformMessageHandler(io.flutter.embedding.engine.dart.PlatformMessageHandler) -> setPlatformMessageHandler
    void handlePlatformMessage(java.lang.String,byte[],int) -> handlePlatformMessage
    void handlePlatformMessageResponse(int,byte[]) -> handlePlatformMessageResponse
    void dispatchEmptyPlatformMessage(java.lang.String,int) -> dispatchEmptyPlatformMessage
    void nativeDispatchEmptyPlatformMessage(long,java.lang.String,int) -> nativeDispatchEmptyPlatformMessage
    void dispatchPlatformMessage(java.lang.String,java.nio.ByteBuffer,int,int) -> dispatchPlatformMessage
    void nativeDispatchPlatformMessage(long,java.lang.String,java.nio.ByteBuffer,int,int) -> nativeDispatchPlatformMessage
    void invokePlatformMessageEmptyResponseCallback(int) -> invokePlatformMessageEmptyResponseCallback
    void nativeInvokePlatformMessageEmptyResponseCallback(long,int) -> nativeInvokePlatformMessageEmptyResponseCallback
    void invokePlatformMessageResponseCallback(int,java.nio.ByteBuffer,int) -> invokePlatformMessageResponseCallback
    void nativeInvokePlatformMessageResponseCallback(long,int,java.nio.ByteBuffer,int) -> nativeInvokePlatformMessageResponseCallback
    void addEngineLifecycleListener(io.flutter.embedding.engine.FlutterEngine$EngineLifecycleListener) -> addEngineLifecycleListener
    void removeEngineLifecycleListener(io.flutter.embedding.engine.FlutterEngine$EngineLifecycleListener) -> removeEngineLifecycleListener
    void onPreEngineRestart() -> onPreEngineRestart
    android.graphics.Bitmap getBitmap() -> getBitmap
    android.graphics.Bitmap nativeGetBitmap(long) -> nativeGetBitmap
    void ensureRunningOnMainThread() -> ensureRunningOnMainThread
    void <clinit>() -> <clinit>
io.flutter.embedding.engine.FlutterJNI$AccessibilityDelegate -> io.flutter.embedding.engine.FlutterJNI$a:
    void updateCustomAccessibilityActions(java.nio.ByteBuffer,java.lang.String[]) -> a
    void updateSemantics(java.nio.ByteBuffer,java.lang.String[]) -> b
io.flutter.embedding.engine.FlutterJNI$AsyncWaitForVsyncDelegate -> io.flutter.embedding.engine.FlutterJNI$b:
    void asyncWaitForVsync(long) -> a
io.flutter.embedding.engine.dart.DartExecutor -> io.flutter.embedding.engine.a.a:
    io.flutter.embedding.engine.FlutterJNI flutterJNI -> a
    android.content.res.AssetManager assetManager -> b
    io.flutter.embedding.engine.dart.DartMessenger dartMessenger -> c
    io.flutter.plugin.common.BinaryMessenger binaryMessenger -> d
    boolean isApplicationRunning -> e
    java.lang.String isolateServiceId -> f
    io.flutter.embedding.engine.dart.DartExecutor$IsolateServiceIdListener isolateServiceIdListener -> g
    io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler isolateChannelMessageHandler -> h
    void <init>(io.flutter.embedding.engine.FlutterJNI,android.content.res.AssetManager) -> <init>
    void onAttachedToJNI() -> a
    void onDetachedFromJNI() -> b
    io.flutter.plugin.common.BinaryMessenger getBinaryMessenger() -> c
    void send(java.lang.String,java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> a
    void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler) -> a
    java.lang.String access$002(io.flutter.embedding.engine.dart.DartExecutor,java.lang.String) -> a
    io.flutter.embedding.engine.dart.DartExecutor$IsolateServiceIdListener access$100(io.flutter.embedding.engine.dart.DartExecutor) -> a
    java.lang.String access$000(io.flutter.embedding.engine.dart.DartExecutor) -> b
io.flutter.embedding.engine.dart.DartExecutor$1 -> io.flutter.embedding.engine.a.a$1:
    io.flutter.embedding.engine.dart.DartExecutor this$0 -> a
    void <init>(io.flutter.embedding.engine.dart.DartExecutor) -> <init>
    void onMessage(java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> a
io.flutter.embedding.engine.dart.DartExecutor$DefaultBinaryMessenger -> io.flutter.embedding.engine.a.a$a:
    io.flutter.embedding.engine.dart.DartMessenger messenger -> a
    void <init>(io.flutter.embedding.engine.dart.DartMessenger) -> <init>
    void send(java.lang.String,java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> a
    void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler) -> a
    void <init>(io.flutter.embedding.engine.dart.DartMessenger,io.flutter.embedding.engine.dart.DartExecutor$1) -> <init>
io.flutter.embedding.engine.dart.DartExecutor$IsolateServiceIdListener -> io.flutter.embedding.engine.a.a$b:
    void onIsolateServiceIdAvailable(java.lang.String) -> a
io.flutter.embedding.engine.dart.DartMessenger -> io.flutter.embedding.engine.a.b:
    io.flutter.embedding.engine.FlutterJNI flutterJNI -> a
    java.util.Map messageHandlers -> b
    java.util.Map pendingReplies -> c
    int nextReplyId -> d
    void <init>(io.flutter.embedding.engine.FlutterJNI) -> <init>
    void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler) -> a
    void send(java.lang.String,java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> a
    void handleMessageFromDart(java.lang.String,byte[],int) -> a
    void handlePlatformMessageResponse(int,byte[]) -> a
io.flutter.embedding.engine.dart.DartMessenger$Reply -> io.flutter.embedding.engine.a.b$a:
    io.flutter.embedding.engine.FlutterJNI flutterJNI -> a
    int replyId -> b
    java.util.concurrent.atomic.AtomicBoolean done -> c
    void <init>(io.flutter.embedding.engine.FlutterJNI,int) -> <init>
    void reply(java.nio.ByteBuffer) -> a
io.flutter.embedding.engine.dart.PlatformMessageHandler -> io.flutter.embedding.engine.a.c:
    void handleMessageFromDart(java.lang.String,byte[],int) -> a
    void handlePlatformMessageResponse(int,byte[]) -> a
io.flutter.embedding.engine.loader.FlutterLoader -> io.flutter.embedding.engine.b.a:
    java.lang.String PUBLIC_AOT_SHARED_LIBRARY_NAME -> a
    java.lang.String PUBLIC_VM_SNAPSHOT_DATA_KEY -> b
    java.lang.String PUBLIC_ISOLATE_SNAPSHOT_DATA_KEY -> c
    java.lang.String PUBLIC_FLUTTER_ASSETS_DIR_KEY -> d
    java.lang.String aotSharedLibraryName -> e
    java.lang.String vmSnapshotData -> f
    java.lang.String isolateSnapshotData -> g
    java.lang.String flutterAssetsDir -> h
    io.flutter.embedding.engine.loader.FlutterLoader instance -> i
    boolean initialized -> j
    io.flutter.embedding.engine.loader.ResourceExtractor resourceExtractor -> k
    io.flutter.embedding.engine.loader.FlutterLoader$Settings settings -> l
    void <init>() -> <init>
    io.flutter.embedding.engine.loader.FlutterLoader getInstance() -> a
    void startInitialization(android.content.Context) -> a
    void startInitialization(android.content.Context,io.flutter.embedding.engine.loader.FlutterLoader$Settings) -> a
    void ensureInitializationComplete(android.content.Context,java.lang.String[]) -> a
    android.content.pm.ApplicationInfo getApplicationInfo(android.content.Context) -> b
    void initConfig(android.content.Context) -> c
    void initResources(android.content.Context) -> d
    java.lang.String findAppBundlePath() -> b
    void <clinit>() -> <clinit>
io.flutter.embedding.engine.loader.FlutterLoader$Settings -> io.flutter.embedding.engine.b.a$a:
    java.lang.String logTag -> a
    void <init>() -> <init>
    java.lang.String getLogTag() -> a
io.flutter.embedding.engine.loader.ResourceCleaner -> io.flutter.embedding.engine.b.b:
    android.content.Context mContext -> a
    void <init>(android.content.Context) -> <init>
    void start() -> a
io.flutter.embedding.engine.loader.ResourceCleaner$1 -> io.flutter.embedding.engine.b.b$1:
    io.flutter.embedding.engine.loader.ResourceCleaner this$0 -> a
    void <init>(io.flutter.embedding.engine.loader.ResourceCleaner) -> <init>
    boolean accept(java.io.File,java.lang.String) -> accept
io.flutter.embedding.engine.loader.ResourceCleaner$2 -> io.flutter.embedding.engine.b.b$2:
    io.flutter.embedding.engine.loader.ResourceCleaner$CleanTask val$task -> a
    io.flutter.embedding.engine.loader.ResourceCleaner this$0 -> b
    void <init>(io.flutter.embedding.engine.loader.ResourceCleaner,io.flutter.embedding.engine.loader.ResourceCleaner$CleanTask) -> <init>
    void run() -> run
io.flutter.embedding.engine.loader.ResourceCleaner$CleanTask -> io.flutter.embedding.engine.b.b$a:
    java.io.File[] mFilesToDelete -> a
    void <init>(java.io.File[]) -> <init>
    boolean hasFilesToDelete() -> a
    java.lang.Void doInBackground(java.lang.Void[]) -> a
    void deleteRecursively(java.io.File) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
io.flutter.embedding.engine.loader.ResourceExtractor -> io.flutter.embedding.engine.b.c:
    java.lang.String[] SUPPORTED_ABIS -> a
    java.lang.String mDataDirPath -> b
    java.util.HashSet mResources -> c
    io.flutter.embedding.engine.loader.ResourceExtractor$ExtractTask mExtractTask -> d
    long getVersionCode(android.content.pm.PackageInfo) -> a
    void waitForCompletion() -> a
    java.lang.String[] getExistingTimestamps(java.io.File) -> a
    void deleteFiles(java.lang.String,java.util.HashSet) -> b
    java.lang.String checkTimestamp(java.io.File,android.content.pm.PackageManager,java.lang.String) -> b
    void copy(java.io.InputStream,java.io.OutputStream) -> b
    java.lang.String[] getSupportedAbis() -> b
    java.lang.String access$000(java.io.File,android.content.pm.PackageManager,java.lang.String) -> a
    void access$100(java.lang.String,java.util.HashSet) -> a
    void access$200(java.io.InputStream,java.io.OutputStream) -> a
    void <clinit>() -> <clinit>
io.flutter.embedding.engine.loader.ResourceExtractor$1 -> io.flutter.embedding.engine.b.c$1:
    void <init>() -> <init>
    boolean accept(java.io.File,java.lang.String) -> accept
io.flutter.embedding.engine.loader.ResourceExtractor$ExtractTask -> io.flutter.embedding.engine.b.c$a:
    java.lang.String mDataDirPath -> a
    java.util.HashSet mResources -> b
    android.content.res.AssetManager mAssetManager -> c
    java.lang.String mPackageName -> d
    android.content.pm.PackageManager mPackageManager -> e
    java.lang.Void doInBackground(java.lang.Void[]) -> a
    boolean extractAPK(java.io.File) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference -> io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference:
    androidx.lifecycle.Lifecycle lifecycle -> lifecycle
    void <init>(androidx.lifecycle.Lifecycle) -> <init>
    androidx.lifecycle.Lifecycle getLifecycle() -> getLifecycle
io.flutter.embedding.engine.renderer.FlutterRenderer -> io.flutter.embedding.engine.c.a:
    io.flutter.embedding.engine.FlutterJNI flutterJNI -> a
    java.util.concurrent.atomic.AtomicLong nextTextureId -> b
    boolean isDisplayingFlutterUi -> c
    io.flutter.embedding.engine.renderer.FlutterUiDisplayListener flutterUiDisplayListener -> d
    void <init>(io.flutter.embedding.engine.FlutterJNI) -> <init>
    io.flutter.view.TextureRegistry$SurfaceTextureEntry createSurfaceTexture() -> a
    void dispatchPointerDataPacket(java.nio.ByteBuffer,int) -> a
    void registerTexture(long,android.graphics.SurfaceTexture) -> a
    void markTextureFrameAvailable(long) -> a
    void unregisterTexture(long) -> b
    boolean access$002(io.flutter.embedding.engine.renderer.FlutterRenderer,boolean) -> a
    void access$300(io.flutter.embedding.engine.renderer.FlutterRenderer,long) -> a
    void access$400(io.flutter.embedding.engine.renderer.FlutterRenderer,long) -> b
io.flutter.embedding.engine.renderer.FlutterRenderer$1 -> io.flutter.embedding.engine.c.a$1:
    io.flutter.embedding.engine.renderer.FlutterRenderer this$0 -> a
    void <init>(io.flutter.embedding.engine.renderer.FlutterRenderer) -> <init>
    void onFlutterUiDisplayed() -> a
    void onFlutterUiNoLongerDisplayed() -> b
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry -> io.flutter.embedding.engine.c.a$a:
    long id -> b
    android.graphics.SurfaceTexture surfaceTexture -> c
    boolean released -> d
    android.graphics.SurfaceTexture$OnFrameAvailableListener onFrameListener -> e
    io.flutter.embedding.engine.renderer.FlutterRenderer this$0 -> a
    void <init>(io.flutter.embedding.engine.renderer.FlutterRenderer,long,android.graphics.SurfaceTexture) -> <init>
    android.graphics.SurfaceTexture surfaceTexture() -> a
    long id() -> b
    void release() -> c
    boolean access$100(io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry) -> a
    long access$200(io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry) -> b
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry$1 -> io.flutter.embedding.engine.c.a$a$1:
    io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry this$1 -> a
    void <init>(io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry) -> <init>
    void onFrameAvailable(android.graphics.SurfaceTexture) -> onFrameAvailable
io.flutter.embedding.engine.renderer.FlutterUiDisplayListener -> io.flutter.embedding.engine.c.b:
    void onFlutterUiDisplayed() -> a
    void onFlutterUiNoLongerDisplayed() -> b
io.flutter.embedding.engine.systemchannels.AccessibilityChannel -> io.flutter.embedding.engine.d.a:
    io.flutter.plugin.common.BasicMessageChannel channel -> a
    io.flutter.embedding.engine.FlutterJNI flutterJNI -> b
    io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler handler -> c
    io.flutter.plugin.common.BasicMessageChannel$MessageHandler parsingMessageHandler -> d
    void <init>(io.flutter.embedding.engine.dart.DartExecutor,io.flutter.embedding.engine.FlutterJNI) -> <init>
    void onAndroidAccessibilityEnabled() -> a
    void onAndroidAccessibilityDisabled() -> b
    void setAccessibilityFeatures(int) -> a
    void dispatchSemanticsAction(int,io.flutter.view.AccessibilityBridge$Action) -> a
    void dispatchSemanticsAction(int,io.flutter.view.AccessibilityBridge$Action,java.lang.Object) -> a
    void setAccessibilityMessageHandler(io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler) -> a
    io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler access$000(io.flutter.embedding.engine.systemchannels.AccessibilityChannel) -> a
io.flutter.embedding.engine.systemchannels.AccessibilityChannel$1 -> io.flutter.embedding.engine.d.a$1:
    io.flutter.embedding.engine.systemchannels.AccessibilityChannel this$0 -> a
    void <init>(io.flutter.embedding.engine.systemchannels.AccessibilityChannel) -> <init>
    void onMessage(java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply) -> a
io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler -> io.flutter.embedding.engine.d.a$a:
    void announce(java.lang.String) -> a
    void onTap(int) -> a
    void onLongPress(int) -> b
    void onTooltip(java.lang.String) -> b
io.flutter.embedding.engine.systemchannels.KeyEventChannel -> io.flutter.embedding.engine.d.b:
    io.flutter.plugin.common.BasicMessageChannel channel -> a
    void <init>(io.flutter.embedding.engine.dart.DartExecutor) -> <init>
    void keyUp(io.flutter.embedding.engine.systemchannels.KeyEventChannel$FlutterKeyEvent) -> a
    void keyDown(io.flutter.embedding.engine.systemchannels.KeyEventChannel$FlutterKeyEvent) -> b
    void encodeKeyEvent(io.flutter.embedding.engine.systemchannels.KeyEventChannel$FlutterKeyEvent,java.util.Map) -> a
io.flutter.embedding.engine.systemchannels.KeyEventChannel$FlutterKeyEvent -> io.flutter.embedding.engine.d.b$a:
    int deviceId -> a
    int flags -> b
    int plainCodePoint -> c
    int codePoint -> d
    int keyCode -> e
    java.lang.Character complexCharacter -> f
    int scanCode -> g
    int metaState -> h
    int source -> i
    int vendorId -> j
    int productId -> k
    int repeatCount -> l
    void <init>(android.view.KeyEvent,java.lang.Character) -> <init>
    void <init>(int,int,int,int,int,java.lang.Character,int,int,int,int) -> <init>
io.flutter.embedding.engine.systemchannels.LifecycleChannel -> io.flutter.embedding.engine.d.c:
    io.flutter.plugin.common.BasicMessageChannel channel -> a
    void <init>(io.flutter.embedding.engine.dart.DartExecutor) -> <init>
    void appIsInactive() -> a
    void appIsResumed() -> b
    void appIsPaused() -> c
io.flutter.embedding.engine.systemchannels.LocalizationChannel -> io.flutter.embedding.engine.d.d:
    io.flutter.plugin.common.MethodChannel channel -> a
    void <init>(io.flutter.embedding.engine.dart.DartExecutor) -> <init>
    void sendLocales(java.util.List) -> a
io.flutter.embedding.engine.systemchannels.NavigationChannel -> io.flutter.embedding.engine.d.e:
    io.flutter.plugin.common.MethodChannel channel -> a
    void <init>(io.flutter.embedding.engine.dart.DartExecutor) -> <init>
    void setInitialRoute(java.lang.String) -> a
    void popRoute() -> a
io.flutter.embedding.engine.systemchannels.PlatformChannel -> io.flutter.embedding.engine.d.f:
    io.flutter.plugin.common.MethodChannel channel -> a
    io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler platformMessageHandler -> c
    io.flutter.plugin.common.MethodChannel$MethodCallHandler parsingMethodCallHandler -> b
    void <init>(io.flutter.embedding.engine.dart.DartExecutor) -> <init>
    void setPlatformMessageHandler(io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler) -> a
    int decodeOrientations(org.json.JSONArray) -> a
    java.util.ArrayList decodeExclusionRects(org.json.JSONArray) -> b
    java.util.ArrayList encodeExclusionRects(java.util.List) -> a
    io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription decodeAppSwitcherDescription(org.json.JSONObject) -> a
    java.util.List decodeSystemUiOverlays(org.json.JSONArray) -> c
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle decodeSystemChromeStyle(org.json.JSONObject) -> b
    io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler access$000(io.flutter.embedding.engine.systemchannels.PlatformChannel) -> a
    int access$100(io.flutter.embedding.engine.systemchannels.PlatformChannel,org.json.JSONArray) -> a
    io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription access$200(io.flutter.embedding.engine.systemchannels.PlatformChannel,org.json.JSONObject) -> a
    java.util.List access$300(io.flutter.embedding.engine.systemchannels.PlatformChannel,org.json.JSONArray) -> b
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle access$400(io.flutter.embedding.engine.systemchannels.PlatformChannel,org.json.JSONObject) -> b
    java.util.ArrayList access$500(io.flutter.embedding.engine.systemchannels.PlatformChannel,java.util.List) -> a
    java.util.ArrayList access$600(io.flutter.embedding.engine.systemchannels.PlatformChannel,org.json.JSONArray) -> c
io.flutter.embedding.engine.systemchannels.PlatformChannel$1 -> io.flutter.embedding.engine.d.f$1:
    io.flutter.embedding.engine.systemchannels.PlatformChannel this$0 -> a
    void <init>(io.flutter.embedding.engine.systemchannels.PlatformChannel) -> <init>
    void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> a
io.flutter.embedding.engine.systemchannels.PlatformChannel$2 -> io.flutter.embedding.engine.d.f$2:
    int[] $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$DeviceOrientation -> a
    int[] $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$SystemUiOverlay -> b
    void <clinit>() -> <clinit>
io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription -> io.flutter.embedding.engine.d.f$a:
    int color -> a
    java.lang.String label -> b
    void <init>(int,java.lang.String) -> <init>
io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness -> io.flutter.embedding.engine.d.f$b:
    io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness LIGHT -> a
    io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness DARK -> b
    java.lang.String encodedName -> c
    io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness[] $VALUES -> d
    io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness[] values() -> values
    io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness valueOf(java.lang.String) -> valueOf
    io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness fromValue(java.lang.String) -> a
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <clinit>() -> <clinit>
io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat -> io.flutter.embedding.engine.d.f$c:
    io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat PLAIN_TEXT -> a
    java.lang.String encodedName -> b
    io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat[] $VALUES -> c
    io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat[] values() -> values
    io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat valueOf(java.lang.String) -> valueOf
    io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat fromValue(java.lang.String) -> a
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <clinit>() -> <clinit>
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation -> io.flutter.embedding.engine.d.f$d:
    io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation PORTRAIT_UP -> a
    io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation PORTRAIT_DOWN -> b
    io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation LANDSCAPE_LEFT -> c
    io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation LANDSCAPE_RIGHT -> d
    java.lang.String encodedName -> e
    io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation[] $VALUES -> f
    io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation[] values() -> values
    io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation valueOf(java.lang.String) -> valueOf
    io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation fromValue(java.lang.String) -> a
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <clinit>() -> <clinit>
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType -> io.flutter.embedding.engine.d.f$e:
    io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType STANDARD -> a
    io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType LIGHT_IMPACT -> b
    io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType MEDIUM_IMPACT -> c
    io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType HEAVY_IMPACT -> d
    io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType SELECTION_CLICK -> e
    java.lang.String encodedName -> f
    io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType[] $VALUES -> g
    io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType[] values() -> values
    io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType valueOf(java.lang.String) -> valueOf
    io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType fromValue(java.lang.String) -> a
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <clinit>() -> <clinit>
io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler -> io.flutter.embedding.engine.d.f$f:
    void playSystemSound(io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType) -> a
    void vibrateHapticFeedback(io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType) -> a
    void setPreferredOrientations(int) -> a
    void setApplicationSwitcherDescription(io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription) -> a
    void showSystemOverlays(java.util.List) -> a
    void restoreSystemUiOverlays() -> a
    void setSystemUiOverlayStyle(io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle) -> a
    void popSystemNavigator() -> b
    java.lang.CharSequence getClipboardData(io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat) -> a
    void setClipboardData(java.lang.String) -> a
    java.util.List getSystemGestureExclusionRects() -> c
    void setSystemGestureExclusionRects(java.util.ArrayList) -> a
io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType -> io.flutter.embedding.engine.d.f$g:
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType CLICK -> a
    java.lang.String encodedName -> b
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType[] $VALUES -> c
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType[] values() -> values
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType valueOf(java.lang.String) -> valueOf
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType fromValue(java.lang.String) -> a
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <clinit>() -> <clinit>
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle -> io.flutter.embedding.engine.d.f$h:
    java.lang.Integer statusBarColor -> a
    io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness statusBarIconBrightness -> b
    java.lang.Integer systemNavigationBarColor -> c
    io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness systemNavigationBarIconBrightness -> d
    java.lang.Integer systemNavigationBarDividerColor -> e
    void <init>(java.lang.Integer,io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness,java.lang.Integer,io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness,java.lang.Integer) -> <init>
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay -> io.flutter.embedding.engine.d.f$i:
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay TOP_OVERLAYS -> a
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay BOTTOM_OVERLAYS -> b
    java.lang.String encodedName -> c
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay[] $VALUES -> d
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay[] values() -> values
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay valueOf(java.lang.String) -> valueOf
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay fromValue(java.lang.String) -> a
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <clinit>() -> <clinit>
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel -> io.flutter.embedding.engine.d.g:
    io.flutter.plugin.common.MethodChannel channel -> a
    io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewsHandler handler -> b
    io.flutter.plugin.common.MethodChannel$MethodCallHandler parsingHandler -> c
    void invokeViewFocused(int) -> a
    java.lang.String detailedExceptionString(java.lang.Exception) -> b
    void <init>(io.flutter.embedding.engine.dart.DartExecutor) -> <init>
    void setPlatformViewsHandler(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewsHandler) -> a
    io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewsHandler access$000(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel) -> a
    java.lang.String access$100(java.lang.Exception) -> a
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$1 -> io.flutter.embedding.engine.d.g$1:
    io.flutter.embedding.engine.systemchannels.PlatformViewsChannel this$0 -> a
    void <init>(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel) -> <init>
    void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> a
    void create(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> b
    void dispose(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> c
    void resize(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> d
    void touch(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> e
    void setDirection(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> f
    void clearFocus(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> g
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$1$1 -> io.flutter.embedding.engine.d.g$1$1:
    io.flutter.plugin.common.MethodChannel$Result val$result -> a
    io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$1 this$1 -> b
    void <init>(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$1,io.flutter.plugin.common.MethodChannel$Result) -> <init>
    void run() -> run
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest -> io.flutter.embedding.engine.d.g$a:
    int viewId -> a
    java.lang.String viewType -> b
    double logicalWidth -> c
    double logicalHeight -> d
    int direction -> e
    java.nio.ByteBuffer params -> f
    void <init>(int,java.lang.String,double,double,int,java.nio.ByteBuffer) -> <init>
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewResizeRequest -> io.flutter.embedding.engine.d.g$b:
    int viewId -> a
    double newLogicalWidth -> b
    double newLogicalHeight -> c
    void <init>(int,double,double) -> <init>
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch -> io.flutter.embedding.engine.d.g$c:
    int viewId -> a
    java.lang.Number downTime -> b
    java.lang.Number eventTime -> c
    int action -> d
    int pointerCount -> e
    java.lang.Object rawPointerPropertiesList -> f
    java.lang.Object rawPointerCoords -> g
    int metaState -> h
    int buttonState -> i
    float xPrecision -> j
    float yPrecision -> k
    int deviceId -> l
    int edgeFlags -> m
    int source -> n
    int flags -> o
    void <init>(int,java.lang.Number,java.lang.Number,int,int,java.lang.Object,java.lang.Object,int,int,float,float,int,int,int,int) -> <init>
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewsHandler -> io.flutter.embedding.engine.d.g$d:
    long createPlatformView(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest) -> a
    void disposePlatformView(int) -> a
    void resizePlatformView(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewResizeRequest,java.lang.Runnable) -> a
    void onTouch(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch) -> a
    void setDirection(int,int) -> a
    void clearFocus(int) -> b
io.flutter.embedding.engine.systemchannels.SettingsChannel -> io.flutter.embedding.engine.d.h:
    io.flutter.plugin.common.BasicMessageChannel channel -> a
    void <init>(io.flutter.embedding.engine.dart.DartExecutor) -> <init>
    io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder startMessage() -> a
io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder -> io.flutter.embedding.engine.d.h$a:
    io.flutter.plugin.common.BasicMessageChannel channel -> a
    java.util.Map message -> b
    void <init>(io.flutter.plugin.common.BasicMessageChannel) -> <init>
    io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder setTextScaleFactor(float) -> a
    io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder setUse24HourFormat(boolean) -> a
    io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder setPlatformBrightness(io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness) -> a
    void send() -> a
io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness -> io.flutter.embedding.engine.d.h$b:
    io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness light -> a
    io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness dark -> b
    java.lang.String name -> c
    io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness[] $VALUES -> d
    io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness[] values() -> values
    io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <clinit>() -> <clinit>
io.flutter.embedding.engine.systemchannels.SystemChannel -> io.flutter.embedding.engine.d.i:
    io.flutter.plugin.common.BasicMessageChannel channel -> a
    void <init>(io.flutter.embedding.engine.dart.DartExecutor) -> <init>
    void sendMemoryPressureWarning() -> a
io.flutter.embedding.engine.systemchannels.TextInputChannel -> io.flutter.embedding.engine.d.j:
    io.flutter.plugin.common.MethodChannel channel -> a
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputMethodHandler textInputMethodHandler -> b
    io.flutter.plugin.common.MethodChannel$MethodCallHandler parsingMethodHandler -> c
    void <init>(io.flutter.embedding.engine.dart.DartExecutor) -> <init>
    void requestExistingInputState() -> a
    void updateEditingState(int,java.lang.String,int,int,int,int) -> a
    void newline(int) -> a
    void go(int) -> b
    void search(int) -> c
    void send(int) -> d
    void done(int) -> e
    void next(int) -> f
    void previous(int) -> g
    void unspecifiedAction(int) -> h
    void setTextInputMethodHandler(io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputMethodHandler) -> a
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputMethodHandler access$000(io.flutter.embedding.engine.systemchannels.TextInputChannel) -> a
io.flutter.embedding.engine.systemchannels.TextInputChannel$1 -> io.flutter.embedding.engine.d.j$1:
    io.flutter.embedding.engine.systemchannels.TextInputChannel this$0 -> a
    void <init>(io.flutter.embedding.engine.systemchannels.TextInputChannel) -> <init>
    void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> a
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration -> io.flutter.embedding.engine.d.j$a:
    boolean obscureText -> a
    boolean autocorrect -> b
    boolean enableSuggestions -> c
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization textCapitalization -> d
    io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType inputType -> e
    java.lang.Integer inputAction -> f
    java.lang.String actionLabel -> g
    io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration fromJson(org.json.JSONObject) -> a
    java.lang.Integer inputActionFromTextInputAction(java.lang.String) -> a
    void <init>(boolean,boolean,boolean,io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization,io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType,java.lang.Integer,java.lang.String) -> <init>
io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType -> io.flutter.embedding.engine.d.j$b:
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType type -> a
    boolean isSigned -> b
    boolean isDecimal -> c
    io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType fromJson(org.json.JSONObject) -> a
    void <init>(io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType,boolean,boolean) -> <init>
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization -> io.flutter.embedding.engine.d.j$c:
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization CHARACTERS -> a
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization WORDS -> b
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization SENTENCES -> c
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization NONE -> d
    java.lang.String encodedName -> e
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization[] $VALUES -> f
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization[] values() -> values
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization valueOf(java.lang.String) -> valueOf
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization fromValue(java.lang.String) -> a
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <clinit>() -> <clinit>
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState -> io.flutter.embedding.engine.d.j$d:
    java.lang.String text -> a
    int selectionStart -> b
    int selectionEnd -> c
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState fromJson(org.json.JSONObject) -> a
    void <init>(java.lang.String,int,int) -> <init>
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputMethodHandler -> io.flutter.embedding.engine.d.j$e:
    void show() -> a
    void hide() -> b
    void setClient(int,io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration) -> a
    void setPlatformViewClient(int) -> a
    void setEditingState(io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState) -> a
    void clearClient() -> c
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType -> io.flutter.embedding.engine.d.j$f:
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType TEXT -> a
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType DATETIME -> b
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType NUMBER -> c
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType PHONE -> d
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType MULTILINE -> e
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType EMAIL_ADDRESS -> f
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType URL -> g
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType VISIBLE_PASSWORD -> h
    java.lang.String encodedName -> i
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType[] $VALUES -> j
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType[] values() -> values
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType valueOf(java.lang.String) -> valueOf
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType fromValue(java.lang.String) -> a
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <clinit>() -> <clinit>
io.flutter.plugin.common.ActivityLifecycleListener -> io.flutter.plugin.a.a:
    void onPostResume() -> a
io.flutter.plugin.common.BasicMessageChannel -> io.flutter.plugin.a.b:
    io.flutter.plugin.common.BinaryMessenger messenger -> a
    java.lang.String name -> b
    io.flutter.plugin.common.MessageCodec codec -> c
    void <init>(io.flutter.plugin.common.BinaryMessenger,java.lang.String,io.flutter.plugin.common.MessageCodec) -> <init>
    void send(java.lang.Object) -> a
    void send(java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply) -> a
    void setMessageHandler(io.flutter.plugin.common.BasicMessageChannel$MessageHandler) -> a
    io.flutter.plugin.common.MessageCodec access$200(io.flutter.plugin.common.BasicMessageChannel) -> a
    java.lang.String access$300(io.flutter.plugin.common.BasicMessageChannel) -> b
io.flutter.plugin.common.BasicMessageChannel$1 -> io.flutter.plugin.a.b$1:
io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler -> io.flutter.plugin.a.b$a:
    io.flutter.plugin.common.BasicMessageChannel$MessageHandler handler -> b
    io.flutter.plugin.common.BasicMessageChannel this$0 -> a
    void <init>(io.flutter.plugin.common.BasicMessageChannel,io.flutter.plugin.common.BasicMessageChannel$MessageHandler) -> <init>
    void onMessage(java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> a
    void <init>(io.flutter.plugin.common.BasicMessageChannel,io.flutter.plugin.common.BasicMessageChannel$MessageHandler,io.flutter.plugin.common.BasicMessageChannel$1) -> <init>
io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler$1 -> io.flutter.plugin.a.b$a$1:
    io.flutter.plugin.common.BinaryMessenger$BinaryReply val$callback -> a
    io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler this$1 -> b
    void <init>(io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> <init>
    void reply(java.lang.Object) -> a
io.flutter.plugin.common.BasicMessageChannel$IncomingReplyHandler -> io.flutter.plugin.a.b$b:
    io.flutter.plugin.common.BasicMessageChannel$Reply callback -> b
    io.flutter.plugin.common.BasicMessageChannel this$0 -> a
    void <init>(io.flutter.plugin.common.BasicMessageChannel,io.flutter.plugin.common.BasicMessageChannel$Reply) -> <init>
    void reply(java.nio.ByteBuffer) -> a
    void <init>(io.flutter.plugin.common.BasicMessageChannel,io.flutter.plugin.common.BasicMessageChannel$Reply,io.flutter.plugin.common.BasicMessageChannel$1) -> <init>
io.flutter.plugin.common.BasicMessageChannel$MessageHandler -> io.flutter.plugin.a.b$c:
    void onMessage(java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply) -> a
io.flutter.plugin.common.BasicMessageChannel$Reply -> io.flutter.plugin.a.b$d:
    void reply(java.lang.Object) -> a
io.flutter.plugin.common.BinaryMessenger -> io.flutter.plugin.a.c:
    void send(java.lang.String,java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> a
    void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler) -> a
io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler -> io.flutter.plugin.a.c$a:
    void onMessage(java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> a
io.flutter.plugin.common.BinaryMessenger$BinaryReply -> io.flutter.plugin.a.c$b:
    void reply(java.nio.ByteBuffer) -> a
io.flutter.plugin.common.FlutterException -> io.flutter.plugin.a.d:
    java.lang.String code -> a
    java.lang.Object details -> b
    void <init>(java.lang.String,java.lang.String,java.lang.Object) -> <init>
io.flutter.plugin.common.JSONMessageCodec -> io.flutter.plugin.a.e:
    io.flutter.plugin.common.JSONMessageCodec INSTANCE -> a
    void <init>() -> <init>
    java.nio.ByteBuffer encodeMessage(java.lang.Object) -> a
    java.lang.Object decodeMessage(java.nio.ByteBuffer) -> a
    void <clinit>() -> <clinit>
io.flutter.plugin.common.JSONMethodCodec -> io.flutter.plugin.a.f:
    io.flutter.plugin.common.JSONMethodCodec INSTANCE -> a
    void <init>() -> <init>
    java.nio.ByteBuffer encodeMethodCall(io.flutter.plugin.common.MethodCall) -> a
    io.flutter.plugin.common.MethodCall decodeMethodCall(java.nio.ByteBuffer) -> a
    java.nio.ByteBuffer encodeSuccessEnvelope(java.lang.Object) -> a
    java.nio.ByteBuffer encodeErrorEnvelope(java.lang.String,java.lang.String,java.lang.Object) -> a
    java.lang.Object decodeEnvelope(java.nio.ByteBuffer) -> b
    java.lang.Object unwrapNull(java.lang.Object) -> b
    void <clinit>() -> <clinit>
io.flutter.plugin.common.JSONUtil -> io.flutter.plugin.a.g:
    java.lang.Object wrap(java.lang.Object) -> a
io.flutter.plugin.common.MessageCodec -> io.flutter.plugin.a.h:
    java.nio.ByteBuffer encodeMessage(java.lang.Object) -> a
    java.lang.Object decodeMessage(java.nio.ByteBuffer) -> a
io.flutter.plugin.common.MethodCall -> io.flutter.plugin.a.i:
    java.lang.String method -> a
    java.lang.Object arguments -> b
    void <init>(java.lang.String,java.lang.Object) -> <init>
    java.lang.Object arguments() -> a
    java.lang.Object argument(java.lang.String) -> a
io.flutter.plugin.common.MethodChannel -> io.flutter.plugin.a.j:
    io.flutter.plugin.common.BinaryMessenger messenger -> a
    java.lang.String name -> b
    io.flutter.plugin.common.MethodCodec codec -> c
    void <init>(io.flutter.plugin.common.BinaryMessenger,java.lang.String) -> <init>
    void <init>(io.flutter.plugin.common.BinaryMessenger,java.lang.String,io.flutter.plugin.common.MethodCodec) -> <init>
    void invokeMethod(java.lang.String,java.lang.Object) -> a
    void invokeMethod(java.lang.String,java.lang.Object,io.flutter.plugin.common.MethodChannel$Result) -> a
    void setMethodCallHandler(io.flutter.plugin.common.MethodChannel$MethodCallHandler) -> a
    io.flutter.plugin.common.MethodCodec access$000(io.flutter.plugin.common.MethodChannel) -> a
    java.lang.String access$100(io.flutter.plugin.common.MethodChannel) -> b
io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler -> io.flutter.plugin.a.j$a:
    io.flutter.plugin.common.MethodChannel$MethodCallHandler handler -> b
    io.flutter.plugin.common.MethodChannel this$0 -> a
    void <init>(io.flutter.plugin.common.MethodChannel,io.flutter.plugin.common.MethodChannel$MethodCallHandler) -> <init>
    void onMessage(java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> a
io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler$1 -> io.flutter.plugin.a.j$a$1:
    io.flutter.plugin.common.BinaryMessenger$BinaryReply val$reply -> a
    io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler this$1 -> b
    void <init>(io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> <init>
    void success(java.lang.Object) -> a
    void error(java.lang.String,java.lang.String,java.lang.Object) -> a
    void notImplemented() -> a
io.flutter.plugin.common.MethodChannel$IncomingResultHandler -> io.flutter.plugin.a.j$b:
    io.flutter.plugin.common.MethodChannel$Result callback -> b
    io.flutter.plugin.common.MethodChannel this$0 -> a
    void <init>(io.flutter.plugin.common.MethodChannel,io.flutter.plugin.common.MethodChannel$Result) -> <init>
    void reply(java.nio.ByteBuffer) -> a
io.flutter.plugin.common.MethodChannel$MethodCallHandler -> io.flutter.plugin.a.j$c:
    void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> a
io.flutter.plugin.common.MethodChannel$Result -> io.flutter.plugin.a.j$d:
    void success(java.lang.Object) -> a
    void error(java.lang.String,java.lang.String,java.lang.Object) -> a
    void notImplemented() -> a
io.flutter.plugin.common.MethodCodec -> io.flutter.plugin.a.k:
    java.nio.ByteBuffer encodeMethodCall(io.flutter.plugin.common.MethodCall) -> a
    io.flutter.plugin.common.MethodCall decodeMethodCall(java.nio.ByteBuffer) -> a
    java.nio.ByteBuffer encodeSuccessEnvelope(java.lang.Object) -> a
    java.nio.ByteBuffer encodeErrorEnvelope(java.lang.String,java.lang.String,java.lang.Object) -> a
    java.lang.Object decodeEnvelope(java.nio.ByteBuffer) -> b
io.flutter.plugin.common.PluginRegistry -> io.flutter.plugin.a.l:
    io.flutter.plugin.common.PluginRegistry$Registrar registrarFor(java.lang.String) -> b
    boolean hasPlugin(java.lang.String) -> a
io.flutter.plugin.common.PluginRegistry$ActivityResultListener -> io.flutter.plugin.a.l$a:
    boolean onActivityResult(int,int,android.content.Intent) -> a
io.flutter.plugin.common.PluginRegistry$NewIntentListener -> io.flutter.plugin.a.l$b:
    boolean onNewIntent(android.content.Intent) -> a
io.flutter.plugin.common.PluginRegistry$Registrar -> io.flutter.plugin.a.l$c:
    android.app.Activity activity() -> a
    android.content.Context context() -> b
    io.flutter.plugin.common.BinaryMessenger messenger() -> c
    io.flutter.plugin.platform.PlatformViewRegistry platformViewRegistry() -> d
io.flutter.plugin.common.PluginRegistry$RequestPermissionsResultListener -> io.flutter.plugin.a.l$d:
    boolean onRequestPermissionsResult(int,java.lang.String[],int[]) -> a
io.flutter.plugin.common.PluginRegistry$UserLeaveHintListener -> io.flutter.plugin.a.l$e:
    void onUserLeaveHint() -> d
io.flutter.plugin.common.PluginRegistry$ViewDestroyListener -> io.flutter.plugin.a.l$f:
    boolean onViewDestroy(io.flutter.view.FlutterNativeView) -> a
io.flutter.plugin.common.StandardMessageCodec -> io.flutter.plugin.a.m:
    io.flutter.plugin.common.StandardMessageCodec INSTANCE -> a
    boolean LITTLE_ENDIAN -> b
    java.nio.charset.Charset UTF8 -> c
    void <init>() -> <init>
    java.nio.ByteBuffer encodeMessage(java.lang.Object) -> a
    java.lang.Object decodeMessage(java.nio.ByteBuffer) -> a
    void writeSize(java.io.ByteArrayOutputStream,int) -> a
    void writeChar(java.io.ByteArrayOutputStream,int) -> b
    void writeInt(java.io.ByteArrayOutputStream,int) -> c
    void writeLong(java.io.ByteArrayOutputStream,long) -> a
    void writeDouble(java.io.ByteArrayOutputStream,double) -> a
    void writeBytes(java.io.ByteArrayOutputStream,byte[]) -> a
    void writeAlignment(java.io.ByteArrayOutputStream,int) -> d
    void writeValue(java.io.ByteArrayOutputStream,java.lang.Object) -> a
    int readSize(java.nio.ByteBuffer) -> b
    byte[] readBytes(java.nio.ByteBuffer) -> c
    void readAlignment(java.nio.ByteBuffer,int) -> a
    java.lang.Object readValue(java.nio.ByteBuffer) -> d
    java.lang.Object readValueOfType(byte,java.nio.ByteBuffer) -> a
    void <clinit>() -> <clinit>
io.flutter.plugin.common.StandardMessageCodec$ExposedByteArrayOutputStream -> io.flutter.plugin.a.m$a:
    void <init>() -> <init>
    byte[] buffer() -> a
io.flutter.plugin.common.StandardMethodCodec -> io.flutter.plugin.a.n:
    io.flutter.plugin.common.StandardMethodCodec INSTANCE -> a
    io.flutter.plugin.common.StandardMessageCodec messageCodec -> b
    void <init>(io.flutter.plugin.common.StandardMessageCodec) -> <init>
    java.nio.ByteBuffer encodeMethodCall(io.flutter.plugin.common.MethodCall) -> a
    io.flutter.plugin.common.MethodCall decodeMethodCall(java.nio.ByteBuffer) -> a
    java.nio.ByteBuffer encodeSuccessEnvelope(java.lang.Object) -> a
    java.nio.ByteBuffer encodeErrorEnvelope(java.lang.String,java.lang.String,java.lang.Object) -> a
    java.lang.Object decodeEnvelope(java.nio.ByteBuffer) -> b
    void <clinit>() -> <clinit>
io.flutter.plugin.common.StringCodec -> io.flutter.plugin.a.o:
    java.nio.charset.Charset UTF8 -> b
    io.flutter.plugin.common.StringCodec INSTANCE -> a
    void <init>() -> <init>
    java.nio.ByteBuffer encodeMessage(java.lang.String) -> a
    java.lang.String decodeMessage(java.nio.ByteBuffer) -> b
    java.lang.Object decodeMessage(java.nio.ByteBuffer) -> a
    java.nio.ByteBuffer encodeMessage(java.lang.Object) -> a
    void <clinit>() -> <clinit>
io.flutter.plugin.editing.InputConnectionAdaptor -> io.flutter.plugin.b.a:
    android.view.View mFlutterView -> a
    int mClient -> b
    io.flutter.embedding.engine.systemchannels.TextInputChannel textInputChannel -> c
    android.text.Editable mEditable -> d
    int mBatchCount -> e
    android.view.inputmethod.InputMethodManager mImm -> f
    android.text.Layout mLayout -> g
    void <init>(android.view.View,int,io.flutter.embedding.engine.systemchannels.TextInputChannel,android.text.Editable) -> <init>
    void updateEditingState() -> a
    android.text.Editable getEditable() -> getEditable
    boolean beginBatchEdit() -> beginBatchEdit
    boolean endBatchEdit() -> endBatchEdit
    boolean commitText(java.lang.CharSequence,int) -> commitText
    boolean deleteSurroundingText(int,int) -> deleteSurroundingText
    boolean setComposingRegion(int,int) -> setComposingRegion
    boolean setComposingText(java.lang.CharSequence,int) -> setComposingText
    boolean setSelection(int,int) -> setSelection
    int clampIndexToEditable(int,android.text.Editable) -> a
    boolean sendKeyEvent(android.view.KeyEvent) -> sendKeyEvent
    boolean performEditorAction(int) -> performEditorAction
io.flutter.plugin.editing.TextInputPlugin -> io.flutter.plugin.b.b:
    android.view.View mView -> a
    android.view.inputmethod.InputMethodManager mImm -> b
    io.flutter.embedding.engine.systemchannels.TextInputChannel textInputChannel -> c
    io.flutter.plugin.editing.TextInputPlugin$InputTarget inputTarget -> d
    io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration configuration -> e
    android.text.Editable mEditable -> f
    boolean mRestartInputPending -> g
    android.view.inputmethod.InputConnection lastInputConnection -> h
    io.flutter.plugin.platform.PlatformViewsController platformViewsController -> i
    boolean restartAlwaysRequired -> j
    boolean isInputConnectionLocked -> k
    void <init>(android.view.View,io.flutter.embedding.engine.dart.DartExecutor,io.flutter.plugin.platform.PlatformViewsController) -> <init>
    android.view.inputmethod.InputMethodManager getInputMethodManager() -> a
    void lockPlatformViewInputConnection() -> b
    void unlockPlatformViewInputConnection() -> c
    int inputTypeFromTextInputType(io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType,boolean,boolean,boolean,io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization) -> a
    android.view.inputmethod.InputConnection createInputConnection(android.view.View,android.view.inputmethod.EditorInfo) -> a
    android.view.inputmethod.InputConnection getLastInputConnection() -> d
    void clearPlatformViewClient(int) -> a
    void showTextInput(android.view.View) -> a
    void hideTextInput(android.view.View) -> b
    void setTextInputClient(int,io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration) -> a
    void setPlatformViewTextInputClient(int) -> b
    void applyStateToSelection(io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState) -> a
    void setTextInputEditingState(android.view.View,io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState) -> a
    boolean isRestartAlwaysRequired() -> e
    void clearTextInputClient() -> f
    android.view.View access$000(io.flutter.plugin.editing.TextInputPlugin) -> a
    void access$100(io.flutter.plugin.editing.TextInputPlugin,android.view.View) -> a
    void access$200(io.flutter.plugin.editing.TextInputPlugin,android.view.View) -> b
    void access$300(io.flutter.plugin.editing.TextInputPlugin,int) -> a
    void access$400(io.flutter.plugin.editing.TextInputPlugin) -> b
io.flutter.plugin.editing.TextInputPlugin$1 -> io.flutter.plugin.b.b$1:
    io.flutter.plugin.editing.TextInputPlugin this$0 -> a
    void <init>(io.flutter.plugin.editing.TextInputPlugin) -> <init>
    void show() -> a
    void hide() -> b
    void setClient(int,io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration) -> a
    void setPlatformViewClient(int) -> a
    void setEditingState(io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState) -> a
    void clearClient() -> c
io.flutter.plugin.editing.TextInputPlugin$InputTarget -> io.flutter.plugin.b.b$a:
    io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type type -> a
    int id -> b
    void <init>(io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type,int) -> <init>
io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type -> io.flutter.plugin.b.b$a$a:
    io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type NO_TARGET -> a
    io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type FRAMEWORK_CLIENT -> b
    io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type PLATFORM_VIEW -> c
    io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type[] $VALUES -> d
    io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type[] values() -> values
    io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
io.flutter.plugin.platform.AccessibilityEventsDelegate -> io.flutter.plugin.platform.a:
    io.flutter.view.AccessibilityBridge accessibilityBridge -> a
    void <init>() -> <init>
    boolean requestSendAccessibilityEvent(android.view.View,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void setAccessibilityBridge(io.flutter.view.AccessibilityBridge) -> a
io.flutter.plugin.platform.PlatformPlugin -> io.flutter.plugin.platform.b:
    android.app.Activity activity -> a
    io.flutter.embedding.engine.systemchannels.PlatformChannel platformChannel -> b
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle currentTheme -> c
    int mEnabledOverlays -> d
    io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler mPlatformMessageHandler -> e
    void <init>(android.app.Activity,io.flutter.embedding.engine.systemchannels.PlatformChannel) -> <init>
    void playSystemSound(io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType) -> a
    void vibrateHapticFeedback(io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType) -> a
    void setSystemChromePreferredOrientations(int) -> a
    void setSystemChromeApplicationSwitcherDescription(io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription) -> a
    void setSystemChromeEnabledSystemUIOverlays(java.util.List) -> a
    void updateSystemUiOverlays() -> a
    void restoreSystemChromeSystemUIOverlays() -> b
    void setSystemChromeSystemUIOverlayStyle(io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle) -> a
    void popSystemNavigator() -> c
    java.lang.CharSequence getClipboardData(io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat) -> a
    void setClipboardData(java.lang.String) -> a
    java.util.List getSystemGestureExclusionRects() -> d
    void setSystemGestureExclusionRects(java.util.ArrayList) -> a
    void access$000(io.flutter.plugin.platform.PlatformPlugin,io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType) -> a
    void access$100(io.flutter.plugin.platform.PlatformPlugin,io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType) -> a
    void access$200(io.flutter.plugin.platform.PlatformPlugin,int) -> a
    void access$300(io.flutter.plugin.platform.PlatformPlugin,io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription) -> a
    void access$400(io.flutter.plugin.platform.PlatformPlugin,java.util.List) -> a
    void access$500(io.flutter.plugin.platform.PlatformPlugin) -> a
    void access$600(io.flutter.plugin.platform.PlatformPlugin,io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle) -> a
    void access$700(io.flutter.plugin.platform.PlatformPlugin) -> b
    java.lang.CharSequence access$800(io.flutter.plugin.platform.PlatformPlugin,io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat) -> a
    void access$900(io.flutter.plugin.platform.PlatformPlugin,java.lang.String) -> a
    java.util.List access$1000(io.flutter.plugin.platform.PlatformPlugin) -> c
    void access$1100(io.flutter.plugin.platform.PlatformPlugin,java.util.ArrayList) -> a
io.flutter.plugin.platform.PlatformPlugin$1 -> io.flutter.plugin.platform.b$1:
    io.flutter.plugin.platform.PlatformPlugin this$0 -> a
    void <init>(io.flutter.plugin.platform.PlatformPlugin) -> <init>
    void playSystemSound(io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType) -> a
    void vibrateHapticFeedback(io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType) -> a
    void setPreferredOrientations(int) -> a
    void setApplicationSwitcherDescription(io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription) -> a
    void showSystemOverlays(java.util.List) -> a
    void restoreSystemUiOverlays() -> a
    void setSystemUiOverlayStyle(io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle) -> a
    void popSystemNavigator() -> b
    java.lang.CharSequence getClipboardData(io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat) -> a
    void setClipboardData(java.lang.String) -> a
    java.util.List getSystemGestureExclusionRects() -> c
    void setSystemGestureExclusionRects(java.util.ArrayList) -> a
io.flutter.plugin.platform.PlatformPlugin$2 -> io.flutter.plugin.platform.b$2:
    int[] $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$HapticFeedbackType -> a
    int[] $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$SystemUiOverlay -> b
    int[] $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$Brightness -> c
    void <clinit>() -> <clinit>
io.flutter.plugin.platform.PlatformView -> io.flutter.plugin.platform.c:
    android.view.View getView() -> a
    void onFlutterViewAttached(android.view.View) -> a
    void dispose() -> b
    void onInputConnectionLocked() -> c
    void onInputConnectionUnlocked() -> d
io.flutter.plugin.platform.PlatformViewFactory -> io.flutter.plugin.platform.d:
    io.flutter.plugin.common.MessageCodec createArgsCodec -> a
    void <init>(io.flutter.plugin.common.MessageCodec) -> <init>
    io.flutter.plugin.platform.PlatformView create(android.content.Context,int,java.lang.Object) -> a
    io.flutter.plugin.common.MessageCodec getCreateArgsCodec() -> a
io.flutter.plugin.platform.PlatformViewRegistry -> io.flutter.plugin.platform.e:
    boolean registerViewFactory(java.lang.String,io.flutter.plugin.platform.PlatformViewFactory) -> a
io.flutter.plugin.platform.PlatformViewRegistryImpl -> io.flutter.plugin.platform.f:
    java.util.Map viewFactories -> a
    void <init>() -> <init>
    boolean registerViewFactory(java.lang.String,io.flutter.plugin.platform.PlatformViewFactory) -> a
    io.flutter.plugin.platform.PlatformViewFactory getFactory(java.lang.String) -> a
io.flutter.plugin.platform.PlatformViewsAccessibilityDelegate -> io.flutter.plugin.platform.g:
    android.view.View getPlatformViewById(java.lang.Integer) -> a
    void attachAccessibilityBridge(io.flutter.view.AccessibilityBridge) -> a
    void detachAccessibiltyBridge() -> a
io.flutter.plugin.platform.PlatformViewsController -> io.flutter.plugin.platform.h:
    io.flutter.plugin.platform.PlatformViewRegistryImpl registry -> b
    android.content.Context context -> c
    android.view.View flutterView -> d
    io.flutter.view.TextureRegistry textureRegistry -> e
    io.flutter.plugin.editing.TextInputPlugin textInputPlugin -> f
    io.flutter.embedding.engine.systemchannels.PlatformViewsChannel platformViewsChannel -> g
    io.flutter.plugin.platform.AccessibilityEventsDelegate accessibilityEventsDelegate -> h
    java.util.HashMap vdControllers -> a
    java.util.HashMap contextToPlatformView -> i
    io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewsHandler channelHandler -> j
    void <init>() -> <init>
    void attach(android.content.Context,io.flutter.view.TextureRegistry,io.flutter.embedding.engine.dart.DartExecutor) -> a
    void detach() -> b
    void attachAccessibilityBridge(io.flutter.view.AccessibilityBridge) -> a
    void detachAccessibiltyBridge() -> a
    void attachTextInputPlugin(io.flutter.plugin.editing.TextInputPlugin) -> a
    boolean checkInputConnectionProxy(android.view.View) -> a
    io.flutter.plugin.platform.PlatformViewRegistry getRegistry() -> c
    void onFlutterViewDestroyed() -> d
    void onPreEngineRestart() -> e
    android.view.View getPlatformViewById(java.lang.Integer) -> a
    void lockInputConnection(io.flutter.plugin.platform.VirtualDisplayController) -> a
    void unlockInputConnection(io.flutter.plugin.platform.VirtualDisplayController) -> b
    boolean validateDirection(int) -> b
    java.util.List parsePointerPropertiesList(java.lang.Object) -> b
    android.view.MotionEvent$PointerProperties parsePointerProperties(java.lang.Object) -> c
    java.util.List parsePointerCoordsList(java.lang.Object,float) -> b
    android.view.MotionEvent$PointerCoords parsePointerCoords(java.lang.Object,float) -> c
    void validateVirtualDisplayDimensions(int,int) -> a
    int toPhysicalPixels(double) -> a
    void flushAllViews() -> f
    boolean access$000(int) -> a
    io.flutter.plugin.platform.PlatformViewRegistryImpl access$100(io.flutter.plugin.platform.PlatformViewsController) -> a
    int access$200(io.flutter.plugin.platform.PlatformViewsController,double) -> a
    void access$300(io.flutter.plugin.platform.PlatformViewsController,int,int) -> a
    io.flutter.view.TextureRegistry access$400(io.flutter.plugin.platform.PlatformViewsController) -> b
    android.content.Context access$500(io.flutter.plugin.platform.PlatformViewsController) -> c
    io.flutter.plugin.platform.AccessibilityEventsDelegate access$600(io.flutter.plugin.platform.PlatformViewsController) -> d
    android.view.View access$700(io.flutter.plugin.platform.PlatformViewsController) -> e
    java.util.HashMap access$800(io.flutter.plugin.platform.PlatformViewsController) -> f
    io.flutter.plugin.editing.TextInputPlugin access$900(io.flutter.plugin.platform.PlatformViewsController) -> g
    void access$1000(io.flutter.plugin.platform.PlatformViewsController,io.flutter.plugin.platform.VirtualDisplayController) -> a
    void access$1100(io.flutter.plugin.platform.PlatformViewsController,io.flutter.plugin.platform.VirtualDisplayController) -> b
    java.util.List access$1200(java.lang.Object) -> a
    java.util.List access$1300(java.lang.Object,float) -> a
    io.flutter.embedding.engine.systemchannels.PlatformViewsChannel access$1400(io.flutter.plugin.platform.PlatformViewsController) -> h
io.flutter.plugin.platform.PlatformViewsController$1 -> io.flutter.plugin.platform.h$1:
    io.flutter.plugin.platform.PlatformViewsController this$0 -> a
    void <init>(io.flutter.plugin.platform.PlatformViewsController) -> <init>
    long createPlatformView(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest) -> a
    void disposePlatformView(int) -> a
    void resizePlatformView(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewResizeRequest,java.lang.Runnable) -> a
    void onTouch(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch) -> a
    void setDirection(int,int) -> a
    void clearFocus(int) -> b
    void ensureValidAndroidVersion() -> a
    void lambda$createPlatformView$0(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest,android.view.View,boolean) -> a
io.flutter.plugin.platform.PlatformViewsController$1$1 -> io.flutter.plugin.platform.h$1$1:
    io.flutter.plugin.platform.VirtualDisplayController val$vdController -> a
    java.lang.Runnable val$onComplete -> b
    io.flutter.plugin.platform.PlatformViewsController$1 this$1 -> c
    void <init>(io.flutter.plugin.platform.PlatformViewsController$1,io.flutter.plugin.platform.VirtualDisplayController,java.lang.Runnable) -> <init>
    void run() -> run
io.flutter.plugin.platform.SingleViewPresentation -> io.flutter.plugin.platform.SingleViewPresentation:
    io.flutter.plugin.platform.PlatformViewFactory viewFactory -> viewFactory
    io.flutter.plugin.platform.AccessibilityEventsDelegate accessibilityEventsDelegate -> accessibilityEventsDelegate
    android.view.View$OnFocusChangeListener focusChangeListener -> focusChangeListener
    int viewId -> viewId
    java.lang.Object createParams -> createParams
    io.flutter.plugin.platform.SingleViewPresentation$AccessibilityDelegatingFrameLayout rootView -> rootView
    android.widget.FrameLayout container -> container
    io.flutter.plugin.platform.SingleViewPresentation$PresentationState state -> state
    boolean startFocused -> startFocused
    void <init>(android.content.Context,android.view.Display,io.flutter.plugin.platform.PlatformViewFactory,io.flutter.plugin.platform.AccessibilityEventsDelegate,int,java.lang.Object,android.view.View$OnFocusChangeListener) -> <init>
    void <init>(android.content.Context,android.view.Display,io.flutter.plugin.platform.AccessibilityEventsDelegate,io.flutter.plugin.platform.SingleViewPresentation$PresentationState,android.view.View$OnFocusChangeListener,boolean) -> <init>
    void onCreate(android.os.Bundle) -> onCreate
    io.flutter.plugin.platform.SingleViewPresentation$PresentationState detachState() -> detachState
    io.flutter.plugin.platform.PlatformView getView() -> getView
io.flutter.plugin.platform.SingleViewPresentation$AccessibilityDelegatingFrameLayout -> io.flutter.plugin.platform.SingleViewPresentation$a:
    io.flutter.plugin.platform.AccessibilityEventsDelegate accessibilityEventsDelegate -> a
    android.view.View embeddedView -> b
    void <init>(android.content.Context,io.flutter.plugin.platform.AccessibilityEventsDelegate,android.view.View) -> <init>
    boolean requestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> requestSendAccessibilityEvent
io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup -> io.flutter.plugin.platform.SingleViewPresentation$b:
    android.graphics.Rect viewBounds -> a
    android.graphics.Rect childRect -> b
    void <init>(android.content.Context) -> <init>
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onMeasure(int,int) -> onMeasure
    int atMost(int) -> a
io.flutter.plugin.platform.SingleViewPresentation$ImmContext -> io.flutter.plugin.platform.SingleViewPresentation$c:
    android.view.inputmethod.InputMethodManager inputMethodManager -> a
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,android.view.inputmethod.InputMethodManager) -> <init>
    java.lang.Object getSystemService(java.lang.String) -> getSystemService
    android.content.Context createDisplayContext(android.view.Display) -> createDisplayContext
io.flutter.plugin.platform.SingleViewPresentation$PresentationContext -> io.flutter.plugin.platform.SingleViewPresentation$d:
    io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler windowManagerHandler -> a
    android.view.WindowManager windowManager -> b
    void <init>(android.content.Context,io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler) -> <init>
    java.lang.Object getSystemService(java.lang.String) -> getSystemService
    android.view.WindowManager getWindowManager() -> a
io.flutter.plugin.platform.SingleViewPresentation$PresentationState -> io.flutter.plugin.platform.SingleViewPresentation$e:
    io.flutter.plugin.platform.PlatformView platformView -> a
    io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler windowManagerHandler -> b
    io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup fakeWindowViewGroup -> c
    void <init>() -> <init>
    io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup access$000(io.flutter.plugin.platform.SingleViewPresentation$PresentationState) -> a
    io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup access$002(io.flutter.plugin.platform.SingleViewPresentation$PresentationState,io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup) -> a
    io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler access$100(io.flutter.plugin.platform.SingleViewPresentation$PresentationState) -> b
    io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler access$102(io.flutter.plugin.platform.SingleViewPresentation$PresentationState,io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler) -> a
    io.flutter.plugin.platform.PlatformView access$200(io.flutter.plugin.platform.SingleViewPresentation$PresentationState) -> c
    io.flutter.plugin.platform.PlatformView access$202(io.flutter.plugin.platform.SingleViewPresentation$PresentationState,io.flutter.plugin.platform.PlatformView) -> a
io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler -> io.flutter.plugin.platform.SingleViewPresentation$f:
    android.view.WindowManager delegate -> b
    io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup fakeWindowRootView -> a
    void <init>(android.view.WindowManager,io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup) -> <init>
    android.view.WindowManager getWindowManager() -> a
    java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> invoke
    void addView(java.lang.Object[]) -> a
    void removeView(java.lang.Object[]) -> b
    void removeViewImmediate(java.lang.Object[]) -> c
    void updateViewLayout(java.lang.Object[]) -> d
io.flutter.plugin.platform.VirtualDisplayController -> io.flutter.plugin.platform.i:
    android.content.Context context -> a
    io.flutter.plugin.platform.AccessibilityEventsDelegate accessibilityEventsDelegate -> b
    int densityDpi -> c
    io.flutter.view.TextureRegistry$SurfaceTextureEntry textureEntry -> d
    android.view.View$OnFocusChangeListener focusChangeListener -> e
    android.hardware.display.VirtualDisplay virtualDisplay -> f
    io.flutter.plugin.platform.SingleViewPresentation presentation -> g
    android.view.Surface surface -> h
    io.flutter.plugin.platform.VirtualDisplayController create(android.content.Context,io.flutter.plugin.platform.AccessibilityEventsDelegate,io.flutter.plugin.platform.PlatformViewFactory,io.flutter.view.TextureRegistry$SurfaceTextureEntry,int,int,int,java.lang.Object,android.view.View$OnFocusChangeListener) -> a
    void <init>(android.content.Context,io.flutter.plugin.platform.AccessibilityEventsDelegate,android.hardware.display.VirtualDisplay,io.flutter.plugin.platform.PlatformViewFactory,android.view.Surface,io.flutter.view.TextureRegistry$SurfaceTextureEntry,android.view.View$OnFocusChangeListener,int,java.lang.Object) -> <init>
    void resize(int,int,java.lang.Runnable) -> a
    void dispose() -> a
    void onFlutterViewAttached(android.view.View) -> a
    void onInputConnectionLocked() -> b
    void onInputConnectionUnlocked() -> c
    android.view.View getView() -> d
io.flutter.plugin.platform.VirtualDisplayController$1 -> io.flutter.plugin.platform.i$1:
    android.view.View val$embeddedView -> a
    java.lang.Runnable val$onNewSizeFrameAvailable -> b
    io.flutter.plugin.platform.VirtualDisplayController this$0 -> c
    void <init>(io.flutter.plugin.platform.VirtualDisplayController,android.view.View,java.lang.Runnable) -> <init>
    void onViewAttachedToWindow(android.view.View) -> onViewAttachedToWindow
    void onViewDetachedFromWindow(android.view.View) -> onViewDetachedFromWindow
io.flutter.plugin.platform.VirtualDisplayController$1$1 -> io.flutter.plugin.platform.i$1$1:
    io.flutter.plugin.platform.VirtualDisplayController$1 this$1 -> a
    void <init>(io.flutter.plugin.platform.VirtualDisplayController$1) -> <init>
    void run() -> run
io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener -> io.flutter.plugin.platform.i$a:
    android.view.View mView -> a
    java.lang.Runnable mOnDrawRunnable -> b
    void schedule(android.view.View,java.lang.Runnable) -> a
    void <init>(android.view.View,java.lang.Runnable) -> <init>
    void onDraw() -> onDraw
io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener$1 -> io.flutter.plugin.platform.i$a$1:
    io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener this$0 -> a
    void <init>(io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener) -> <init>
    void run() -> run
io.flutter.plugins.GeneratedPluginRegistrant -> io.flutter.plugins.a:
    void <init>() -> <init>
    void registerWith(io.flutter.plugin.common.PluginRegistry) -> a
    boolean alreadyRegisteredWith(io.flutter.plugin.common.PluginRegistry) -> b
io.flutter.plugins.urllauncher.MethodCallHandlerImpl -> io.flutter.plugins.urllauncher.a:
    io.flutter.plugins.urllauncher.UrlLauncher urlLauncher -> a
    io.flutter.plugin.common.MethodChannel channel -> b
    void <init>(io.flutter.plugins.urllauncher.UrlLauncher) -> <init>
    void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> a
    void startListening(io.flutter.plugin.common.BinaryMessenger) -> a
    void stopListening() -> a
    void onCanLaunch(io.flutter.plugin.common.MethodChannel$Result,java.lang.String) -> a
    void onLaunch(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result,java.lang.String) -> a
    void onCloseWebView(io.flutter.plugin.common.MethodChannel$Result) -> a
    android.os.Bundle extractBundle(java.util.Map) -> a
io.flutter.plugins.urllauncher.UrlLauncher -> io.flutter.plugins.urllauncher.b:
    android.content.Context applicationContext -> a
    android.app.Activity activity -> b
    void <init>(android.content.Context,android.app.Activity) -> <init>
    boolean canLaunch(java.lang.String) -> a
    io.flutter.plugins.urllauncher.UrlLauncher$LaunchStatus launch(java.lang.String,android.os.Bundle,boolean,boolean,boolean) -> a
    void closeWebView() -> a
io.flutter.plugins.urllauncher.UrlLauncher$LaunchStatus -> io.flutter.plugins.urllauncher.b$a:
    io.flutter.plugins.urllauncher.UrlLauncher$LaunchStatus OK -> a
    io.flutter.plugins.urllauncher.UrlLauncher$LaunchStatus NO_ACTIVITY -> b
    io.flutter.plugins.urllauncher.UrlLauncher$LaunchStatus[] $VALUES -> c
    io.flutter.plugins.urllauncher.UrlLauncher$LaunchStatus[] values() -> values
    io.flutter.plugins.urllauncher.UrlLauncher$LaunchStatus valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
io.flutter.plugins.urllauncher.UrlLauncherPlugin -> io.flutter.plugins.urllauncher.c:
    void registerWith(io.flutter.plugin.common.PluginRegistry$Registrar) -> a
io.flutter.plugins.urllauncher.WebViewActivity -> io.flutter.plugins.urllauncher.WebViewActivity:
    java.lang.String ACTION_CLOSE -> a
    android.content.BroadcastReceiver broadcastReceiver -> b
    android.webkit.WebViewClient webViewClient -> c
    android.webkit.WebView webview -> d
    android.content.IntentFilter closeIntentFilter -> e
    java.lang.String URL_EXTRA -> f
    java.lang.String ENABLE_JS_EXTRA -> g
    java.lang.String ENABLE_DOM_EXTRA -> h
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
    java.util.Map extractHeaders(android.os.Bundle) -> a
    void onDestroy() -> onDestroy
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    android.content.Intent createIntent(android.content.Context,java.lang.String,boolean,boolean,android.os.Bundle) -> a
    void <clinit>() -> <clinit>
io.flutter.plugins.urllauncher.WebViewActivity$1 -> io.flutter.plugins.urllauncher.WebViewActivity$1:
    io.flutter.plugins.urllauncher.WebViewActivity this$0 -> a
    void <init>(io.flutter.plugins.urllauncher.WebViewActivity) -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
io.flutter.plugins.urllauncher.WebViewActivity$2 -> io.flutter.plugins.urllauncher.WebViewActivity$2:
    io.flutter.plugins.urllauncher.WebViewActivity this$0 -> a
    void <init>(io.flutter.plugins.urllauncher.WebViewActivity) -> <init>
    boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String) -> shouldOverrideUrlLoading
    boolean shouldOverrideUrlLoading(android.webkit.WebView,android.webkit.WebResourceRequest) -> shouldOverrideUrlLoading
io.flutter.util.PathUtils -> io.flutter.a.a:
    java.lang.String getFilesDir(android.content.Context) -> a
    java.lang.String getCacheDirectory(android.content.Context) -> b
io.flutter.util.Preconditions -> io.flutter.a.b:
    java.lang.Object checkNotNull(java.lang.Object) -> a
io.flutter.util.Predicate -> io.flutter.a.c:
    boolean test(java.lang.Object) -> test
io.flutter.view.AccessibilityBridge -> io.flutter.view.a:
    int FIRST_RESOURCE_ID -> a
    android.view.View rootAccessibilityView -> b
    io.flutter.embedding.engine.systemchannels.AccessibilityChannel accessibilityChannel -> c
    android.view.accessibility.AccessibilityManager accessibilityManager -> d
    io.flutter.view.AccessibilityViewEmbedder accessibilityViewEmbedder -> e
    io.flutter.plugin.platform.PlatformViewsAccessibilityDelegate platformViewsAccessibilityDelegate -> f
    android.content.ContentResolver contentResolver -> g
    java.util.Map flutterSemanticsTree -> h
    java.util.Map customAccessibilityActions -> i
    io.flutter.view.AccessibilityBridge$SemanticsNode accessibilityFocusedSemanticsNode -> j
    java.lang.Integer embeddedAccessibilityFocusedNodeId -> k
    java.lang.Integer embeddedInputFocusedNodeId -> l
    int accessibilityFeatureFlags -> m
    io.flutter.view.AccessibilityBridge$SemanticsNode inputFocusedSemanticsNode -> n
    io.flutter.view.AccessibilityBridge$SemanticsNode lastInputFocusedSemanticsNode -> o
    io.flutter.view.AccessibilityBridge$SemanticsNode hoveredObject -> p
    java.util.List flutterNavigationStack -> q
    int previousRouteId -> r
    java.lang.Integer lastLeftFrameInset -> s
    io.flutter.view.AccessibilityBridge$OnAccessibilityChangeListener onAccessibilityChangeListener -> t
    io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler accessibilityMessageHandler -> u
    android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener accessibilityStateChangeListener -> v
    android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener touchExplorationStateChangeListener -> w
    android.database.ContentObserver animationScaleObserver -> x
    void <init>(android.view.View,io.flutter.embedding.engine.systemchannels.AccessibilityChannel,android.view.accessibility.AccessibilityManager,android.content.ContentResolver,io.flutter.plugin.platform.PlatformViewsAccessibilityDelegate) -> <init>
    void release() -> a
    boolean isAccessibilityEnabled() -> b
    boolean isTouchExplorationEnabled() -> c
    void setOnAccessibilityChangeListener(io.flutter.view.AccessibilityBridge$OnAccessibilityChangeListener) -> a
    void sendLatestAccessibilityFlagsToFlutter() -> e
    boolean shouldSetCollectionInfo(io.flutter.view.AccessibilityBridge$SemanticsNode) -> a
    android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int) -> createAccessibilityNodeInfo
    boolean performAction(int,int,android.os.Bundle) -> performAction
    boolean performCursorMoveAction(io.flutter.view.AccessibilityBridge$SemanticsNode,int,android.os.Bundle,boolean) -> a
    android.view.accessibility.AccessibilityNodeInfo findFocus(int) -> findFocus
    io.flutter.view.AccessibilityBridge$SemanticsNode getRootSemanticsNode() -> f
    io.flutter.view.AccessibilityBridge$SemanticsNode getOrCreateSemanticsNode(int) -> a
    io.flutter.view.AccessibilityBridge$CustomAccessibilityAction getOrCreateAccessibilityAction(int) -> b
    boolean onAccessibilityHoverEvent(android.view.MotionEvent) -> a
    void onTouchExplorationExit() -> g
    void handleTouchExploration(float,float) -> a
    void updateCustomAccessibilityActions(java.nio.ByteBuffer,java.lang.String[]) -> a
    void updateSemantics(java.nio.ByteBuffer,java.lang.String[]) -> b
    android.view.accessibility.AccessibilityEvent createTextChangedEvent(int,java.lang.String,java.lang.String) -> a
    void sendAccessibilityEvent(int,int) -> a
    void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> a
    void sendWindowChangeEvent(io.flutter.view.AccessibilityBridge$SemanticsNode) -> b
    void sendWindowContentChangeEvent(int) -> c
    android.view.accessibility.AccessibilityEvent obtainAccessibilityEvent(int,int) -> b
    void willRemoveSemanticsNode(io.flutter.view.AccessibilityBridge$SemanticsNode) -> c
    void reset() -> d
    boolean externalViewRequestSendAccessibilityEvent(android.view.View,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    boolean lambda$shouldSetCollectionInfo$1(io.flutter.view.AccessibilityBridge$SemanticsNode) -> d
    boolean lambda$shouldSetCollectionInfo$0(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.view.AccessibilityBridge$SemanticsNode) -> a
    android.view.View access$000(io.flutter.view.AccessibilityBridge) -> a
    void access$100(io.flutter.view.AccessibilityBridge,int,int) -> a
    android.view.accessibility.AccessibilityEvent access$200(io.flutter.view.AccessibilityBridge,int,int) -> b
    void access$300(io.flutter.view.AccessibilityBridge,android.view.accessibility.AccessibilityEvent) -> a
    io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler access$400(io.flutter.view.AccessibilityBridge) -> b
    io.flutter.embedding.engine.systemchannels.AccessibilityChannel access$500(io.flutter.view.AccessibilityBridge) -> c
    io.flutter.view.AccessibilityBridge$OnAccessibilityChangeListener access$600(io.flutter.view.AccessibilityBridge) -> d
    android.view.accessibility.AccessibilityManager access$700(io.flutter.view.AccessibilityBridge) -> e
    android.content.ContentResolver access$800(io.flutter.view.AccessibilityBridge) -> f
    int access$900(io.flutter.view.AccessibilityBridge) -> g
    int access$902(io.flutter.view.AccessibilityBridge,int) -> a
    void access$1000(io.flutter.view.AccessibilityBridge) -> h
    void access$1100(io.flutter.view.AccessibilityBridge) -> i
    io.flutter.view.AccessibilityBridge$SemanticsNode access$6000(io.flutter.view.AccessibilityBridge,int) -> b
    io.flutter.view.AccessibilityBridge$CustomAccessibilityAction access$6100(io.flutter.view.AccessibilityBridge,int) -> c
    void <clinit>() -> <clinit>
io.flutter.view.AccessibilityBridge$1 -> io.flutter.view.a$1:
    io.flutter.view.AccessibilityBridge this$0 -> a
    void <init>(io.flutter.view.AccessibilityBridge) -> <init>
    void announce(java.lang.String) -> a
    void onTap(int) -> a
    void onLongPress(int) -> b
    void onTooltip(java.lang.String) -> b
    void updateCustomAccessibilityActions(java.nio.ByteBuffer,java.lang.String[]) -> a
    void updateSemantics(java.nio.ByteBuffer,java.lang.String[]) -> b
io.flutter.view.AccessibilityBridge$2 -> io.flutter.view.a$2:
    io.flutter.view.AccessibilityBridge this$0 -> a
    void <init>(io.flutter.view.AccessibilityBridge) -> <init>
    void onAccessibilityStateChanged(boolean) -> onAccessibilityStateChanged
io.flutter.view.AccessibilityBridge$3 -> io.flutter.view.a$3:
    io.flutter.view.AccessibilityBridge this$0 -> a
    void <init>(io.flutter.view.AccessibilityBridge,android.os.Handler) -> <init>
    void onChange(boolean) -> onChange
    void onChange(boolean,android.net.Uri) -> onChange
io.flutter.view.AccessibilityBridge$4 -> io.flutter.view.a$4:
    android.view.accessibility.AccessibilityManager val$accessibilityManager -> a
    io.flutter.view.AccessibilityBridge this$0 -> b
    void <init>(io.flutter.view.AccessibilityBridge,android.view.accessibility.AccessibilityManager) -> <init>
    void onTouchExplorationStateChanged(boolean) -> onTouchExplorationStateChanged
io.flutter.view.AccessibilityBridge$AccessibilityFeature -> io.flutter.view.a$a:
    io.flutter.view.AccessibilityBridge$AccessibilityFeature ACCESSIBLE_NAVIGATION -> a
    io.flutter.view.AccessibilityBridge$AccessibilityFeature INVERT_COLORS -> b
    io.flutter.view.AccessibilityBridge$AccessibilityFeature DISABLE_ANIMATIONS -> c
    int value -> d
    io.flutter.view.AccessibilityBridge$AccessibilityFeature[] $VALUES -> e
    io.flutter.view.AccessibilityBridge$AccessibilityFeature[] values() -> values
    io.flutter.view.AccessibilityBridge$AccessibilityFeature valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    void <clinit>() -> <clinit>
io.flutter.view.AccessibilityBridge$Action -> io.flutter.view.a$b:
    io.flutter.view.AccessibilityBridge$Action TAP -> a
    io.flutter.view.AccessibilityBridge$Action LONG_PRESS -> b
    io.flutter.view.AccessibilityBridge$Action SCROLL_LEFT -> c
    io.flutter.view.AccessibilityBridge$Action SCROLL_RIGHT -> d
    io.flutter.view.AccessibilityBridge$Action SCROLL_UP -> e
    io.flutter.view.AccessibilityBridge$Action SCROLL_DOWN -> f
    io.flutter.view.AccessibilityBridge$Action INCREASE -> g
    io.flutter.view.AccessibilityBridge$Action DECREASE -> h
    io.flutter.view.AccessibilityBridge$Action SHOW_ON_SCREEN -> i
    io.flutter.view.AccessibilityBridge$Action MOVE_CURSOR_FORWARD_BY_CHARACTER -> j
    io.flutter.view.AccessibilityBridge$Action MOVE_CURSOR_BACKWARD_BY_CHARACTER -> k
    io.flutter.view.AccessibilityBridge$Action SET_SELECTION -> l
    io.flutter.view.AccessibilityBridge$Action COPY -> m
    io.flutter.view.AccessibilityBridge$Action CUT -> n
    io.flutter.view.AccessibilityBridge$Action PASTE -> o
    io.flutter.view.AccessibilityBridge$Action DID_GAIN_ACCESSIBILITY_FOCUS -> p
    io.flutter.view.AccessibilityBridge$Action DID_LOSE_ACCESSIBILITY_FOCUS -> q
    io.flutter.view.AccessibilityBridge$Action CUSTOM_ACTION -> r
    io.flutter.view.AccessibilityBridge$Action DISMISS -> s
    io.flutter.view.AccessibilityBridge$Action MOVE_CURSOR_FORWARD_BY_WORD -> t
    io.flutter.view.AccessibilityBridge$Action MOVE_CURSOR_BACKWARD_BY_WORD -> u
    int value -> v
    io.flutter.view.AccessibilityBridge$Action[] $VALUES -> w
    io.flutter.view.AccessibilityBridge$Action[] values() -> values
    io.flutter.view.AccessibilityBridge$Action valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    void <clinit>() -> <clinit>
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction -> io.flutter.view.a$c:
    int resourceId -> a
    int id -> b
    int overrideId -> c
    java.lang.String label -> d
    java.lang.String hint -> e
    void <init>() -> <init>
    java.lang.String access$2700(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction) -> a
    int access$3100(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction) -> b
    java.lang.String access$3200(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction) -> c
    int access$3600(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction) -> d
    int access$3602(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction,int) -> a
    int access$3102(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction,int) -> b
    int access$3802(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction,int) -> c
    java.lang.String access$3202(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction,java.lang.String) -> a
    java.lang.String access$2702(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction,java.lang.String) -> b
    int access$3800(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction) -> e
io.flutter.view.AccessibilityBridge$Flag -> io.flutter.view.a$d:
    io.flutter.view.AccessibilityBridge$Flag HAS_CHECKED_STATE -> a
    io.flutter.view.AccessibilityBridge$Flag IS_CHECKED -> b
    io.flutter.view.AccessibilityBridge$Flag IS_SELECTED -> c
    io.flutter.view.AccessibilityBridge$Flag IS_BUTTON -> d
    io.flutter.view.AccessibilityBridge$Flag IS_TEXT_FIELD -> e
    io.flutter.view.AccessibilityBridge$Flag IS_FOCUSED -> f
    io.flutter.view.AccessibilityBridge$Flag HAS_ENABLED_STATE -> g
    io.flutter.view.AccessibilityBridge$Flag IS_ENABLED -> h
    io.flutter.view.AccessibilityBridge$Flag IS_IN_MUTUALLY_EXCLUSIVE_GROUP -> i
    io.flutter.view.AccessibilityBridge$Flag IS_HEADER -> j
    io.flutter.view.AccessibilityBridge$Flag IS_OBSCURED -> k
    io.flutter.view.AccessibilityBridge$Flag SCOPES_ROUTE -> l
    io.flutter.view.AccessibilityBridge$Flag NAMES_ROUTE -> m
    io.flutter.view.AccessibilityBridge$Flag IS_HIDDEN -> n
    io.flutter.view.AccessibilityBridge$Flag IS_IMAGE -> o
    io.flutter.view.AccessibilityBridge$Flag IS_LIVE_REGION -> p
    io.flutter.view.AccessibilityBridge$Flag HAS_TOGGLED_STATE -> q
    io.flutter.view.AccessibilityBridge$Flag IS_TOGGLED -> r
    io.flutter.view.AccessibilityBridge$Flag HAS_IMPLICIT_SCROLLING -> s
    io.flutter.view.AccessibilityBridge$Flag IS_READ_ONLY -> t
    io.flutter.view.AccessibilityBridge$Flag IS_FOCUSABLE -> u
    io.flutter.view.AccessibilityBridge$Flag IS_LINK -> v
    int value -> w
    io.flutter.view.AccessibilityBridge$Flag[] $VALUES -> x
    io.flutter.view.AccessibilityBridge$Flag[] values() -> values
    io.flutter.view.AccessibilityBridge$Flag valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    void <clinit>() -> <clinit>
io.flutter.view.AccessibilityBridge$OnAccessibilityChangeListener -> io.flutter.view.a$e:
    void onAccessibilityChanged(boolean,boolean) -> a
io.flutter.view.AccessibilityBridge$SemanticsNode -> io.flutter.view.a$f:
    io.flutter.view.AccessibilityBridge accessibilityBridge -> a
    int id -> b
    int flags -> c
    int actions -> d
    int maxValueLength -> e
    int currentValueLength -> f
    int textSelectionBase -> g
    int textSelectionExtent -> h
    int platformViewId -> i
    int scrollChildren -> j
    int scrollIndex -> k
    float scrollPosition -> l
    float scrollExtentMax -> m
    float scrollExtentMin -> n
    java.lang.String label -> o
    java.lang.String value -> p
    java.lang.String increasedValue -> q
    java.lang.String decreasedValue -> r
    java.lang.String hint -> s
    io.flutter.view.AccessibilityBridge$TextDirection textDirection -> t
    boolean hadPreviousConfig -> u
    int previousFlags -> v
    int previousActions -> w
    int previousTextSelectionBase -> x
    int previousTextSelectionExtent -> y
    float previousScrollPosition -> z
    float previousScrollExtentMax -> A
    float previousScrollExtentMin -> B
    java.lang.String previousValue -> C
    java.lang.String previousLabel -> D
    float left -> E
    float top -> F
    float right -> G
    float bottom -> H
    float[] transform -> I
    io.flutter.view.AccessibilityBridge$SemanticsNode parent -> J
    java.util.List childrenInTraversalOrder -> K
    java.util.List childrenInHitTestOrder -> L
    java.util.List customAccessibilityActions -> M
    io.flutter.view.AccessibilityBridge$CustomAccessibilityAction onTapOverride -> N
    io.flutter.view.AccessibilityBridge$CustomAccessibilityAction onLongPressOverride -> O
    boolean inverseTransformDirty -> P
    float[] inverseTransform -> Q
    boolean globalGeometryDirty -> R
    float[] globalTransform -> S
    android.graphics.Rect globalRect -> T
    boolean nullableHasAncestor(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.util.Predicate) -> b
    void <init>(io.flutter.view.AccessibilityBridge) -> <init>
    io.flutter.view.AccessibilityBridge$SemanticsNode getAncestor(io.flutter.util.Predicate) -> a
    boolean hasAction(io.flutter.view.AccessibilityBridge$Action) -> a
    boolean hadAction(io.flutter.view.AccessibilityBridge$Action) -> b
    boolean hasFlag(io.flutter.view.AccessibilityBridge$Flag) -> a
    boolean hadFlag(io.flutter.view.AccessibilityBridge$Flag) -> b
    boolean didScroll() -> a
    boolean didChangeLabel() -> b
    void updateWith(java.nio.ByteBuffer,java.lang.String[]) -> a
    void ensureInverseTransform() -> c
    android.graphics.Rect getGlobalRect() -> d
    io.flutter.view.AccessibilityBridge$SemanticsNode hitTest(float[]) -> a
    boolean isFocusable() -> e
    void collectRoutes(java.util.List) -> a
    java.lang.String getRouteName() -> f
    void updateRecursively(float[],java.util.Set,boolean) -> a
    void transformPoint(float[],float[],float[]) -> a
    float min(float,float,float,float) -> a
    float max(float,float,float,float) -> b
    java.lang.String getValueLabelHint() -> g
    int access$1200(io.flutter.view.AccessibilityBridge$SemanticsNode) -> a
    boolean access$1300(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.util.Predicate) -> a
    int access$1400(io.flutter.view.AccessibilityBridge$SemanticsNode) -> b
    android.graphics.Rect access$1500(io.flutter.view.AccessibilityBridge$SemanticsNode) -> c
    int access$1600(io.flutter.view.AccessibilityBridge$SemanticsNode) -> d
    boolean access$1700(io.flutter.view.AccessibilityBridge$SemanticsNode) -> e
    boolean access$1800(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.view.AccessibilityBridge$Flag) -> a
    int access$1900(io.flutter.view.AccessibilityBridge$SemanticsNode) -> f
    int access$2000(io.flutter.view.AccessibilityBridge$SemanticsNode) -> g
    boolean access$2100(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.view.AccessibilityBridge$Action) -> a
    int access$2200(io.flutter.view.AccessibilityBridge$SemanticsNode) -> h
    java.lang.String access$2300(io.flutter.view.AccessibilityBridge$SemanticsNode) -> i
    int access$2400(io.flutter.view.AccessibilityBridge$SemanticsNode) -> j
    io.flutter.view.AccessibilityBridge$SemanticsNode access$2500(io.flutter.view.AccessibilityBridge$SemanticsNode) -> k
    io.flutter.view.AccessibilityBridge$CustomAccessibilityAction access$2600(io.flutter.view.AccessibilityBridge$SemanticsNode) -> l
    io.flutter.view.AccessibilityBridge$CustomAccessibilityAction access$2800(io.flutter.view.AccessibilityBridge$SemanticsNode) -> m
    java.lang.String access$2900(io.flutter.view.AccessibilityBridge$SemanticsNode) -> n
    java.util.List access$3000(io.flutter.view.AccessibilityBridge$SemanticsNode) -> o
    java.util.List access$3300(io.flutter.view.AccessibilityBridge$SemanticsNode) -> p
    java.lang.String access$2302(io.flutter.view.AccessibilityBridge$SemanticsNode,java.lang.String) -> a
    java.lang.String access$3400(io.flutter.view.AccessibilityBridge$SemanticsNode) -> q
    java.lang.String access$3500(io.flutter.view.AccessibilityBridge$SemanticsNode) -> r
    int access$1602(io.flutter.view.AccessibilityBridge$SemanticsNode,int) -> a
    io.flutter.view.AccessibilityBridge$SemanticsNode access$3700(io.flutter.view.AccessibilityBridge$SemanticsNode,float[]) -> a
    void access$3900(io.flutter.view.AccessibilityBridge$SemanticsNode,java.nio.ByteBuffer,java.lang.String[]) -> a
    boolean access$4000(io.flutter.view.AccessibilityBridge$SemanticsNode) -> s
    boolean access$4102(io.flutter.view.AccessibilityBridge$SemanticsNode,boolean) -> a
    boolean access$4202(io.flutter.view.AccessibilityBridge$SemanticsNode,boolean) -> b
    void access$4300(io.flutter.view.AccessibilityBridge$SemanticsNode,float[],java.util.Set,boolean) -> a
    void access$4400(io.flutter.view.AccessibilityBridge$SemanticsNode,java.util.List) -> a
    boolean access$4500(io.flutter.view.AccessibilityBridge$SemanticsNode) -> t
    float access$4600(io.flutter.view.AccessibilityBridge$SemanticsNode) -> u
    float access$4700(io.flutter.view.AccessibilityBridge$SemanticsNode) -> v
    float access$4800(io.flutter.view.AccessibilityBridge$SemanticsNode) -> w
    boolean access$4900(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.view.AccessibilityBridge$Action) -> b
    int access$5000(io.flutter.view.AccessibilityBridge$SemanticsNode) -> x
    java.util.List access$5100(io.flutter.view.AccessibilityBridge$SemanticsNode) -> y
    java.lang.String access$5200(io.flutter.view.AccessibilityBridge$SemanticsNode) -> z
    java.lang.String access$5300(io.flutter.view.AccessibilityBridge$SemanticsNode) -> A
    boolean access$5400(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.view.AccessibilityBridge$Flag) -> b
    boolean access$5500(io.flutter.view.AccessibilityBridge$SemanticsNode) -> B
    java.lang.String access$5600(io.flutter.view.AccessibilityBridge$SemanticsNode) -> C
    int access$5700(io.flutter.view.AccessibilityBridge$SemanticsNode) -> D
    int access$5800(io.flutter.view.AccessibilityBridge$SemanticsNode) -> E
    java.lang.String access$5900(io.flutter.view.AccessibilityBridge$SemanticsNode) -> F
    io.flutter.view.AccessibilityBridge$SemanticsNode access$2502(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.view.AccessibilityBridge$SemanticsNode) -> a
io.flutter.view.AccessibilityBridge$TextDirection -> io.flutter.view.a$g:
    io.flutter.view.AccessibilityBridge$TextDirection UNKNOWN -> a
    io.flutter.view.AccessibilityBridge$TextDirection LTR -> b
    io.flutter.view.AccessibilityBridge$TextDirection RTL -> c
    io.flutter.view.AccessibilityBridge$TextDirection[] $VALUES -> d
    io.flutter.view.AccessibilityBridge$TextDirection[] values() -> values
    io.flutter.view.AccessibilityBridge$TextDirection valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    io.flutter.view.AccessibilityBridge$TextDirection fromInt(int) -> a
    void <clinit>() -> <clinit>
io.flutter.view.AccessibilityViewEmbedder -> io.flutter.view.AccessibilityViewEmbedder:
    java.lang.String TAG -> TAG
    io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors reflectionAccessors -> reflectionAccessors
    android.view.View rootAccessibilityView -> rootAccessibilityView
    android.util.SparseArray flutterIdToOrigin -> flutterIdToOrigin
    java.util.Map originToFlutterId -> originToFlutterId
    java.util.Map embeddedViewToDisplayBounds -> embeddedViewToDisplayBounds
    int nextFlutterId -> nextFlutterId
    void <init>(android.view.View,int) -> <init>
    android.view.accessibility.AccessibilityNodeInfo getRootNode(android.view.View,int,android.graphics.Rect) -> getRootNode
    android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int) -> createAccessibilityNodeInfo
    android.view.accessibility.AccessibilityNodeInfo convertToFlutterNode(android.view.accessibility.AccessibilityNodeInfo,int,android.view.View) -> convertToFlutterNode
    void setFlutterNodeParent(android.view.accessibility.AccessibilityNodeInfo,android.view.View,android.view.accessibility.AccessibilityNodeInfo) -> setFlutterNodeParent
    void addChildrenToFlutterNode(android.view.accessibility.AccessibilityNodeInfo,android.view.View,android.view.accessibility.AccessibilityNodeInfo) -> addChildrenToFlutterNode
    void cacheVirtualIdMappings(android.view.View,int,int) -> cacheVirtualIdMappings
    void setFlutterNodesTranslateBounds(android.view.accessibility.AccessibilityNodeInfo,android.graphics.Rect,android.view.accessibility.AccessibilityNodeInfo) -> setFlutterNodesTranslateBounds
    void copyAccessibilityFields(android.view.accessibility.AccessibilityNodeInfo,android.view.accessibility.AccessibilityNodeInfo) -> copyAccessibilityFields
    boolean requestSendAccessibilityEvent(android.view.View,android.view.View,android.view.accessibility.AccessibilityEvent) -> requestSendAccessibilityEvent
    boolean performAction(int,int,android.os.Bundle) -> performAction
    java.lang.Integer getRecordFlutterId(android.view.View,android.view.accessibility.AccessibilityRecord) -> getRecordFlutterId
    boolean onAccessibilityHoverEvent(int,android.view.MotionEvent) -> onAccessibilityHoverEvent
io.flutter.view.AccessibilityViewEmbedder$1 -> io.flutter.view.AccessibilityViewEmbedder$1:
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors -> io.flutter.view.AccessibilityViewEmbedder$a:
    java.lang.reflect.Method getSourceNodeId -> a
    java.lang.reflect.Method getParentNodeId -> b
    java.lang.reflect.Method getRecordSourceNodeId -> c
    java.lang.reflect.Method getChildId -> d
    java.lang.reflect.Field childNodeIdsField -> e
    java.lang.reflect.Method longArrayGetIndex -> f
    void <init>() -> <init>
    int getVirtualNodeId(long) -> b
    java.lang.Long getSourceNodeId(android.view.accessibility.AccessibilityNodeInfo) -> a
    java.lang.Long getChildId(android.view.accessibility.AccessibilityNodeInfo,int) -> a
    java.lang.Long getParentNodeId(android.view.accessibility.AccessibilityNodeInfo) -> b
    java.lang.Long yoinkParentIdFromParcel(android.view.accessibility.AccessibilityNodeInfo) -> c
    boolean isBitSet(long,int) -> a
    java.lang.Long getRecordSourceNodeId(android.view.accessibility.AccessibilityRecord) -> a
    void <init>(io.flutter.view.AccessibilityViewEmbedder$1) -> <init>
    java.lang.Long access$100(io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors,android.view.accessibility.AccessibilityNodeInfo) -> a
    int access$200(long) -> a
    java.lang.Long access$300(io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors,android.view.accessibility.AccessibilityNodeInfo) -> b
    java.lang.Long access$500(io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors,android.view.accessibility.AccessibilityNodeInfo,int) -> a
    java.lang.Long access$600(io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors,android.view.accessibility.AccessibilityRecord) -> a
io.flutter.view.AccessibilityViewEmbedder$ViewAndId -> io.flutter.view.AccessibilityViewEmbedder$b:
    android.view.View view -> a
    int id -> b
    void <init>(android.view.View,int) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void <init>(android.view.View,int,io.flutter.view.AccessibilityViewEmbedder$1) -> <init>
io.flutter.view.FlutterCallbackInformation -> io.flutter.view.FlutterCallbackInformation:
    java.lang.String callbackName -> callbackName
    java.lang.String callbackClassName -> callbackClassName
    java.lang.String callbackLibraryPath -> callbackLibraryPath
    io.flutter.view.FlutterCallbackInformation lookupCallbackInformation(long) -> lookupCallbackInformation
    void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
io.flutter.view.FlutterMain -> io.flutter.view.b:
    boolean isRunningInRobolectricTest -> a
    void startInitialization(android.content.Context) -> a
    void ensureInitializationComplete(android.content.Context,java.lang.String[]) -> a
    java.lang.String findAppBundlePath() -> a
    void <clinit>() -> <clinit>
io.flutter.view.FlutterNativeView -> io.flutter.view.c:
    io.flutter.app.FlutterPluginRegistry mPluginRegistry -> a
    io.flutter.embedding.engine.dart.DartExecutor dartExecutor -> b
    io.flutter.view.FlutterView mFlutterView -> c
    io.flutter.embedding.engine.FlutterJNI mFlutterJNI -> d
    android.content.Context mContext -> e
    boolean applicationIsRunning -> f
    io.flutter.embedding.engine.renderer.FlutterUiDisplayListener flutterUiDisplayListener -> g
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,boolean) -> <init>
    void detachFromFlutterView() -> a
    void destroy() -> b
    io.flutter.embedding.engine.dart.DartExecutor getDartExecutor() -> c
    io.flutter.app.FlutterPluginRegistry getPluginRegistry() -> d
    void attachViewAndActivity(io.flutter.view.FlutterView,android.app.Activity) -> a
    boolean isAttached() -> e
    void assertAttached() -> f
    void runFromBundle(io.flutter.view.FlutterRunArguments) -> a
    boolean isApplicationRunning() -> g
    void send(java.lang.String,java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> a
    void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler) -> a
    io.flutter.embedding.engine.FlutterJNI getFlutterJNI() -> h
    void attach(io.flutter.view.FlutterNativeView,boolean) -> a
    io.flutter.view.FlutterView access$000(io.flutter.view.FlutterNativeView) -> a
    io.flutter.app.FlutterPluginRegistry access$200(io.flutter.view.FlutterNativeView) -> b
io.flutter.view.FlutterNativeView$1 -> io.flutter.view.c$1:
    io.flutter.view.FlutterNativeView this$0 -> a
    void <init>(io.flutter.view.FlutterNativeView) -> <init>
    void onFlutterUiDisplayed() -> a
    void onFlutterUiNoLongerDisplayed() -> b
io.flutter.view.FlutterNativeView$EngineLifecycleListenerImpl -> io.flutter.view.c$a:
    io.flutter.view.FlutterNativeView this$0 -> a
    void <init>(io.flutter.view.FlutterNativeView) -> <init>
    void onPreEngineRestart() -> a
    void <init>(io.flutter.view.FlutterNativeView,io.flutter.view.FlutterNativeView$1) -> <init>
io.flutter.view.FlutterRunArguments -> io.flutter.view.d:
    java.lang.String bundlePath -> a
    java.lang.String entrypoint -> b
    java.lang.String libraryPath -> c
    void <init>() -> <init>
io.flutter.view.FlutterView -> io.flutter.view.e:
    io.flutter.embedding.engine.dart.DartExecutor dartExecutor -> a
    io.flutter.embedding.engine.renderer.FlutterRenderer flutterRenderer -> b
    io.flutter.embedding.engine.systemchannels.NavigationChannel navigationChannel -> c
    io.flutter.embedding.engine.systemchannels.KeyEventChannel keyEventChannel -> d
    io.flutter.embedding.engine.systemchannels.LifecycleChannel lifecycleChannel -> e
    io.flutter.embedding.engine.systemchannels.LocalizationChannel localizationChannel -> f
    io.flutter.embedding.engine.systemchannels.PlatformChannel platformChannel -> g
    io.flutter.embedding.engine.systemchannels.SettingsChannel settingsChannel -> h
    io.flutter.embedding.engine.systemchannels.SystemChannel systemChannel -> i
    android.view.inputmethod.InputMethodManager mImm -> j
    io.flutter.plugin.editing.TextInputPlugin mTextInputPlugin -> k
    io.flutter.embedding.android.AndroidKeyProcessor androidKeyProcessor -> l
    io.flutter.embedding.android.AndroidTouchProcessor androidTouchProcessor -> m
    io.flutter.view.AccessibilityBridge mAccessibilityNodeProvider -> n
    android.view.SurfaceHolder$Callback mSurfaceCallback -> o
    io.flutter.view.FlutterView$ViewportMetrics mMetrics -> p
    java.util.List mActivityLifecycleListeners -> q
    java.util.List mFirstFrameListeners -> r
    java.util.concurrent.atomic.AtomicLong nextTextureId -> s
    io.flutter.view.FlutterNativeView mNativeView -> t
    boolean mIsSoftwareRenderingEnabled -> u
    boolean didRenderFirstFrame -> v
    io.flutter.view.AccessibilityBridge$OnAccessibilityChangeListener onAccessibilityChangeListener -> w
    void <init>(android.content.Context,android.util.AttributeSet,io.flutter.view.FlutterNativeView) -> <init>
    android.app.Activity getActivity(android.content.Context) -> a
    io.flutter.embedding.engine.dart.DartExecutor getDartExecutor() -> getDartExecutor
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    io.flutter.view.FlutterNativeView getFlutterNativeView() -> getFlutterNativeView
    io.flutter.app.FlutterPluginRegistry getPluginRegistry() -> getPluginRegistry
    void addActivityLifecycleListener(io.flutter.plugin.common.ActivityLifecycleListener) -> a
    void onStart() -> b
    void onPause() -> c
    void onPostResume() -> d
    void onStop() -> e
    void onMemoryPressure() -> f
    void addFirstFrameListener(io.flutter.view.FlutterView$FirstFrameListener) -> a
    void removeFirstFrameListener(io.flutter.view.FlutterView$FirstFrameListener) -> b
    void setInitialRoute(java.lang.String) -> setInitialRoute
    void popRoute() -> g
    void sendUserPlatformSettingsToDart() -> n
    void sendLocalesToDart(android.content.res.Configuration) -> a
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    float getDevicePixelRatio() -> getDevicePixelRatio
    io.flutter.view.FlutterNativeView detach() -> h
    void destroy() -> i
    android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo) -> onCreateInputConnection
    boolean checkInputConnectionProxy(android.view.View) -> checkInputConnectionProxy
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean onHoverEvent(android.view.MotionEvent) -> onHoverEvent
    boolean onGenericMotionEvent(android.view.MotionEvent) -> onGenericMotionEvent
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    io.flutter.view.FlutterView$ZeroSides calculateShouldZeroSides() -> j
    int calculateBottomKeyboardInset(android.view.WindowInsets) -> a
    android.view.WindowInsets onApplyWindowInsets(android.view.WindowInsets) -> onApplyWindowInsets
    boolean fitSystemWindows(android.graphics.Rect) -> fitSystemWindows
    boolean isAttached() -> o
    void assertAttached() -> k
    void preRun() -> p
    void resetAccessibilityTree() -> l
    void postRun() -> q
    void runFromBundle(io.flutter.view.FlutterRunArguments) -> a
    android.graphics.Bitmap getBitmap() -> getBitmap
    void updateViewportMetrics() -> r
    void onFirstFrame() -> m
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void resetWillNotDraw(boolean,boolean) -> a
    android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider() -> getAccessibilityNodeProvider
    void send(java.lang.String,java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> a
    void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler) -> a
    io.flutter.view.TextureRegistry$SurfaceTextureEntry createSurfaceTexture() -> a
    void access$000(io.flutter.view.FlutterView,boolean,boolean) -> a
    io.flutter.view.FlutterNativeView access$100(io.flutter.view.FlutterView) -> a
io.flutter.view.FlutterView$1 -> io.flutter.view.e$1:
    io.flutter.view.FlutterView this$0 -> a
    void <init>(io.flutter.view.FlutterView) -> <init>
    void onAccessibilityChanged(boolean,boolean) -> a
io.flutter.view.FlutterView$2 -> io.flutter.view.e$2:
    io.flutter.view.FlutterView this$0 -> a
    void <init>(io.flutter.view.FlutterView) -> <init>
    void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
    void surfaceChanged(android.view.SurfaceHolder,int,int,int) -> surfaceChanged
    void surfaceDestroyed(android.view.SurfaceHolder) -> surfaceDestroyed
io.flutter.view.FlutterView$3 -> io.flutter.view.e$3:
    io.flutter.plugin.platform.PlatformPlugin val$platformPlugin -> a
    io.flutter.view.FlutterView this$0 -> b
    void <init>(io.flutter.view.FlutterView,io.flutter.plugin.platform.PlatformPlugin) -> <init>
    void onPostResume() -> a
io.flutter.view.FlutterView$FirstFrameListener -> io.flutter.view.e$a:
    void onFirstFrame() -> a
io.flutter.view.FlutterView$Provider -> io.flutter.view.e$b:
io.flutter.view.FlutterView$SurfaceTextureRegistryEntry -> io.flutter.view.e$c:
    long id -> b
    android.graphics.SurfaceTexture surfaceTexture -> c
    boolean released -> d
    android.graphics.SurfaceTexture$OnFrameAvailableListener onFrameListener -> e
    io.flutter.view.FlutterView this$0 -> a
    void <init>(io.flutter.view.FlutterView,long,android.graphics.SurfaceTexture) -> <init>
    android.graphics.SurfaceTexture surfaceTexture() -> a
    long id() -> b
    void release() -> c
    boolean access$200(io.flutter.view.FlutterView$SurfaceTextureRegistryEntry) -> a
    long access$300(io.flutter.view.FlutterView$SurfaceTextureRegistryEntry) -> b
io.flutter.view.FlutterView$SurfaceTextureRegistryEntry$1 -> io.flutter.view.e$c$1:
    io.flutter.view.FlutterView$SurfaceTextureRegistryEntry this$1 -> a
    void <init>(io.flutter.view.FlutterView$SurfaceTextureRegistryEntry) -> <init>
    void onFrameAvailable(android.graphics.SurfaceTexture) -> onFrameAvailable
io.flutter.view.FlutterView$ViewportMetrics -> io.flutter.view.e$d:
    float devicePixelRatio -> a
    int physicalWidth -> b
    int physicalHeight -> c
    int physicalPaddingTop -> d
    int physicalPaddingRight -> e
    int physicalPaddingBottom -> f
    int physicalPaddingLeft -> g
    int physicalViewInsetTop -> h
    int physicalViewInsetRight -> i
    int physicalViewInsetBottom -> j
    int physicalViewInsetLeft -> k
    int systemGestureInsetTop -> l
    int systemGestureInsetRight -> m
    int systemGestureInsetBottom -> n
    int systemGestureInsetLeft -> o
    void <init>() -> <init>
io.flutter.view.FlutterView$ZeroSides -> io.flutter.view.e$e:
    io.flutter.view.FlutterView$ZeroSides NONE -> a
    io.flutter.view.FlutterView$ZeroSides LEFT -> b
    io.flutter.view.FlutterView$ZeroSides RIGHT -> c
    io.flutter.view.FlutterView$ZeroSides BOTH -> d
    io.flutter.view.FlutterView$ZeroSides[] $VALUES -> e
    io.flutter.view.FlutterView$ZeroSides[] values() -> values
    io.flutter.view.FlutterView$ZeroSides valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
io.flutter.view.TextureRegistry -> io.flutter.view.f:
    io.flutter.view.TextureRegistry$SurfaceTextureEntry createSurfaceTexture() -> a
io.flutter.view.TextureRegistry$SurfaceTextureEntry -> io.flutter.view.f$a:
    android.graphics.SurfaceTexture surfaceTexture() -> a
    long id() -> b
    void release() -> c
io.flutter.view.VsyncWaiter -> io.flutter.view.g:
    io.flutter.view.VsyncWaiter instance -> a
    android.view.WindowManager windowManager -> b
    io.flutter.embedding.engine.FlutterJNI$AsyncWaitForVsyncDelegate asyncWaitForVsyncDelegate -> c
    io.flutter.view.VsyncWaiter getInstance(android.view.WindowManager) -> a
    void <init>(android.view.WindowManager) -> <init>
    void init() -> a
    android.view.WindowManager access$000(io.flutter.view.VsyncWaiter) -> a
io.flutter.view.VsyncWaiter$1 -> io.flutter.view.g$1:
    io.flutter.view.VsyncWaiter this$0 -> a
    void <init>(io.flutter.view.VsyncWaiter) -> <init>
    void asyncWaitForVsync(long) -> a
io.flutter.view.VsyncWaiter$1$1 -> io.flutter.view.g$1$1:
    long val$cookie -> a
    io.flutter.view.VsyncWaiter$1 this$1 -> b
    void <init>(io.flutter.view.VsyncWaiter$1,long) -> <init>
    void doFrame(long) -> doFrame
org.fmod.FMODAudioDevice -> org.fmod.FMODAudioDevice:
    java.lang.Thread a -> a
    boolean b -> b
    android.media.AudioTrack c -> c
    boolean d -> d
    java.nio.ByteBuffer e -> e
    byte[] f -> f
    org.fmod.a g -> g
    int h -> h
    int i -> i
    int j -> j
    int k -> k
    void <init>() -> <init>
    void start() -> start
    void stop() -> stop
    void close() -> close
    boolean isRunning() -> isRunning
    void run() -> run
    void releaseAudioTrack() -> releaseAudioTrack
    int fmodGetInfo(int) -> fmodGetInfo
    int fmodProcess(java.nio.ByteBuffer) -> fmodProcess
    int fmodProcessMicData(java.nio.ByteBuffer,int) -> fmodProcessMicData
    int startAudioRecord(int,int,int) -> startAudioRecord
    void stopAudioRecord() -> stopAudioRecord
    void <clinit>() -> <clinit>
org.fmod.a -> org.fmod.a:
    org.fmod.FMODAudioDevice a -> a
    java.nio.ByteBuffer b -> b
    int c -> c
    int d -> d
    int e -> e
    java.lang.Thread f -> f
    boolean g -> g
    android.media.AudioRecord h -> h
    boolean i -> i
    void <init>(org.fmod.FMODAudioDevice,int,int) -> <init>
    int a() -> a
    void b() -> b
    void c() -> c
    void run() -> run
    void d() -> d
